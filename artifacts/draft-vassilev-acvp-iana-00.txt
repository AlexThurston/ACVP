



TBD                                                     A. Vassilev, Ed.
Internet-Draft                                                      NIST
Intended status: Informational                              July 1, 2018
Expires: January 2, 2019


                           ACVP IANA Registry
                      draft-vassilev-acvp-iana-00

Abstract

   This document defines the IANA registry for supported cryptographic
   algorithm test specifications in the Automated Cryptographic
   Validation Protocol (ACVP) [acvp].  This document also shows how to
   extend the capabilities of ACVP with testing for new cryptographic
   algorithms.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 2, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Vassilev                 Expires January 2, 2019                [Page 1]

Internet-Draft                  ACVP-IANA                      July 2018


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Registry hierarchy  . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Algorithm types . . . . . . . . . . . . . . . . . . . . .   3
       2.1.1.  Block cipher types  . . . . . . . . . . . . . . . . .   3
       2.1.2.  Digital signature types . . . . . . . . . . . . . . .   3
       2.1.3.  Secure hash types . . . . . . . . . . . . . . . . . .   4
       2.1.4.  Deterministic random bit generator types  . . . . . .   4
     2.2.  Algorithm registry  . . . . . . . . . . . . . . . . . . .   5
   3.  Aligning with RFC 8126  . . . . . . . . . . . . . . . . . . .   5
   4.  Adding a new algorithm to an existing class . . . . . . . . .   6
     4.1.  Adding a new algorithm with existing test types . . . . .   6
     4.2.  Adding a new test type to a new or existing algorithm . .   6
   5.  Adding a new algorithm to a new class . . . . . . . . . . . .   7
   6.  Requirements Language . . . . . . . . . . . . . . . . . . . .   7
   7.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   7
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   7
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .   7
   10. Normative References  . . . . . . . . . . . . . . . . . . . .   7
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   8

1.  Introduction

   The Automated Cryptographic Validation Protocol (ACVP) [acvp] defines
   a mechanism to automatically validate the cryptographic algorithm
   implementations of software or hardware cryptographic modules.  The
   ACVP specification defines how a cryptographic module communicates
   with a validation authority server, including cryptographic
   capabilities negotiation, session management, authentication, test
   vector processing and more.  The ACVP specification does not define
   algorithm-specific JSON constructs for performing the cryptographic
   validation.  A series of ACVP-related sub-specifications define the
   constructs for testing individual cryptographic algorithms, see for
   example [sub-symmetric].  Each such sub-specification addresses a
   specific algorithm or a class of cryptographic algorithms.  This
   document defines the IANA registry for the supported algorithm test
   specifications that work with ACVP.  The registry defined here
   provides the binding between the protocol and the supported algorithm
   test extensions.

   This document also outlines the procedure for adding support for
   testing a new cryptographic algorithm, including hints for how to
   develop the testing methodology and the corresponding JSON constructs
   for performing the validation with ACVP.






Vassilev                 Expires January 2, 2019                [Page 2]

Internet-Draft                  ACVP-IANA                      July 2018


2.  Registry hierarchy

   The IANA registry for ACVP is based on the high-level taxonomy of
   supported algorithm classes shown below.

                    +-------------------------+------+
                    | Algorithm class         | Code |
                    +-------------------------+------+
                    | Symmetric block ciphers | 0x01 |
                    | Digital signature       | 0x02 |
                    | Hash                    | 0x03 |
                    | XOF                     | 0x04 |
                    | MAC                     | 0x05 |
                    | DRBG                    | 0x06 |
                    | KAS                     | 0x07 |
                    | KDF                     | 0x08 |
                    +-------------------------+------+

                     Table 1: Algorithm class taxonomy

2.1.  Algorithm types

   Each algorithm class may contain two or more different types of
   algorithms, each type with some characteristic feature distinguishing
   it from the other algorithm types in the same class.

2.1.1.  Block cipher types

   The types of different symmetric block ciphers are shown in Table 2
   below.

     +--------------------------------+------+------+---------------+
     | Type                           | Name | Code | Rec'd for use |
     +--------------------------------+------+------+---------------+
     | 128-bit symmetric block cipher | AES  | 0x01 |      Yes      |
     | 64-bit symmetric block cipher  | TDES | 0x02 |     Yes--     |
     +--------------------------------+------+------+---------------+

   -- several restrictions on TDES exist to ensure secure use under the
    growing threats of recent attacks.  For specific guidance see TBD.

                        Table 2: Block Cipher Types

2.1.2.  Digital signature types

   The types of different digital signature algorithms are shown in
   Table 3 below.




Vassilev                 Expires January 2, 2019                [Page 3]

Internet-Draft                  ACVP-IANA                      July 2018


   +--------------------------+----------------------+------+----------+
   | Type                     |         Name         | Code |  Rec'd   |
   |                          |                      |      | for use  |
   +--------------------------+----------------------+------+----------+
   | Discrete Log             |     Finite Field     | 0x01 |   Yes    |
   | Cryptography (DLC)       |  Cryptography (FFC)  |      |          |
   |                          |                      |      |          |
   | DLC                      |    Elliptic Curve    | 0x02 |   Yes    |
   |                          |  Cryptography (ECC)  |      |          |
   |                          |                      |      |          |
   | Integer Factorization    |         n/a          | 0x03 |   Yes    |
   | Cryptography (IFC)       |                      |      |          |
   +--------------------------+----------------------+------+----------+

                     Table 3: Digital Signature Types

2.1.3.  Secure hash types

   The secure hash types are shown in Table 4 below.

   +------------------------------+--------------+------+--------------+
   | Type                         |     Name     | Code |  Rec'd for   |
   |                              |              |      |     use      |
   +------------------------------+--------------+------+--------------+
   | Fixed length output          |    SHA-1     | 0x01 |     No++     |
   |                              |    SHA-2     | 0x02 |     Yes      |
   |                              |    SHA-3     | 0x03 |     Yes      |
   |                              |              |      |              |
   | Variable length output       |  TupleHash   | 0x04 |     Yes      |
   |                              |    cSHAKE    | 0x05 |     Yes      |
   |                              |     KMAC     | 0x06 |     Yes      |
   |                              | ParallelHash | 0x07 |     Yes      |
   |                              |              |      |              |
   | Extendable output functions  |    SHAKE     | 0x08 |     Yes      |
   | (XoF)                        |              |      |              |
   +------------------------------+--------------+------+--------------+

   ++ SHA-1 may be used in some limited cases such as to verify existing
            old digital signatures.  See TBD for more details.

                        Table 4: Secure Hash Types

2.1.4.  Deterministic random bit generator types

   The deterministic random bit generator (DRBG) types are shown in
   Table 5 below.





Vassilev                 Expires January 2, 2019                [Page 4]

Internet-Draft                  ACVP-IANA                      July 2018


              +---------------+------+------+---------------+
              | Type          | Name | Code | Rec'd for use |
              +---------------+------+------+---------------+
              | Counter-based | n/a  | 0x01 |      Yes      |
              | Hash-based    | n/a  | 0x02 |      Yes      |
              | HMAC-based    | n/a  | 0x03 |      Yes      |
              +---------------+------+------+---------------+

                            Table 5: DRBG Types

2.2.  Algorithm registry

   +------------------+------------------+-----------+-----------------+
   | Supported        |       Code       | Rec'd for |    Reference    |
   | algorithms       | {class,type,id}  |    use    |                 |
   +------------------+------------------+-----------+-----------------+
   | ACVP_AES_ECB     | {0x01,0x01,0x01} |    Yes    | [sub-symmetric] |
   | ACVP_AES_CBC     | {0x01,0x01,0x02} |    Yes    | [sub-symmetric] |
   | ACVP_AES_OFB     | {0x01,0x01,0x03} |    Yes    | [sub-symmetric] |
   | ACVP_AES_CFB1    | {0x01,0x01,0x04} |    Yes    | [sub-symmetric] |
   | ACVP_AES_CFB8    | {0x01,0x01,0x05} |    Yes    | [sub-symmetric] |
   | ACVP_AES_CFB128  | {0x01,0x01,0x06} |    Yes    | [sub-symmetric] |
   | ACVP_AES_CTR     | {0x01,0x01,0x07} |    Yes    | [sub-symmetric] |
   | ACVP_AES_GCM     | {0x01,0x01,0x08} |    Yes    | [sub-symmetric] |
   | ACVP_AES_CCM     | {0x01,0x01,0x09} |    Yes    | [sub-symmetric] |
   | ACVP_AES_XPN     | {0x01,0x01,0x0A} |    Yes    | [sub-symmetric] |
   | ACVP_AES_CMAC    | {0x01,0x01,0x0B} |    Yes    | [sub-symmetric] |
   | ACVP_AES_GMAC    | {0x01,0x01,0x0C} |    Yes    | [sub-symmetric] |
   | ACVP_AES_KW      | {0x01,0x01,0x0D} |    Yes    | [sub-symmetric] |
   | ACVP_AES_KWP     | {0x01,0x01,0x0E} |    Yes    | [sub-symmetric] |
   | ACVP_AES_XTS     | {0x01,0x01,0x0F} |    Yes    | [sub-symmetric] |
   | ACVP_TDES_ECB    | {0x01,0x02,0x01} |    Yes    | [sub-symmetric] |
   | ACVP_TDES_CBC    | {0x01,0x02,0x02} |    Yes    | [sub-symmetric] |
   | ACVP_TDES_OFB    | {0x01,0x02,0x03} |    Yes    | [sub-symmetric] |
   | ACVP_TDES_CFB1   | {0x01,0x02,0x04} |    Yes    | [sub-symmetric] |
   | ACVP_TDES_CFB8   | {0x01,0x02,0x05} |    Yes    | [sub-symmetric] |
   | ACVP_TDES_CFB64  | {0x01,0x02,0x06} |    Yes    | [sub-symmetric] |
   | ACVP_TDES_CTR    | {0x01,0x02,0x07} |    Yes    | [sub-symmetric] |
   | ACVP_TDES_TKW    | {0x01,0x02,0x08} |    Yes    | [sub-symmetric] |
   +------------------+------------------+-----------+-----------------+

                        Table 6: Algorithm registry

3.  Aligning with RFC 8126

   IANA registries require specific registry policy for changing and
   adding to a registry - see [RFC8126].  To align with this standard,




Vassilev                 Expires January 2, 2019                [Page 5]

Internet-Draft                  ACVP-IANA                      July 2018


   all changes to this registry are subject to "Expert Review" unless
   otherwise specified.

4.  Adding a new algorithm to an existing class

   To add testing for a new algorithm first confirm that the class the
   new algorithm belongs to exists within the taxonomy in Section 2.
   This is subject to "Specification Required" - see [RFC8126]

4.1.  Adding a new algorithm with existing test types

   If it belongs to an already-suppoted class, check if it is similar to
   some of the already supported algorithms from that class.  Typically,
   the algorithms in a given class share similar testing methodology.

   For example, the testing of symmetric block ciphers is comprised of
   two test types: Algorithm Functional Tests and Monte Carlo Tests -
   see [sub-symmetric].

   Assuming that the existing test types provide sufficient test
   coverage for the new algorithm, one needs to add the new block cipher
   algorithm to the symmertic block cipher specification
   [sub-symmetric], including the JSON schemas for the corresponding
   test data exchanges between the validation server and the client.
   See in particular Section "Adding new algorithms" in the
   corresponding algorithm specification.

   Next, depending on the block size of the new cipher, one may need to
   create a new entry in Table 2.  Lastly, one needs to create an entry
   in Table 6 with the proper algorithm class and type and a new unique
   identifier.  Note that this action is subject to a "Specification
   required" policy - see [RFC8126] for details.

   Once this is completed and the corresponding server test generation
   and validation for that algorithm is implemented, testing can
   commence.  Clients implementing that algorithm may register it for
   testing as described in Section "Capabilities Registration" in
   [sub-symmetric], process the test vectors generated by the validation
   server and return the results for validation.

4.2.  Adding a new test type to a new or existing algorithm

   If the available test types for an algorithm, existing or new, in a
   given class do not provide good test coverage of the algorithm, one
   could develop a new test type and incorporate it into the
   corresponding test specification for the existing class.  See for
   example Section "Adding new algorithms" in [sub-symmetric] for how to
   add a new test type.  Note that this action would require



Vassilev                 Expires January 2, 2019                [Page 6]

Internet-Draft                  ACVP-IANA                      July 2018


   modifications of [sub-symmetric] and is subject to a "Specification
   required" policy - see [RFC8126] for details.

5.  Adding a new algorithm to a new class

   Cryptography is a fast evolving field.  It is conceivable to think
   that new cryptographic algorithm classes and algorithms will emerge
   in the future.  It is also likely that their implementations would
   need to be tested for correctness similar to the existing algorithms.
   When such algorithms become available they may be added as extensions
   to ACVP.  To do this, one would have to first develop a test
   specification for the new algorithm similar to [sub-symmetric].
   Next, one would have to update Table 1 and develop a new table of
   corresponding algorithm types for the new class, similar to Table 2
   or Table 3.  Lastly, one would have to create an entry in Table 6
   with the proper algorithm class and type and a new unique identifier.

   This action is subject to a "Specification Required" policy - see
   [RFC8126]

6.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].

7.  Acknowledgements

   TBD...

8.  IANA Considerations

   This memo includes no request to IANA.

9.  Security Considerations

   Security considerations are addressed by the ACVP specification.

10.  Normative References

   [acvp]     Fussell, B., Vassilev, A., and H. Booth, "Automatic
              Cryptographic Validation Protocol", 2018,
              <https://github.com/usnistgov/ACVP/blob/master/artifacts/
              draft-fussell-acvp-spec-00.txt>.







Vassilev                 Expires January 2, 2019                [Page 7]

Internet-Draft                  ACVP-IANA                      July 2018


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/info/rfc8126>.

   [sub-symmetric]
              Celi, C., "ACVP Symmetric Algorithm JSON Specification",
              2018,
              <https://github.com/usnistgov/ACVP/blob/master/artifacts/
              draft-celi-block-ciph-00.txt>.

Author's Address

   Apostol Vassilev (editor)
   NIST
   100 Bureau Dr.
   Gaithersburg, MD  20899
   USA

   Email: apostol.vassilev@nist.gov


























Vassilev                 Expires January 2, 2019                [Page 8]
