



TBD                                                      B. Fussell, Ed.
Internet-Draft                                       Cisco Systems, Inc.
Intended status: Informational                                 June 2016
Expires: December 3, 2016


        ACVP Message Authentication Algorithm JSON Specification
                       draft-ietf-acvp-submac-0.4

Abstract

   This document defines the JSON schema for using HMAC and CMAC
   algorithms with the ACVP specification.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 3, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Fussell                 Expires December 3, 2016                [Page 1]

Internet-Draft                Sym Alg JSON                     June 2016


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   2
   2.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     2.1.  Required Prerequisite Algorithms for MAC Validations  . .   3
     2.2.  MAC Algorithm Capabilities Registration . . . . . . . . .   4
     2.3.  Supported MAC Algorithms  . . . . . . . . . . . . . . . .   6
   3.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .   6
     3.1.  Test Groups JSON Schema . . . . . . . . . . . . . . . . .   7
     3.2.  Test Case JSON Schema . . . . . . . . . . . . . . . . . .   8
   4.  Test Vector Responses . . . . . . . . . . . . . . . . . . . .   9
   5.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  10
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  10
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  10
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  10
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  10
   Appendix A.  Example MAC Capabilities JSON Object . . . . . . . .  10
   Appendix B.  Example Test Vectors JSON Object . . . . . . . . . .  11
   Appendix C.  Example Test Results JSON Object . . . . . . . . . .  15
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  17

1.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing HMAC and
   CMAC crypto algorithms using ACVP.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].








Fussell                 Expires December 3, 2016                [Page 2]

Internet-Draft                Sym Alg JSON                     June 2016


2.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of HMAC and CMAC algorithms to
   the ACVP server.

   The algorithm capabilities are advertised as JSON objects within the
   'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification for details on the
   registration message.  Each algorithm capability advertised is a
   self-contained JSON object.

2.1.  Required Prerequisite Algorithms for MAC Validations

   Each MAC implementation relies on other cryptographic primitives.
   For example, CMAC uses an underlying SHA algorithm.  Each of these
   underlying algorithm primitives must be validated, either separately
   or as part of the same submission.  ACVP provides a mechanism for
   specifying the required prerequisites:

   +--------------+--------------+---------------+----------+----------+
   | JSON Value   | Description  | JSON type     | Valid    | Optional |
   |              |              |               | Values   |          |
   +--------------+--------------+---------------+----------+----------+
   | algorithm    | a            | value         | AES,     | No       |
   |              | prerequisite |               | SHA,     |          |
   |              | algorithm    |               | TDES     |          |
   |              |              |               |          |          |
   | valValue     | algorithm    | value         | actual   | No       |
   |              | validation   |               | number   |          |
   |              | number       |               | or       |          |
   |              |              |               | "same"   |          |
   |              |              |               |          |          |
   | prereqAlgVal | prerequistie | object with   | see      | No       |
   |              | algorithm    | algorithm and | above    |          |
   |              | validation   | valValue      |          |          |
   |              |              | properties    |          |          |
   +--------------+--------------+---------------+----------+----------+

         Table 1: Required MAC Prerequisite Algorithms JSON Values





Fussell                 Expires December 3, 2016                [Page 3]

Internet-Draft                Sym Alg JSON                     June 2016


2.2.  MAC Algorithm Capabilities Registration

   Each algorithm capability advertised is a self-contained JSON object
   using the following values.

   +-----------+-----------------+-------------+------------+----------+
   | JSON      | Description     | JSON type   | Valid      | Optional |
   | Value     |                 |             | Values     |          |
   +-----------+-----------------+-------------+------------+----------+
   | algorithm | The MAC         | value       | See        | No       |
   |           | algorithm and   |             | Section    |          |
   |           | mode to be      |             | 2.3        |          |
   |           | validated.      |             |            |          |
   |           |                 |             |            |          |
   | prereqVal | prerequistie    | array of pr | See        | No       |
   | s         | algorithm       | ereqAlgVal  | Section    |          |
   |           | validations,    | objects     | 2.1        |          |
   |           | See Appendix A  |             |            |          |
   |           | for examples    |             |            |          |
   |           |                 |             |            |          |
   | direction | The MAC         | array       | gen, ver   | No       |
   |           | direction(s) to |             |            |          |
   |           | test. Only      |             |            |          |
   |           | applies to      |             |            |          |
   |           | CMAC.           |             |            |          |
   |           |                 |             |            |          |
   | keyRange1 | If IUT supports | array       | 0-524288   | Yes      |
   |           | key sizes(KS)   |             |            |          |
   |           | less than Block |             |            |          |
   |           | size(BS), enter |             |            |          |
   |           | 2 distinct key  |             |            |          |
   |           | sizes. If IUT   |             |            |          |
   |           | only supports   |             |            |          |
   |           | one KS less     |             |            |          |
   |           | than BS, enter  |             |            |          |
   |           | a single size   |             |            |          |
   |           | in the array    |             |            |          |
   |           | and do not pass |             |            |          |
   |           | keyrange2 or    |             |            |          |
   |           | keyblock field. |             |            |          |
   |           |                 |             |            |          |
   | keyRange2 | If IUT supports | array       | 0-524288   | Yes      |
   |           | key sizes(KS)   |             |            |          |
   |           | greater than    |             |            |          |
   |           | Block size(BS), |             |            |          |
   |           | enter 2         |             |            |          |
   |           | distinct key    |             |            |          |
   |           | sizes. If IUT   |             |            |          |



Fussell                 Expires December 3, 2016                [Page 4]

Internet-Draft                Sym Alg JSON                     June 2016


   |           | only supports   |             |            |          |
   |           | one KS greater  |             |            |          |
   |           | than BS, enter  |             |            |          |
   |           | the size in the |             |            |          |
   |           | array and do    |             |            |          |
   |           | not pass        |             |            |          |
   |           | keyrange1 or    |             |            |          |
   |           | keyblock field. |             |            |          |
   |           |                 |             |            |          |
   | keyBlock  | Implementation  | boolean     | true/false | Yes      |
   |           | supports        |             |            |          |
   |           | keysize equal   |             |            |          |
   |           | blocksize       |             |            |          |
   |           |                 |             |            |          |
   | msgLen    | The CMAC        | Domain      | 0-524288   | Yes      |
   |           | message lengths |             |            |          |
   |           | supported.  Min |             |            |          |
   |           | /max/increment  |             |            |          |
   |           | and values must |             |            |          |
   |           | be mod 8.       |             |            |          |
   | macLen    | The supported   | Domain      | 8-524288   | No       |
   |           | mac sizes. Min/ |             |            |          |
   |           | max/increment   |             |            |          |
   |           | and values must |             |            |          |
   |           | be mod 8.       |             |            |          |
   |           | (range          |             |            |          |
   |           | dependent on    |             |            |          |
   |           | SHA size).      |             |            |          |
   |           |                 |             |            |          |
   +-----------+-----------------+-------------+------------+----------+

              Table 2: MAC Algorithm Capabilities JSON Values

   Note: Some optional values are required depending on the algorithm.
   Failure to provide these values will result in the ACVP server
   returning an error to the ACVP client during registration.

   macLen for CMAC contains an array of 3 values defined by these rules:

   o  The smallest CMAC length supported

   o  A second CMAC length supported

   o  The largest CMAC length supported

   msgLen for CMAC contains an array of up to 6 values defined by these
   rules:




Fussell                 Expires December 3, 2016                [Page 5]

Internet-Draft                Sym Alg JSON                     June 2016


   o  The smallest message length supported

   o  Two message lengths divisible by block size

   o  Two message lengths NOT divisible by block size

   o  The largest message length supported

2.3.  Supported MAC Algorithms

   The following algorithms may be advertised by the ACVP compliant
   crypto module:

   o  HMAC-SHA-1

   o  HMAC-SHA2-224

   o  HMAC-SHA2-256

   o  HMAC-SHA2-384

   o  HMAC-SHA2-512

   o  HMAC-SHA2-512/224

   o  HMAC-SHA2-512/256

   o  HMAC-SHA3-224

   o  HMAC-SHA3-256

   o  HMAC-SHA3-384

   o  HMAC-SHA3-512

   o  CMAC-AES-128

   o  CMAC-AES-192

   o  CMAC-AES-256

   o  CMAC-TDES

3.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation session would require multiple test vector



Fussell                 Expires December 3, 2016                [Page 6]

Internet-Draft                Sym Alg JSON                     June 2016


   sets to be downloaded and processed by the ACVP client.  Each test
   vector set represents an individual crypto algorithm, such as HMAC-
   SHA-1, HMAC-SHA2-224, CMAC-AES-128, etc.  This section describes the
   JSON schema for a test vector set used with HMAC and CMAC crypto
   algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.  The following table
   describes the JSON elements at the top level of the hierarchy.

   +------------+----------------------------------------------+-------+
   | JSON Value | Description                                  | JSON  |
   |            |                                              | type  |
   +------------+----------------------------------------------+-------+
   | acvVersion | Protocol version identifier                  | value |
   |            |                                              |       |
   | vsId       | Unique numeric identifier for the vector set | value |
   |            |                                              |       |
   | algorithm  | The algorithm and mode used for the test     | value |
   |            | vectors.  See Section 2.3 for possible       |       |
   |            | values.                                      |       |
   |            |                                              |       |
   | testGroups | Array of test group JSON objects, which are  | array |
   |            | defined in Section 3.1                       |       |
   +------------+----------------------------------------------+-------+

                      Table 3: Vector Set JSON Object

3.1.  Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the secure HMAC and CMAC JSON elements of
   the Test Group JSON object.












Fussell                 Expires December 3, 2016                [Page 7]

Internet-Draft                Sym Alg JSON                     June 2016


   +-----------+------------------------------------+-------+----------+
   | JSON      | Description                        | JSON  | Optional |
   | Value     |                                    | type  |          |
   +-----------+------------------------------------+-------+----------+
   | testType  | Test category type (AFT)           | value | No       |
   |           |                                    |       |          |
   | direction | The direction of the tests - gen   | value | No       |
   |           | or ver - only applies to CMAC      |       |          |
   |           |                                    |       |          |
   | keyLen    | Length of key in bits to use       | value | No       |
   |           |                                    |       |          |
   | msgLen    | Length of message/hash in bits     | value | No       |
   |           |                                    |       |          |
   | macLen    | Length of MAC in bits to           | value | No       |
   |           | generate/verify                    |       |          |
   |           |                                    |       |          |
   | tests     | Array of individual test vector    | array | No       |
   |           | JSON objects, which are defined in |       |          |
   |           | Section 3.2                        |       |          |
   +-----------+------------------------------------+-------+----------+

                      Table 4: Test Group JSON Object

3.2.  Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each secure MAC test vector.






















Fussell                 Expires December 3, 2016                [Page 8]

Internet-Draft                Sym Alg JSON                     June 2016


   +--------+---------------------------------------+-------+----------+
   | JSON   | Description                           | JSON  | Optional |
   | Value  |                                       | type  |          |
   +--------+---------------------------------------+-------+----------+
   | tcId   | Numeric identifier for the test case, | value | No       |
   |        | unique across the entire vector set.  |       |          |
   |        |                                       |       |          |
   | key    | Value of the key                      | value | No       |
   |        |                                       |       |          |
   | key2   | Value of the key                      | value | Yes      |
   |        |                                       |       |          |
   | key3   | Value of the key                      | value | Yes      |
   |        |                                       |       |          |
   | msg    | Value of the message                  | value | No       |
   |        |                                       |       |          |
   | mac    | MAC value, for CMAC verify            | value | Yes      |
   +--------+---------------------------------------+-------+----------+

                      Table 5: Test Case JSON Object

4.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

   +-------------+---------------------------------------------+-------+
   | JSON Value  | Description                                 | JSON  |
   |             |                                             | type  |
   +-------------+---------------------------------------------+-------+
   | acvVersion  | Protocol version identifier                 | value |
   |             |                                             |       |
   | vsId        | Unique numeric identifier for the vector    | value |
   |             | set                                         |       |
   |             |                                             |       |
   | testResults | Array of JSON objects that represent each   | array |
   |             | test vector result and is made up of one of |       |
   |             | the following values                        |       |
   |             |                                             |       |
   | mac         | MAC value generated                         | value |
   |             |                                             |       |
   | result      | The result of CMAC verify                   | pass  |
   |             |                                             | or    |
   |             |                                             | fail  |
   +-------------+---------------------------------------------+-------+

                 Table 6: Vector Set Response JSON Object



Fussell                 Expires December 3, 2016                [Page 9]

Internet-Draft                Sym Alg JSON                     June 2016


5.  Acknowledgements

   TBD...

6.  IANA Considerations

   This memo includes no request to IANA.

7.  Security Considerations

   Security considerations are addressed by the ACVP specification.

8.  References

8.1.  Normative References

   [ACVP]     authSurName, authInitials., "ACVP Specification", 2016.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

8.2.  Informative References

   [CMACVS]   Sharon S. Keller, SSK., "The CMAC Validation System
              (CMACVS)", 2011.

   [HMACVS]   Lawrence E. Bassham III, LEB., "The Keyed-Hash Message
              Authentication Code Validation System (HMACVS)", 2016.

   [SHA3VS]   Lawrence E. Bassham III, LEB., "The Secure Hash Algorithm
              3 Validation System (SHA3VS)", 2016.

   [SHAVS]    Lawrence E. Bassham III, LEB., "The Secure Hash Algorithm
              Validation System (SHAVS)", 2014.

Appendix A.  Example MAC Capabilities JSON Object

   The following is an example JSON object advertising support for HMAC-
   SHA-1.










Fussell                 Expires December 3, 2016               [Page 10]

Internet-Draft                Sym Alg JSON                     June 2016


            {
                "algorithm": "HMAC-SHA2-256",
                "prereqVals" : [{"algorithm" : "SHA", "valValue" : "123456"}],
                "keySize1": [ 256, 448 ],
                "keySize2": [ 1536, 2048],
                "keyBlock": true,
                "macLen": [ 160 ]
            }

   The following is an example JSON object advertising support for CMAC-
   AES-128.



            {
                "algorithm": "CMAC-AES-128",
                "prereqVals" : [{"algorithm" : "AES", "valValue" : "123456"},
                                {"algorithm" : "TDES", "valValue" : "123456"}],
                "direction" : [ "gen", "ver" ],
                "macLen" : [ 64 ],
                "msgLen" : [ 0 ]
            }

   The following is an example JSON object advertising support for CMAC-
   TDES.



            {
                "algorithm": "CMAC-TDES",
                "prereqVals" : [{"algorithm" : "AES", "valValue" : "123456"},
                                {"algorithm" : "TDES", "valValue" : "123456"}],
                "direction" : [ "gen", "ver" ],
                "macLen" : [ 8, 64 ],
                "msgLen" : [ 0, 256, 120, 248, 320 ]
            }

Appendix B.  Example Test Vectors JSON Object

   The following is an example JSON object for HMAC test vectors sent
   from the ACVP server to the crypto module.










Fussell                 Expires December 3, 2016               [Page 11]

Internet-Draft                Sym Alg JSON                     June 2016


[
        {
                "acvVersion": "0.4"
        },
        {
                "vsId": 1565,
                "algorithm": "HMAC-SHA-1",
                "testGroups": [{
                        "testType": "AFT",
                        "keyLen": 256,
                        "msgLen": 160,
                        "macLen": 80,
                        "tests": [{
                                        "tcId": 2172,
                                        "key": "f8561d1477e58cb6061e709be60a40ab7468503eb6f3ff8234e3321c09b60212",
                                        "msg": "5f4e900a8c223ad9fc834a4deefb33df8d6081bedafc6915e6eaa58c44c37f11be7b2bd8478559a0313e0b39a088a4433fb5423831a84ead4b3652d480d20a469c6abdff368ccdaadfcd8e20a06b542ba431d08f319b9c4bdd3b141cfe5b684362e4ef88407fbe7f6ff97a0ad6ec6a1f249cd0cbc11f7a7704c1946ba6a6c090"
                                },
                                {
                                        "tcId": 2173,
                                        "key": "c9ba74509181091ccf2159d9cada77e4be00384cca4f36ce097f1b0400181cd9",
                                        "msg": "e249dbff751ef43598aab6fb642eb1b18731a33148729a5fc52059027f4dfdd219a1e0d15d4bbedf803d1689a799d323a9662c161788c97a7aef27e8db0e3d89898f607316456436a36204b15dea832b4867949f3cdf78562d0366bbafa92f6cb87c228da8f22d61887f461b8f0909f1eb9ba373be5dee1b66c4dd2501061ba0"
                                }
                        ]
                }]
        }
]

   The following is an example JSON object for CMAC-AES-128 test vectors
   sent from the ACVP server to the crypto module.






















Fussell                 Expires December 3, 2016               [Page 12]

Internet-Draft                Sym Alg JSON                     June 2016


[
        {
                "acvVersion": "0.4"
        },
        {
                "vsId": 3500,
                "algorithm": "CMAC-AES-128",
                "testGroups": [{
                        "testType": "AFT",
                        "direction": "gen",
                        "keyLen": 128,
                        "msgLen": 0,
                        "macLen": 64,
                        "tests": [{
                                        "tcId": 2750,
                                        "key": "f28effca41cb11819a81eb3ebf3b7e83",
                                        "msg": ""
                                },
                                {
                                        "tcId": 2751,
                                        "key": "ab566f4af532efc8bc56555fe07696fd",
                                        "msg": ""
                                }
                        ]
                }]
        },
        {
                "testType": "AFT",
                "direction": "ver",
                "keyLen": 127,
                "msgLen": 0,
                "macLen": 64,
                "tests": [{
                                "tcId": 2752,
                                "key": "ac7165b3778dd93f5e7e532ad2c1eb7b",
                                "msg": "",
                                "mac": "2eef1e38fcc7c568"
                        },
                        {
                                "tcId": 2753,
                                "key": "eb87fb7a5fb60caecb9b23564befe513",
                                "msg": "",
                                "mac": "cafecafecafecafe"
                        }
                ]
        }
]




Fussell                 Expires December 3, 2016               [Page 13]

Internet-Draft                Sym Alg JSON                     June 2016


   The following is an example JSON object for CMAC-TDES test vectors
   sent from the ACVP server to the crypto module.

[
        {
                "acvVersion": "0.4"
        },
        {
                "vsId": 1566,
                "algorithm": "CMAC-TDES",
                "testGroups": [{
                                "testType": "AFT",
                                "direction": "gen",
                                "keyLen": 3,
                                "msgLen": 0,
                                "macLen": 40,
                                "tests": [{
                                                "tcId": 2175,
                                                "key": "c479f813ad1a45d5",
                                                "key2": "dc43459da4c85e85",
                                                "key3": "1cda518af886bf1f",
                                                "msg": ""
                                        },
                                        {
                                                "tcId": 2176,
                                                "key": "731331866754588f",
                                                "key2": "d332ef51e0ce1925",
                                                "key3": "d586cba70440f44f",
                                                "msg": ""
                                        }
                                ]
                        },
                        {
                                "testType": "AFT",
                                "direction": "ver",
                                "keyLen": 3,
                                "msgLen": 0,
                                "macLen": 40,
                                "tests": [{
                                                "tcId": 2177,
                                                "key": "d586cba70440f44f",
                                                "key2": "d332ef51e0ce1925",
                                                "key3": "dc43459da4c85e85",
                                                "msg": "",
                                                "mac": "cafecafecafecafecafecafecafecafecafecafe"
                                        },
                                        {
                                                "tcId": 2177,



Fussell                 Expires December 3, 2016               [Page 14]

Internet-Draft                Sym Alg JSON                     June 2016


                                                "key": "dc43459da4c85e85",
                                                "key2": "c479f813ad1a45d5",
                                                "key3": "1cda518af886bf1f",
                                                "msg": "",
                                                "mac": "cafecafecafecafecafecafecafecafecafecafe"
                                        }
                                ]
                        }
                ]
        }
]

Appendix C.  Example Test Results JSON Object

   The following is an example JSON object for HMAC test results sent
   from the crypto module to the ACVP server.

[
        {
                "acvVersion": "0.4"
        },
        {
                "vsId": 1565,
                "testResults": [{
                                "tcId": 2172,
                                "mac": "eb0326e5edcf9465fc01c773262011a3059cfd97"
                        },
                        {
                                "tcId": 2173,
                                "mac": "feb3ff7b06eb7f62e9d19c331abbe2d183d2bc7a"
                        }
                ]
        }
]

   The following is an example JSON object for CMAC-AES-128 test results
   sent from the crypto module to the ACVP server.














Fussell                 Expires December 3, 2016               [Page 15]

Internet-Draft                Sym Alg JSON                     June 2016


   [
           {
                   "acvVersion": "0.4"
           },
           {
                   "vsId": 3500,
                   "testResults": [{
                                   "tcId": 2750,
                                   "mac": "e77145f0d6c77ad5"
                           },
                           {
                                   "tcId": 2751,
                                   "mac": "6b078f7e53b6d183"
                           },
                           {
                                   "tcId": 2752,
                                   "result": "pass"
                           },
                           {
                                   "tcId": 2753,
                                   "result": "fail"
                           }
                   ]
           }
   ]

   The following is an example JSON object for CMAC-TDES test results
   sent from the crypto module to the ACVP server.























Fussell                 Expires December 3, 2016               [Page 16]

Internet-Draft                Sym Alg JSON                     June 2016


   [
           {
                   "acvVersion": "0.4"
           },
           {
                   "vsId": 1566,
                   "testResults": [{
                                   "tcId": 2175,
                                   "mac": "fea01c84a7"
                           },
                           {
                                   "tcId": 2176,
                                   "mac": "164bdb8582"
                           },
                           {
                                   "tcId": 2177,
                                   "result": "fail"
                           },
                           {
                                   "tcId": 2178,
                                   "result": "fail"
                           }
                   ]
           }
   ]

Author's Address

   Barry Fussell (editor)
   Cisco Systems, Inc.
   170 West Tasman Dr.
   San Jose, CA  95134
   USA

   Email: bfussell@cisco.com
















Fussell                 Expires December 3, 2016               [Page 17]
