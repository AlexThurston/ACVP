



TBD                                                        J. Foley, Ed.
Internet-Draft                                       Cisco Systems, Inc.
Intended status: Informational                                 June 2016
Expires: December 3, 2016


              ACVP Symmetric Algorithm JSON Specification
                       draft-ietf-acvp-subsym-0.3

Abstract

   This document defines the JSON schema for using symmetric algorithms
   with the ACVP specification.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 3, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Foley                   Expires December 3, 2016                [Page 1]

Internet-Draft                Sym Alg JSON                     June 2016


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     2.1.  Required Prerequisite Algorithms for Symmetric
           Validations . . . . . . . . . . . . . . . . . . . . . . .   3
     2.2.  Symmetric Algorithm Capabilities JSON Values  . . . . . .   4
     2.3.  Data, IV and AAD Lengths  . . . . . . . . . . . . . . . .   7
     2.4.  Supported Symmetric Algorithms  . . . . . . . . . . . . .   9
   3.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .  10
     3.1.  Test Groups JSON Schema . . . . . . . . . . . . . . . . .  10
     3.2.  Test Case JSON Schema . . . . . . . . . . . . . . . . . .  11
   4.  Test Vector Responses . . . . . . . . . . . . . . . . . . . .  12
   5.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  13
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  13
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  13
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  13
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  14
   Appendix A.  Example Capabilities JSON Object . . . . . . . . . .  14
   Appendix B.  Example AES Test and Results Vectors JSON Object . .  15
   Appendix C.  Example AES MCT Test and Results JSON Object . . . .  20
   Appendix D.  Example TDES Test and Results JSON Object  . . . . .  21
   Appendix E.  Example TDES MCT Test and Results JSON Object  . . .  23
   Appendix F.  Example Test Results JSON Object . . . . . . . . . .  24
   Appendix G.  Example Test Results CTR JSON Object . . . . . . . .  25
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  26

1.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing symmetric
   crypto algorithms using ACVP.








Foley                   Expires December 3, 2016                [Page 2]

Internet-Draft                Sym Alg JSON                     June 2016


1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].

2.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of symmetric algorithms to the
   ACVP server.

   The symmetric algorithm capabilities are advertised as JSON objects
   within the 'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification for details on the
   registration message.  Each symmetric algorithm capability advertised
   is a self-contained JSON object.

2.1.  Required Prerequisite Algorithms for Symmetric Validations

   Some symmetric algorithm implementations rely on other cryptographic
   primitives.  For example, CCM uses an underlying AES algorithm.  Each
   of these underlying algorithm primitives must be validated, either
   separately or as part of the same submission.  ACVP provides a
   mechanism for specifying the required prerequisites:




















Foley                   Expires December 3, 2016                [Page 3]

Internet-Draft                Sym Alg JSON                     June 2016


   +--------------+--------------+---------------+----------+----------+
   | JSON Value   | Description  | JSON type     | Valid    | Optional |
   |              |              |               | Values   |          |
   +--------------+--------------+---------------+----------+----------+
   | algorithm    | a            | value         | AES,     | Yes      |
   |              | prerequisite |               | DRBG,    |          |
   |              | algorithm    |               | TDES     |          |
   |              |              |               |          |          |
   | valValue     | algorithm    | value         | actual   | Yes      |
   |              | validation   |               | number   |          |
   |              | number       |               | or       |          |
   |              |              |               | "same"   |          |
   |              |              |               |          |          |
   | prereqAlgVal | prerequisite | object with   | see      | Yes      |
   |              | algorithm    | algorithm and | above    |          |
   |              | validation   | valValue      |          |          |
   |              |              | properties    |          |          |
   +--------------+--------------+---------------+----------+----------+

           Table 1: Required Prerequisite Algorithms JSON Values

2.2.  Symmetric Algorithm Capabilities JSON Values

   Each algorithm capability advertised is a self-contained JSON object
   using the following values.

   +-----------------+-------------+-------------+-----------+---------+
   | JSON Value      | Description | JSON type   | Valid     | Optiona |
   |                 |             |             | Values    | l       |
   +-----------------+-------------+-------------+-----------+---------+
   | algorithm       | The         | value       | See       | No      |
   |                 | symmetric   |             | Section   |         |
   |                 | algorithm   |             | 2.4       |         |
   |                 | and mode to |             |           |         |
   |                 | be          |             |           |         |
   |                 | validated.  |             |           |         |
   |                 |             |             |           |         |
   | prereqVals      | Prerequisit | array of pr | See       | Yes     |
   |                 | e algorithm | ereqAlgVal  | Section   |         |
   |                 | validations | objects     | 2.1       |         |
   |                 |             |             |           |         |
   | direction       | The crypto  | array       | encrypt,  | No      |
   |                 | operation   |             | decrypt   |         |
   |                 | direction   |             |           |         |
   |                 |             |             |           |         |
   | keyLen          | The         | array       | 128, 168, | No      |
   |                 | supported   |             | 192, 256  |         |
   |                 | key lengths |             |           |         |



Foley                   Expires December 3, 2016                [Page 4]

Internet-Draft                Sym Alg JSON                     June 2016


   |                 | in bits     |             |           |         |
   |                 |             |             |           |         |
   | ptLen           | The         | range or    | 0-65536   | No      |
   |                 | supported   | array       |           |         |
   |                 | plaintext   |             |           |         |
   |                 | lengths in  |             |           |         |
   |                 | bits.       |             |           |         |
   |                 | This varies |             |           |         |
   |                 | depending   |             |           |         |
   |                 | on the      |             |           |         |
   |                 | algorithm   |             |           |         |
   |                 | type, for   |             |           |         |
   |                 | additional  |             |           |         |
   |                 | details see |             |           |         |
   |                 | Section 2.3 |             |           |         |
   |                 |             |             |           |         |
   | ivLen           | The         | array       | 8-1024    | Yes     |
   |                 | supported   |             |           |         |
   |                 | IV/Nonce    |             |           |         |
   |                 | lengths in  |             |           |         |
   |                 | bits, see   |             |           |         |
   |                 | Section 2.3 |             |           |         |
   |                 |             |             |           |         |
   | ivGen           | IV          | value       | internal, | Yes     |
   |                 | generation  |             | external  |         |
   |                 | method for  |             |           |         |
   |                 | AEAD        |             |           |         |
   |                 | algorithms  |             |           |         |
   |                 |             |             |           |         |
   | ivGenMode       | IV          | value       | 8.2.1,    | Yes     |
   |                 | generation  |             | 8.2.2     |         |
   |                 | mode for    |             |           |         |
   |                 | AEAD        |             |           |         |
   |                 | algorithms  |             |           |         |
   |                 |             |             |           |         |
   | saltGen         | Salt        | value       | internal, | Yes     |
   |                 | generation  |             | external  |         |
   |                 | method for  |             |           |         |
   |                 | AES-XPN     |             |           |         |
   |                 | mode only.  |             |           |         |
   |                 |             |             |           |         |
   | aadLen          | The         | range or    | 0-65536   | Yes     |
   |                 | supported   | array       |           |         |
   |                 | AAD lengths |             |           |         |
   |                 | in bits for |             |           |         |
   |                 | AEAD        |             |           |         |
   |                 | algorithms, |             |           |         |
   |                 |             |             |           |         |



Foley                   Expires December 3, 2016                [Page 5]

Internet-Draft                Sym Alg JSON                     June 2016


   | tagLen          | The         | array       | 4-128     | Yes     |
   |                 | supported   |             |           |         |
   |                 | Tag lengths |             |           |         |
   |                 | in bits for |             |           |         |
   |                 | AEAD        |             |           |         |
   |                 | algorithms, |             |           |         |
   |                 | Section 2.3 |             |           |         |
   |                 |             |             |           |         |
   | kwCipher        | The cipher  | array       | cipher,   | Yes     |
   |                 | as defined  |             | inverse   |         |
   |                 | in          |             |           |         |
   |                 | SP800-38F   |             |           |         |
   |                 | for key     |             |           |         |
   |                 | wrap mode   |             |           |         |
   |                 |             |             |           |         |
   | tweakFormat     | The format  | array       | 128hex, d | Yes     |
   |                 | of tweak    |             | uSequence |         |
   |                 | value input |             |           |         |
   |                 | for AES-XTS |             |           |         |
   |                 |             |             |           |         |
   | keyingOption    | The Keying  | array       | 1, 2      | Yes     |
   |                 | Option used |             |           |         |
   |                 | in TDES.    |             |           |         |
   |                 | Keying      |             |           |         |
   |                 | option 1    |             |           |         |
   |                 | (1) is 3    |             |           |         |
   |                 | distinct    |             |           |         |
   |                 | keys (K1,   |             |           |         |
   |                 | K2, K3).    |             |           |         |
   |                 | Keying      |             |           |         |
   |                 | Option 2    |             |           |         |
   |                 | (2) is 2    |             |           |         |
   |                 | distinct    |             |           |         |
   |                 | only        |             |           |         |
   |                 | suitable    |             |           |         |
   |                 | for decrypt |             |           |         |
   |                 | (K1, K2,    |             |           |         |
   |                 | K1).        |             |           |         |
   |                 | Keying      |             |           |         |
   |                 | option 3    |             |           |         |
   |                 | (No longer  |             |           |         |
   |                 | valid for   |             |           |         |
   |                 | testing,    |             |           |         |
   |                 | save KATs)  |             |           |         |
   |                 | is a single |             |           |         |
   |                 | key, now    |             |           |         |
   |                 | deprecated  |             |           |         |
   |                 | (K1, K1,    |             |           |         |



Foley                   Expires December 3, 2016                [Page 6]

Internet-Draft                Sym Alg JSON                     June 2016


   |                 | K1).        |             |           |         |
   |                 |             |             |           |         |
   | overflowCounter | Indicates   | boolean     | true,     | No for  |
   |                 | if the impl |             | false     | Counter |
   |                 | ementation  |             |           | (CTR)   |
   |                 | can handle  |             |           | modes   |
   |                 | a counter   |             |           |         |
   |                 | exceeding   |             |           |         |
   |                 | the maximum |             |           |         |
   |                 | value       |             |           |         |
   |                 |             |             |           |         |
   | incrementalCoun | Indicates   | boolean     | true,     | No for  |
   | ter             | if the impl |             | false     | Counter |
   |                 | ementation  |             |           | (CTR)   |
   |                 | increments  |             |           | modes   |
   |                 | the counter |             |           |         |
   |                 | (versus dec |             |           |         |
   |                 | rementing   |             |           |         |
   |                 | the         |             |           |         |
   |                 | counter)    |             |           |         |
   +-----------------+-------------+-------------+-----------+---------+

           Table 2: Symmetric Algorithm Capabilities JSON Values

   Note: Some optional values are required depending on the algorithm.
   For example, AES-GCM requires ivLen, ivGen, ivGenMode, aadLen and
   tagLen.  Failure to provide these values will result in the ACVP
   server returning an error to the ACVP client during registration.

2.3.  Data, IV and AAD Lengths

   Some algorithms allow ranges of data, IV and AAD lengths.  This table
   outlines the allowed values.


















Foley                   Expires December 3, 2016                [Page 7]

Internet-Draft                Sym Alg JSON                     June 2016


   +----------+---------------+-------------+-------------+------------+
   | Algorith | ptLen(payload | IV/Nonce    | Tag         | AAD        |
   | m        | )             |             |             |            |
   +----------+---------------+-------------+-------------+------------+
   | AES-CCM  | Range of      | Range of    | Range of    | Range of   |
   |          | values {Min:  | values      | values      | values     |
   |          | 0, Max: 256,  | {Min: 56,   | {Min: 32,   | minimum    |
   |          | Increment: 8} | Max: 104,   | Max: 128,   | greater    |
   |          | minimum       | Increment:  | Increment:  | than or    |
   |          | greater than  | 8}          | 16}         | equal to   |
   |          | or equal to   | (represents | (represents | zero and   |
   |          | zero and      | 7 to 13     | from 4 to   | maximum    |
   |          | maximum less  | bytes)      | 16 bytes,   | less than  |
   |          | than or equal |             | even values | or equal   |
   |          | to 256.       |             | only)       | to 524,288 |
   |          |               |             |             | (2^16)*8)  |
   |          |               |             |             |            |
   | AES-GCM  | Array to      | Array one   | Array of    | Array to   |
   |          | include, if   | to three    | supported   | include,   |
   |          | supported,    | values      | values of:  | if         |
   |          | zero, two     | between 8   | 32, 64, 96, | supported, |
   |          | values        | and 1024    | 104, 112,   | zero, two  |
   |          | divisible by  |             | 120, 128    | values     |
   |          | 128 and two   |             |             | divisible  |
   |          | values not    |             |             | by 128 and |
   |          | divisible by  |             |             | two values |
   |          | 128           |             |             | not        |
   |          |               |             |             | divisible  |
   |          |               |             |             | by 128     |
   |          |               |             |             |            |
   | AES-XTS  | Array to      | N/A         | N/A         | N/A        |
   |          | include, if   |             |             |            |
   |          | supported,    |             |             |            |
   |          | zero, two     |             |             |            |
   |          | values        |             |             |            |
   |          | divisible by  |             |             |            |
   |          | 128 and two   |             |             |            |
   |          | values not    |             |             |            |
   |          | divisible by  |             |             |            |
   |          | 128. Followed |             |             |            |
   |          | by the        |             |             |            |
   |          | maximum data  |             |             |            |
   |          | length not to |             |             |            |
   |          | exceed 2^20   |             |             |            |
   +----------+---------------+-------------+-------------+------------+

           Table 3: Symmetric Algorithm Capabilities JSON Values




Foley                   Expires December 3, 2016                [Page 8]

Internet-Draft                Sym Alg JSON                     June 2016


2.4.  Supported Symmetric Algorithms

   The following symmetric algorithms may be advertised by the ACVP
   compliant crypto module:

   o  AES-ECB

   o  AES-CBC

   o  AES-OFB

   o  AES-CFB1

   o  AES-CFB8

   o  AES-CFB128

   o  AES-CTR

   o  AES-GCM

   o  AES-XPN

   o  AES-CCM

   o  AES-XTS

   o  AES-KW

   o  AES-KWP

   o  TDES-ECB

   o  TDES-CBC

   o  TDES-CBC-I

   o  TDES-CFB1

   o  TDES-CFB8

   o  TDES-CFB64

   o  TDES-CFB-P1

   o  TDES-CFB-P8

   o  TDES-CFB-P64



Foley                   Expires December 3, 2016                [Page 9]

Internet-Draft                Sym Alg JSON                     June 2016


   o  TDES-OFB

   o  TDES-OFB-I

   o  TDES-CTR

   o  TDES-KW

3.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation session would require multiple test vector
   sets to be downloaded and processed by the ACVP client.  Each test
   vector set represents an individual crypto algorithm, such as AES-
   ECB, AES-CBC, AES-CTR, AES-GCM, DES-CBC, DES-CTR, etc.  This section
   describes the JSON schema for a test vector set used with symmetric
   crypto algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.  The following table
   describes the JSON elements at the top level of the hierarchy.

   +------------+----------------------------------------------+-------+
   | JSON Value | Description                                  | JSON  |
   |            |                                              | type  |
   +------------+----------------------------------------------+-------+
   | acvVersion | Protocol version identifier                  | value |
   |            |                                              |       |
   | vsId       | Unique numeric identifier for the vector set | value |
   |            |                                              |       |
   | algorithm  | The symmetric algorithm and mode used for    | value |
   |            | the test vectors.  See Section 2.4 for       |       |
   |            | possible values.                             |       |
   |            |                                              |       |
   | testGroups | Array of test group JSON objects, which are  | array |
   |            | defined in Section 3.1                       |       |
   +------------+----------------------------------------------+-------+

                      Table 4: Vector Set JSON Object

3.1.  Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key



Foley                   Expires December 3, 2016               [Page 10]

Internet-Draft                Sym Alg JSON                     June 2016


   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the JSON elements of the Test Group JSON
   object.

   +-----------+------------------------------------+-------+----------+
   | JSON      | Description                        | JSON  | Optional |
   | Value     |                                    | type  |          |
   +-----------+------------------------------------+-------+----------+
   | direction | The encryption direction: encrypt  | value | No       |
   |           | or decrypt                         |       |          |
   |           |                                    |       |          |
   | ivGen     | IV generation method (Required for | value | Yes      |
   |           | AES-GCM and AES-XPN)               |       |          |
   |           |                                    |       |          |
   | ivGenMode | IV generation method (Required for | value | Yes      |
   |           | AES-GCM and AES-XPN w/ internal    |       |          |
   |           | ivGen)                             |       |          |
   |           |                                    |       |          |
   | saltGen   | Salt generation method (Required   | value | Yes      |
   |           | AES-XPN)                           |       |          |
   |           |                                    |       |          |
   | keyLen    | Length of key in bits to use       | value | No       |
   |           |                                    |       |          |
   | ivLen     | Length of IV in bits to use        | value | No       |
   |           |                                    |       |          |
   | ptLen     | Length of plaintext in bits to     | value | No       |
   |           |                                    |       |          |
   | aadLen    | Length of AAD in bits to use       | value | Yes      |
   |           |                                    |       |          |
   | tagLen    | Length of AEAD tag in bits to use  | value | Yes      |
   |           |                                    |       |          |
   | testType  | The test category type (AFT or     | value | No       |
   |           | MCT)                               |       |          |
   |           |                                    |       |          |
   | tests     | Array of individual test vector    | array | No       |
   |           | JSON objects, which are defined in |       |          |
   |           | Section 3.2                        |       |          |
   +-----------+------------------------------------+-------+----------+

                      Table 5: Test Group JSON Object

3.2.  Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each test case.



Foley                   Expires December 3, 2016               [Page 11]

Internet-Draft                Sym Alg JSON                     June 2016


   +----------+---------------------------------+-------+--------------+
   | JSON     | Description                     | JSON  | Optional     |
   | Value    |                                 | type  |              |
   +----------+---------------------------------+-------+--------------+
   | tcId     | Numeric identifier for the test | value | No           |
   |          | case, unique across the entire  |       |              |
   |          | vector set.                     |       |              |
   |          |                                 |       |              |
   | key      | Encryption key to use AES       | value | No           |
   |          |                                 |       |              |
   | key1,    | Encryption keys to use for TDES | value | No           |
   | key2,    |                                 |       |              |
   | key3     |                                 |       |              |
   |          |                                 |       |              |
   | iv       | IV to use                       | value | Yes          |
   |          |                                 |       |              |
   | salt     | The salt to use in AES-XPN      | value | Yes          |
   |          | (required for AES-XPN only)     |       |              |
   |          |                                 |       |              |
   | pt       | Plaintext to use                | value | Yes          |
   |          |                                 |       |              |
   | ct       | Ciphertext to use               | value | Yes          |
   |          |                                 |       |              |
   | aad      | AAD to use for AEAD algorithms  | value | Yes          |
   |          |                                 |       |              |
   | tag      | Tag to use for AEAD algorithms  | value | Yes          |
   |          |                                 |       |              |
   | ivs      | Array of IVs used in a Counter  | array | No for       |
   |          | implementation                  |       | Counter      |
   |          |                                 |       | (CTR) modes  |
   +----------+---------------------------------+-------+--------------+

                      Table 6: Test Case JSON Object

4.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.











Foley                   Expires December 3, 2016               [Page 12]

Internet-Draft                Sym Alg JSON                     June 2016


   +--------------+------------------------------------------+---------+
   | JSON Value   | Description                              | JSON    |
   |              |                                          | type    |
   +--------------+------------------------------------------+---------+
   | acvVersion   | Protocol version identifier              | value   |
   |              |                                          |         |
   | vsId         | Unique numeric identifier for the vector | value   |
   |              | set                                      |         |
   |              |                                          |         |
   | testResults  | Array of JSON objects that represent     | array   |
   |              | each test vector result, which uses the  |         |
   |              | same JSON schema as defined in Section   |         |
   |              | 3.2                                      |         |
   |              |                                          |         |
   | decryptFail  | Some test cases included with decrypt    | boolean |
   |              | operations in AES-GCM, AES-CCM, AES-XPN, | true    |
   |              | AES-KW, AES-KWP, and TDES-KW will have   |         |
   |              | expected failures. For these cases the   |         |
   |              | JSON reponse should include the          |         |
   |              | decryptFail keyword, see Appendix F      |         |
   |              |                                          |         |
   | resultsArray | Array of JSON objects that represent     | array   |
   |              | each iteration of a Monte Carlo Test.    |         |
   |              | Each iteration will contain the key(s),  |         |
   |              | pt, ct and iv(except for ECB mode)       |         |
   +--------------+------------------------------------------+---------+

                 Table 7: Vector Set Response JSON Object

5.  Acknowledgements

   TBD...

6.  IANA Considerations

   This memo includes no request to IANA.

7.  Security Considerations

   Security considerations are addressed by the ACVP specification.

8.  References

8.1.  Normative References

   [ACVP]     authSurName, authInitials., "ACVP Specification", 2016.





Foley                   Expires December 3, 2016               [Page 13]

Internet-Draft                Sym Alg JSON                     June 2016


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

8.2.  Informative References

   [AESAVS]   Lawrence E. Bassham III, LEB., "The Advanced Encryption
              Standard Algorithm Validation Suite (AESAVS)", 2002.

   [CCMVS]    Lawrence E. Bassham III, LEB., "The CCM Validation System
              (CCMVS)", 2012.

   [GCMVS]    Sharon S. Keller, SSK., "The GCM, GMAC and XPN Validation
              System (GCMVS)", 2016.

   [KWVS]     Timothy A. Hall, TAH., "The Key Wrap Validation System
              (KWVS)", 2014.

   [TMOVS]    Sharon S. Keller, SSK., "Modes of Operation Validation
              System for the Triple Data Encryption Algorithm (TMOVS)",
              2012.

   [XTSVS]    Sharon S. Keller, SSK., "The XTS-AES Validation System
              (XTSVS)", 2013.

Appendix A.  Example Capabilities JSON Object

   The following is a example JSON object advertising support for AES-
   GCM.





















Foley                   Expires December 3, 2016               [Page 14]

Internet-Draft                Sym Alg JSON                     June 2016


            {
                "algorithm": "AES-GCM",
                "prereqVals" : [{"algorithm" : "AES", "valValue" : "123456"},
                                {"algorithm" : "DRBG", "valValue" : "123456"}],
                "direction": [
                    "encrypt",
                    "decrypt"
                ],
                "ivGen": "internal",
                "ivGenMode": "8.2.2",
                "keyLen": [
                    128,
                    192,
                    256
                ],
                "tagLen": [
                    96,
                    128
                ],
                "ivLen": [
                    96
                ],
                "ptLen": [
                    0,
                    256
                ],
                "aadLen": [
                    128,
                    256
                ]
            }

Appendix B.  Example AES Test and Results Vectors JSON Object

   The following is a example JSON object for AES-GCM test vectors sent
   from the ACVP server to the crypto module.

                 [
                   { "acvVersion": "0.3" },
                   { "vsId": 1564,
                     "algorithm": "AES-GCM",
                     "testGroups": [
                       {
                         "direction": "encrypt",
                         "testType": "AFT",
                         "ivGen": "internal",
                         "ivGenMode": "8.2.2",
                         "keyLen": 128,



Foley                   Expires December 3, 2016               [Page 15]

Internet-Draft                Sym Alg JSON                     June 2016


                         "ivLen": 96,
                         "ptLen": 0,
                         "aadLen": 128,
                         "tagLen": 128,
                         "testType": "AFT",
                         "tests": [
                           {
                             "tcId": 2171,
                             "key": "1529BAC6229586F057FAA59353851686",
                             "pt": "",
                             "aad": "4B11160620475D8EE440C3795CF62D26"
                           },
                           {
                             "tcId": 2172,
                             "key": "FAD522CCB38D35E1C99553E365EEFDFB",
                             "pt": "",
                             "aad": "956BFE7469A028EEED645866042B942D"
                           },
                           {
                             "tcId": 2173,
                             "key": "FE965F164600CE5C5B9C2391892C6FC9",
                             "pt": "",
                             "aad": "B35A23FFD2F7BF0BA6762829B7B2D63D"
                           },
                           {
                             "tcId": 2174,
                             "key": "8A4DB9F30362EF235947B888B887CBDE",
                             "pt": "",
                             "aad": "94246F216E1C0DABEA5EEA02038956CF"
                           }
                         ]
                       },
                       {
                         "direction": "encrypt",
                         "testType": "AFT",
                         "ivGen": "internal",
                         "ivGenMode": "8.2.2",
                         "keyLen": 128,
                         "ivLen": 96,
                         "ptLen": 0,
                         "aadLen": 136,
                         "tagLen": 128,
                         "testType": "AFT",
                         "tests": [
                           {
                             "tcId": 2186,
                             "key": "5E296F244BB0A92BF0FF5F2C50FA7443",
                             "pt": "",



Foley                   Expires December 3, 2016               [Page 16]

Internet-Draft                Sym Alg JSON                     June 2016


                             "aad": "B414F4DA8203C31815FF117B0553DBF618"
                           },
                           {
                             "tcId": 2187,
                             "key": "DAE8E9A248931962FDB03F4C3B227801",
                             "pt": "",
                             "aad": "FFDBB1801C99C87C6782CAA36E4F0BDDD0"
                           }
                         ]
                       },
                       {
                         "direction": "encrypt",
                         "testType": "AFT",
                         "ivGen": "internal",
                         "ivGenMode": "8.2.2",
                         "keyLen": 128,
                         "ivLen": 96,
                         "ptLen": 128,
                         "aadLen": 128,
                         "tagLen": 128,
                         "testType": "AFT",
                         "tests": [
                           {
                             "tcId": 2201,
                             "key": "3581AC6E264E869DD56E1DEA2E09244E",
                             "pt": "38FFABB895A04BA5AA33B63ECD3238B8",
                             "aad": "446D19353144014B04271BCBB125B617"
                           },
                           {
                             "tcId": 2202,
                             "key": "F448466CA1CA62A9B47B60A26EFA5AAA",
                             "pt": "FAD8882B53C70384083F0EF69692C468",
                             "aad": "292C7C9C55C062C0D1661BE6E629C449"
                           },
                           {
                             "tcId": 2203,
                             "key": "27B3C4CAFD6222FEE08403BC222DCBFD",
                             "pt": "2F75708AD2F1ADE3786885DEDDFC9B78",
                             "aad": "2AB6426DCFEB6909DF99D19063CCF88D"
                           },
                           {
                             "tcId": 2204,
                             "key": "5FF01D9CF8D84F1CCC67C50928C8105B",
                             "pt": "547CC5A970ABC938CF5703C7FD48A3BD",
                             "aad": "EABED39EE5B56F81CE5C858E507EAB13"
                           },
                           {
                             "tcId": 2205,



Foley                   Expires December 3, 2016               [Page 17]

Internet-Draft                Sym Alg JSON                     June 2016


                             "key": "CE1D8C9E3AB2F46B01E3F110B3BC6E05",
                             "pt": "3DD9EEFA5C6E89C43D460907E8946B9C",
                             "aad": "DBE62172F439956FF21A67A379324100"
                           },
                           {
                             "tcId": 2206,
                             "key": "962574476C8D12E6487C6CDDA952E8C8",
                             "pt": "DFF4D0CFF9D8628FA51EB8E533A68C32",
                             "aad": "AEF2547382355E157E15DBECB64A8C77"
                           }
                         ]
                       }
                     ]
                   }
                 ]

   The following is a example JSON object for AES-GCM test results sent
   from the crypto module to the ACVP server.

                   [
                     { "acvVersion": "0.3" },
                     { "vsId": 1564,
                       "testResults": [
                           {
                               "tcId": 2171,
                               "iv": "01020304C077A707E56C22AC",
                               "ct": "",
                               "tag": "53B15E85E377F8B5B6BFC2DE915FD622"
                           },
                           {
                               "tcId": 2172,
                               "iv": "01020304D666587803BCBAD7",
                               "ct": "",
                               "tag": "E7B1F2D77D82C6EB3C9CEFF16C376D9C"
                           },
                           {
                               "tcId": 2173,
                               "iv": "01020304D3B09894BB14B6CF",
                               "ct": "",
                               "tag": "DFF22B329AC87B82726EBBF20E66EEE2"
                           },
                           {
                               "tcId": 2174,
                               "iv": "01020304D678FBCC2EA341A2",
                               "ct": "",
                               "tag": "BAFBFA38AD5D6C6E7C97D08DDEC26580"
                           },
                           {



Foley                   Expires December 3, 2016               [Page 18]

Internet-Draft                Sym Alg JSON                     June 2016


                               "tcId": 2186,
                               "iv": "01020304C6A745B0C4C9F2D5",
                               "ct": "",
                               "tag": "429FD5A0DAB344EF69B594A44CCAD3EB"
                           },
                           {
                               "tcId": 2187,
                               "iv": "010203043E56946A9C9E18D7",
                               "ct": "",
                               "tag": "7DA8BA92D64071909972395C981C4567"
                           },
                           {
                               "tcId": 2201,
                               "iv": "0102030479FD178FEB555D99",
                               "ct": "FA2AF4B01BA610DE3A3EDE0B88946E2D",
                               "tag": "3E77B921DB447F541EB5CC508D74CE4E"
                           },
                           {
                               "tcId": 2202,
                               "iv": "01020304C70FB9D3B9E1E329",
                               "ct": "568028D34EA82E8D30D1A3B952849A70",
                               "tag": "3D20D5935D6D37F6EE82FE0D2C7006F8"
                           },
                           {
                               "tcId": 2203,
                               "iv": "010203040D66A6EEA797B757",
                               "ct": "B2E10E2ECEC9FC3477841D3AED6469DB",
                               "tag": "DEF33A719333CAADE8002752922EC124"
                           },
                           {
                               "tcId": 2204,
                               "iv": "010203045B6CDA4B5CA26883",
                               "ct": "CF72C75B4E550AEA535750D6B16393DF",
                               "tag": "370D1175CF36A72585F20B379D064BCF"
                           },
                           {
                               "tcId": 2205,
                               "iv": "010203041E9FD60F49957FF5",
                               "ct": "A1F124EE6E98CAB776CCD601B7F65D6A",
                               "tag": "F4D7D0D75FC9961A12B3C6A3E6379972"
                           },
                           {
                               "tcId": 2206,
                               "iv": "0102030474CBC83C647DBEAF",
                               "ct": "2CE1129D3E2F25468A9EE13ED39C902C",
                               "tag": "48F3D4D7EB4B9FCB924ACC05B3834F98"
                           }
                       ]



Foley                   Expires December 3, 2016               [Page 19]

Internet-Draft                Sym Alg JSON                     June 2016


                    }
                 ]


Appendix C.  Example AES MCT Test and Results JSON Object

   The following is a example JSON object for test vectors sent from the
   ACVP server to the crypto module for an AES-CBC Monte Carlo test.

                 [
                   { "acvVersion": "0.3" },
                   { "vsId": 1564,
                     "algorithm": "AES-CBC",
                     "testGroups": [
                       {
                         "direction": "encrypt",
                         "keyLen": 128,
                         "testType": "MCT",
                         "tests": [
                           {
                             "tcId": 3171,
                             "key": "868a6705c03e630327259cd09e63354a",
                             "iv": "a771c0fc42300fa7b4c1eca82e1eb2f9",
                             "pt": "8466e3b1680b40f8bae488e2f392ab33"
                           }
                         ]
                       }
                     ]
                   }
                 ]

   The following is a example JSON object for test results sent from the
   crypto module to the ACVP server for an AES-CBC Monte Carlo test,
   only 2 iterations shown for brevity.  For MCT results of each
   iteration are fed into the next iteration.  Therefore the results
   carry all fields to assist in any failure diagnosis.















Foley                   Expires December 3, 2016               [Page 20]

Internet-Draft                Sym Alg JSON                     June 2016


              [
                  { "acvVersion": "0.3" },
                  { "vsId": 1564,
                    "testResults": [
                        {
                          "tcId": 3171,
                          "resultsArray": [
                            {
                              "key": "868a6705c03e630327259cd09e63354a",
                              "iv": "a771c0fc42300fa7b4c1eca82e1eb2f9",
                              "pt": "8466e3b1680b40f8bae488e2f392ab33",
                              "ct": "161ac86ab184f638d43b1435161ebec4"
                            },
                            {
                              "key": "9090af6f71ba953bf31e88e5887d8b8e",
                              "iv": "161ac86ab184f638d43b1435161ebec4",
                              "pt": "b9cc35ba5d5ea63cf6516a200a17c36b",
                              "ct": "8c2998edf29357389483bcf33a6484df"
                            },
                          ]
                       }
                    ]
                  }
                ]

Appendix D.  Example TDES Test and Results JSON Object

   The following is a example JSON object for test vectors sent from the
   ACVP server to the crypto module for an TDES-ECB algorithm functional
   test.





















Foley                   Expires December 3, 2016               [Page 21]

Internet-Draft                Sym Alg JSON                     June 2016


                 [
                   { "acvVersion": "0.3" },
                   { "vsId": 1564,
                     "algorithm": "TDES-ECB",
                     "testGroups": [
                       {
                         "direction": "encrypt",
                         "testType": "AFT",
                         "tests": [
                           {
                            "tcId" : 236,
                            "key1" : "5BE5B5FE9BB3E36D",
                            "key2" : "26E92C6DD35D7AB3",
                            "key3" : "4F89ADAD15D62FE3",
                            "pt" : "7119CCA0648787AE"
                           }, {
                            "tcId" : 237,
                            "key1" : "2C7015EC2C044591",
                            "key2" : "230D79A1D0F2469D",
                            "key3" : "7A9EF7FDC4383131",
                            "pt" : "772923F53BA2EA60E7AE232425657B49"
                           }
                         ]
                       }
                     ]
                   }
                 ]

   The following is a example JSON object for test results sent from the
   crypto module to the ACVP server for an TDES-ECB algorithm functional
   test.




















Foley                   Expires December 3, 2016               [Page 22]

Internet-Draft                Sym Alg JSON                     June 2016


                [
                    { "acvVersion": "0.3" },
                    { "vsId": 1564,
                      "testResults": [
                              {
                                "tcId": 236,
                                "ct": "1E85F8256575B8B1"
                              },
                              {
                                "tcId": 237,
                                "ct": "BEFD0E02088D48648FEBAAFEDAA89614"
                              }
                            ]
                         }
                      ]
                    }
                  ]

Appendix E.  Example TDES MCT Test and Results JSON Object

   The following is a example JSON object for test vectors sent from the
   ACVP server to the crypto module for an TDES-ECB Monte Carlo test.

                 [
                   { "acvVersion": "0.3" },
                   { "vsId": 1564,
                     "algorithm": "TDES-ECB",
                     "testGroups": [
                       {
                         "direction": "encrypt",
                         "testType": "MCT",
                         "tests": [
                           {
                             "tcId" : 492,
                             "key1" : "0EABB0E6B0F129D5",
                             "key2" : "DF61EAD07315DA37",
                             "key3" : "EFA2B6A252A18694",
                             "ct" : "2970B363C1461FAF"
                           }
                         ]
                       }
                     ]
                   }
                 ]

   The following is a example JSON object for test results sent from the
   crypto module to the ACVP server for an TDES-ECB Monte Carlo test,
   only 2 iterations shown for brevity.  For MCT results of each



Foley                   Expires December 3, 2016               [Page 23]

Internet-Draft                Sym Alg JSON                     June 2016


   iteration are fed into the next iteration.  Therefore the results
   carry all fields to assist in any failure diagnosis.

                 [
                     { "acvVersion": "0.3" },
                     { "vsId": 1564,
                       "testResults": [
                           {
                             "tcId": 492,
                             "resultsArray": [
                              {
                                   "key1": "0EABB0E6B0F129D5",
                                   "key2": "DF61EAD07315DA37",
                                   "key3": "EFA2B6A252A18694",
                                   "ct": "2970B363C1461FAF",
                                   "pt": "40F806F9DE3466C0"
                               },
                               {
                                   "key1": "4F52B61F6EC44F15",
                                   "key2": "2FEC373726FEADF1",
                                   "key3": "37B57029B65B3767",
                                   "ct": "40F806F9DE3466C0",
                                   "pt": "A498B9748F2FB1E5"
                               }
                             ]
                          }
                       ]
                     }
                   ]

Appendix F.  Example Test Results JSON Object

   An example of the test results format from an AES-GCM decrypt
   operation including failure case.

















Foley                   Expires December 3, 2016               [Page 24]

Internet-Draft                Sym Alg JSON                     June 2016


                 [
                     { "acvVersion": "0.3" },
                     { "vsId": 1566,
                       "testResults": [
                           {
                               "tcId": 2171,
                               "pt": "2CE1129D3E2F25468A9EE13ED39C902C"
                           },
                           {
                               "tcId": 2172,
                               "decryptFail": true
                           }
                         ]
                       }
                   ]

Appendix G.  Example Test Results CTR JSON Object

   An example of the test results format from an AES-CTR encrypt
   operation.

              [
                  { "acvVersion": "0.3" },
                  { "vsId": 1566,
                    "testResults": [
                        {
                          "tcId": 829,
                          "cipherText": "676EC652D5B09513631F112C4BDB206BB608055B4573B1F1B24AAA0966F2A8821690C826B4E4BE613D85EA9951BA178EF22DB67D49AE89CE2A2CBCFEB93060A1AADB92C663BF07527C5DD0981FEBC8C1D47C4DF8BBD83F5680E556ADFA7D10E391F4D5211D39C052784DCD5DBBD92BC4D268BE04306E9A7C58024F4EBEA0DF97CEB8989077DA58889AF660B294524FC6DB4DE5D9FFB383859251D59A57DBA2EEF3641A92D1CDED01C063FC3D006F628FE5CE0E17BC3F0AE83B9DF4E6802DB8814E0BB6B4DA0EAFF1A453F99C6E68E7797492AF86A28920F2A8C015E56877F1FECCFF451F816497EF82E5E3C0A32ED0618D2A4FD57AE8B22EEC2738F1E2C30F116E2B7D8C8C56A81B1589F2B43F386378A780A4FF266636F121238C3BFFA30B19C18AD99AC739210B66A66E3476DF6E86EA60EC848BE0E74B2BE4E209355F2586805C3674C0B21E7C7B9DFE098B40BE6213996C5C489A7B66FA819DF2AB53648C83CAD00D3BA3BB6840EA54EAE54517CB954166C8ECEEB9BA58468715825FE66F0AA0D755C75A9B3DE32EAECD891E9923D2446F82F216BDA544B20C9A5B37EDDED76A45D841D3B991E0754F012D31C2043AC8A219EECD6ABF2EC5F3665D07DB6DBB0D0E38FB1656A38681760C4B2C33FAB5BB0BC62645BD92D8775F42A0308AD2571D9138B616431D1CF5D67B25240D3C4CFA1E3570443CCAE83A4F9A9A3A7D75962ECAA60A639F9A37AA2480F69EEF90B30B34E44180B50435D7C9505CA48E915C2866EEE344A51721D0A0107EEE100D18FFF40EDB6A62FCBC269FA3DE551C0E7674EB70D3FF6F97D83BB695529AB20CB63BB69B83F8079D1F94FAF1243AF39218DACAE47FCF87F12D729EFB94680FC85161230D0734B351DF3484D79E2CEADABE5A9AA0BEA0DC8BE9F698112F50187A79E6259E6D9CAF6E57DA062BB6FC9DE216A3F25DDE72C0B3C3FC7D47C184E36D9393F50B248A0C444E53434CE3B6BE7BE52F319E6849B647CB9B775D58DAF0BE90CE40A1F273D60B2BFC8E3B8EE5500A4857CDBB6CCFCF6CA91052634851C7589CC28B56C6AE90BB98980EB493FE8BC61008282E52ED824A42DB8797824176829CB5CCB845F182EA98522302B369FB2F7724A9E88DAF628714A6DD4E4DD57BDB4269BD3FB226E6976B86A94895B2034CE37BD11D47B624EDFEAFACE13D07C4A5C118C368AC4B7B214BAFCF19EDCCC679A6F1F9226660161AD7EEFE987691B99ED34F4E54E6E5ED49CB1CB337AF4E2D7CF2093B84CC84298BA4A1E330CC97AD5012D9A5C3722369B71E30392B226E5E9BF1A4C1925972AA5614F4D419A006FFBCD0CF3603957ABA840EEEC088BD304BD6336C94AE5BE624447B4943D4131059985DF859D8C7D840D5C4E439122AF10EC608044682145726F7ADDB1DF383B74B936638B67F53F3DDDB77C98E4EDEDFAD085C9D666357BD0E0737FD8C4DE303787FC0D2A8229CEECC031D50A1675647CFC2E24350D8CC45D9B0D0B18906543305D7F2CB8759B253CD75DC9077CBAA19081FE2D687363D35195622E5DF7F0567C12491D24339D5AFB175602993AEE1B2FE58E6B70401261B8394B2447DE82B07E22C33FD1E9721B0E233E8C1871320183F89437782C4702096BB4A95F5F672DC052935BA5336E451B2B6301947E9630CBE4B2CE56C6DF3BFE356AA2214A6CB1DF43CF5DC1D36E44BAA064F9391494376896FD42E3B2ED3CC27A0DD7671D43AF5A98521E4249C55A999A9F512CA00C59F51F52E36180B5F924A554031E1401707FF520603C7BD9F4DB4F6F2BCDF19A034072C91B3BEAB0BD51C56663E60CBA1E37FC798E56EE4C4FB33B90DD856E81E9231887CD61554D4772B355CEA57BB734DE90E43246AE5E4EF7E9DBA8F0EE3088A8B855174997C167BE73D4AAF341C59742F292799AC3C91D429691E5CF3B9846B9A5946CA503056E10F14F07A892B14831495C0AB843FEB88F1D050A58221F17E0CB03281902048866FF9B75D6D279B67885A0856BE722B686B4E755ABC15E97F5541A7ACB0903B27A337DD1DEB6CA1DA3E36B0C645F4B4F11E6F9509C3E4953CAA944A4338433BD782EDC5F2F20F72F6215A94768F21DFDD29AFE14C1CBA8E21D6DF973B54D47A4C7E24FE9E6C1CFDB6824CBAA38375FC71EB7B4E05D103B796656995C435DEF632AE57C3F1FA6946FF2E2087F758F985934EA08D9BA0D2011EB6B2C14046F8E4429C2F66EA8E93B11121C4263830405545C507B94681D6EBF9B5F0",
                          "ivs": [
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDB",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDD",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDE",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDF",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE2",
                            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE3"
                          ]
                        }
                ]







Foley                   Expires December 3, 2016               [Page 25]

Internet-Draft                Sym Alg JSON                     June 2016


Author's Address

   John Foley (editor)
   Cisco Systems, Inc.
   170 West Tasman Dr.
   San Jose, CA  95134
   USA

   Email: foleyj@cisco.com










































Foley                   Expires December 3, 2016               [Page 26]
