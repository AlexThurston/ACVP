



TBD                                                      B. Fussell, Ed.
Internet-Draft                                       Cisco Systems, Inc.
Intended status: Informational                                 June 2016
Expires: December 3, 2016


                    ACVP KAS FFC JSON Specification
                     draft-ietf-acvp-subkasffc-0.3

Abstract

   This document defines the JSON schema for using KAS FFC algorithms
   with the ACVP specification.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 3, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Fussell                 Expires December 3, 2016                [Page 1]

Internet-Draft                Sym Alg JSON                     June 2016


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     2.1.  Required Prerequisite Algorithms for KAS FFC Validations    3
     2.2.  KAS FFC Algorithm Capabilities JSON Values  . . . . . . .   4
     2.3.  Supported KAS FFC Functions . . . . . . . . . . . . . . .   5
     2.4.  KAS FFC Schemes . . . . . . . . . . . . . . . . . . . . .   6
       2.4.1.  KAS FFC Scheme Capabilities JSON Values . . . . . . .   6
       2.4.2.  Supported KAS FFC Schemes . . . . . . . . . . . . . .   6
     2.5.  KAS FFC Modes . . . . . . . . . . . . . . . . . . . . . .   7
       2.5.1.  KAS FFC noKdfNoKc . . . . . . . . . . . . . . . . . .   7
       2.5.2.  KAS FFC kdfNoKc . . . . . . . . . . . . . . . . . . .   7
       2.5.3.  KAS FFC kdfKc . . . . . . . . . . . . . . . . . . . .   7
     2.6.  Parameter Sets  . . . . . . . . . . . . . . . . . . . . .   8
       2.6.1.  KAS FFC Parameter Set . . . . . . . . . . . . . . . .   8
       2.6.2.  KAS FFC Parameter Set Details . . . . . . . . . . . .   8
     2.7.  Supported Hash Algorithm Methods  . . . . . . . . . . . .   9
     2.8.  Supported KAS FFC MAC Options . . . . . . . . . . . . . .   9
     2.9.  Supported KAS FFC KDF Options . . . . . . . . . . . . . .  11
       2.9.1.  Other Information Construction  . . . . . . . . . . .  11
     2.10. Supported KAS FFC KC Options  . . . . . . . . . . . . . .  12
   3.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .  13
     3.1.  Test Groups JSON Schema . . . . . . . . . . . . . . . . .  13
     3.2.  Test Case JSON Schema . . . . . . . . . . . . . . . . . .  16
   4.  Test Vector Responses . . . . . . . . . . . . . . . . . . . .  19
   5.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  20
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  20
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  20
   8.  Normative References  . . . . . . . . . . . . . . . . . . . .  20
   Appendix A.  Example KAS FFC Capabilities JSON Object . . . . . .  20
   Appendix B.  Example Test Vectors JSON Object . . . . . . . . . .  21
   Appendix C.  Example Test Results JSON Object . . . . . . . . . .  24
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  24

1.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This



Fussell                 Expires December 3, 2016                [Page 2]

Internet-Draft                Sym Alg JSON                     June 2016


   sub-specification defines the JSON constructs for testing KAS FFC
   algorithms using ACVP.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].

2.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of KAS FFC algorithms to the
   ACVP server.

   The algorithm capabilities are advertised as JSON objects within the
   'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification for details on the
   registration message.  Each KDF algorithm capability advertised is a
   self-contained JSON object.

2.1.  Required Prerequisite Algorithms for KAS FFC Validations

   Some algorithm implementations rely on other cryptographic
   primitives.  For example, IKEv2 uses an underlying SHA algorithm.
   Each of these underlying algorithm primitives must be validated,
   either separately or as part of the same submission.  ACVP provides a
   mechanism for specifying the required prerequisites:

















Fussell                 Expires December 3, 2016                [Page 3]

Internet-Draft                Sym Alg JSON                     June 2016


   +--------------+--------------+--------------+-----------+----------+
   | JSON Value   | Description  | JSON type    | Valid     | Optional |
   |              |              |              | Values    |          |
   +--------------+--------------+--------------+-----------+----------+
   | algorithm    | a            | value        | CCM,      | No       |
   |              | prerequisite |              | CMAC,     |          |
   |              | algorithm    |              | DRBG,     |          |
   |              |              |              | DSA,      |          |
   |              |              |              | HMAC, SHA |          |
   |              |              |              |           |          |
   | valValue     | algorithm    | value        | actual    | No       |
   |              | validation   |              | number or |          |
   |              | number       |              | "same"    |          |
   |              |              |              |           |          |
   | prereqAlgVal | prerequistie | object with  | see above | Yes      |
   |              | algorithm    | algorithm    |           |          |
   |              | validation   | and valValue |           |          |
   |              |              | properties   |           |          |
   |              |              |              |           |          |
   +--------------+--------------+--------------+-----------+----------+

           Table 1: Required Prerequisite Algorithms JSON Values

2.2.  KAS FFC Algorithm Capabilities JSON Values

   Each algorithm capability advertised is a self-contained JSON object
   using the following values.
























Fussell                 Expires December 3, 2016                [Page 4]

Internet-Draft                Sym Alg JSON                     June 2016


   +------------+------------------+--------------+---------+----------+
   | JSON Value | Description      | JSON type    | Valid   | Optional |
   |            |                  |              | Values  |          |
   +------------+------------------+--------------+---------+----------+
   | algorithm  | The algorithm    | value        | KAS-FFC | No       |
   |            | under test       |              |         |          |
   |            |                  |              |         |          |
   | prereqVals | Prerequisite     | array of     | See     | No       |
   |            | algorithm        | prereqAlgVal | Section |          |
   |            | validations      | objects      | 2.1     |          |
   |            |                  |              |         |          |
   | functions  | Type of function | array        | See     | No       |
   |            | supported        |              | Section |          |
   |            |                  |              | 2.3     |          |
   |            |                  |              |         |          |
   | scheme     | Array of         | object       | See     | No       |
   |            | supported key    |              | Section |          |
   |            | agreement        |              | 2.4.1   |          |
   |            | schemes each     |              |         |          |
   |            | having their own |              |         |          |
   |            | capabilities     |              |         |          |
   |            |                  |              |         |          |
   +------------+------------------+--------------+---------+----------+

                 Table 2: KAS FFC Capabilities JSON Values

   Note: Some optional values are required depending on the algorithm.
   Failure to provide these values will result in the ACVP server
   returning an error to the ACVP client during registration.

2.3.  Supported KAS FFC Functions

   The following function types may be advertised by the ACVP compliant
   crypto module:

   o  dpGen

   o  dpVal

   o  keyPairGen

   o  fullVal

   o  keyRegen







Fussell                 Expires December 3, 2016                [Page 5]

Internet-Draft                Sym Alg JSON                     June 2016


2.4.  KAS FFC Schemes

2.4.1.  KAS FFC Scheme Capabilities JSON Values

   All other scheme capability advertised is a self-contained JSON
   object using the following values.  Note that at least one of
   "noKdfNoKc", "kdfNoKc", or "kdfKc" must be supplied with the
   registration.  See Section 2.4.2 for allowed FFC scheme types.

   +-----------+--------------------+--------+--------------+----------+
   | JSON      | Description        | JSON   | Valid Values | Optional |
   | Value     |                    | type   |              |          |
   +-----------+--------------------+--------+--------------+----------+
   | kasRole   | Roles supported    | array  | initiator    | No       |
   |           | for key agreement  |        | and/or       |          |
   |           |                    |        | responder    |          |
   |           |                    |        |              |          |
   | noKdfNoKc | Indicates no KDF,  | object | Section      | Yes      |
   |           | no KC tests are to |        | 2.5.1        |          |
   |           | be generated.      |        |              |          |
   |           |                    |        |              |          |
   | kdfNoKc   | Indicates KDF, no  | object | Section      | Yes      |
   |           | KC tests are to be |        | 2.5.2        |          |
   |           | generated.         |        |              |          |
   |           |                    |        |              |          |
   | kdfKc     | Indicates KDF, KC  | object | Section      | Yes      |
   |           | tests are to be    |        | 2.5.3        |          |
   |           | generated.         |        |              |          |
   |           |                    |        |              |          |
   +-----------+--------------------+--------+--------------+----------+

                 Table 3: KAS FFC Capabilities JSON Values

2.4.2.  Supported KAS FFC Schemes

   The following schemes may be advertised by the ACVP compliant crypto
   module:

   o  dhHybrid1

   o  MQV2

   o  dhEphem - KeyConfirmation not supported.

   o  dhHybridOneFlow

   o  MQV1




Fussell                 Expires December 3, 2016                [Page 6]

Internet-Draft                Sym Alg JSON                     June 2016


   o  dhOneFlow - Can only provide unilateral key confirmation party V
      to party U.

   o  dhStatic

2.5.  KAS FFC Modes

2.5.1.  KAS FFC noKdfNoKc

   Contains properties required for "noKdfNoKc" registration.

   +--------------+----------------------+--------+---------+----------+
   | JSON Value   | Description          | JSON   | Valid   | Optional |
   |              |                      | type   | Values  |          |
   +--------------+----------------------+--------+---------+----------+
   | parameterSet | The parameterSet     | object | Section | No       |
   |              | options for          |        | 2.6.1   |          |
   |              | "noKdfNoKc"          |        |         |          |
   |              |                      |        |         |          |
   +--------------+----------------------+--------+---------+----------+

                      Table 4: NoKdfNoKc Capabilities

2.5.2.  KAS FFC kdfNoKc

   Contains properties required for "kdfNoKc" registration.

   +--------------+---------------------+--------+----------+----------+
   | JSON Value   | Description         | JSON   | Valid    | Optional |
   |              |                     | type   | Values   |          |
   +--------------+---------------------+--------+----------+----------+
   | kdfOption    | The kdf options for | object | Section  | No       |
   |              | "kdfNoKc"           |        | 2.9      |          |
   |              |                     |        |          |          |
   | parameterSet | The parameterSet    | object | Section  | No       |
   |              | options for         |        | 2.6.1    |          |
   |              | "kdfNoKc"           |        |          |          |
   |              |                     |        |          |          |
   +--------------+---------------------+--------+----------+----------+

                       Table 5: kdfNoKc Capabilities

2.5.3.  KAS FFC kdfKc

   Contains properties required for "kdfKc" registration.






Fussell                 Expires December 3, 2016                [Page 7]

Internet-Draft                Sym Alg JSON                     June 2016


   +--------------+---------------------+--------+----------+----------+
   | JSON Value   | Description         | JSON   | Valid    | Optional |
   |              |                     | type   | Values   |          |
   +--------------+---------------------+--------+----------+----------+
   | kdfOption    | The kdf options for | object | Section  | No       |
   |              | "kdfNoKc"           |        | 2.9      |          |
   |              |                     |        |          |          |
   | kcOption     | The kc options for  | object | Section  | No       |
   |              | "kdfNoKc"           |        | 2.10     |          |
   |              |                     |        |          |          |
   | parameterSet | The parameterSet    | object | Section  | No       |
   |              | options for         |        | 2.6.1    |          |
   |              | "kdfNoKc"           |        |          |          |
   |              |                     |        |          |          |
   +--------------+---------------------+--------+----------+----------+

                        Table 6: kdfKc Capabilities

2.6.  Parameter Sets

2.6.1.  KAS FFC Parameter Set

   Each parameter set advertised is a self-contained JSON object using
   the following values.  Note that at least one parameter set ("fb",
   "fc") is required.

   +-----------+------------------+----------+--------------+----------+
   | JSON      | Description      | JSON     | Valid Values | Optional |
   | Value     |                  | type     |              |          |
   +-----------+------------------+----------+--------------+----------+
   | fb        | The fb parameter | object   | See Section  | Yes      |
   |           | set              |          | 2.6.2        |          |
   |           |                  |          |              |          |
   | fb        | The fb parameter | object   | See Section  | Yes      |
   |           | set              |          | 2.6.2        |          |
   |           |                  |          |              |          |
   +-----------+------------------+----------+--------------+----------+

          Table 7: KAS FFC Parameter Set Capabilities JSON Values

2.6.2.  KAS FFC Parameter Set Details

   fb/fc changes minimum allowed values on options.

   fb: Len p - 2048, Len q - 224, min hash len - 224, min keySize - 112,
   min macSize - 112





Fussell                 Expires December 3, 2016                [Page 8]

Internet-Draft                Sym Alg JSON                     June 2016


   fc: Len p - 2048, Len q - 256, min hash len - 256, min keySize - 128,
   min macSize - 128

   "noKdfNoKc" requires "hashAlg"

   "kdfNoKc" requires "hashAlg" and at least one valid MAC registration

   "kdfKc" requires "hashAlg" and at least one valid MAC registration

   +-----------+------------------------+--------+----------+----------+
   | JSON      | Description            | JSON   | Valid    | Optional |
   | Value     |                        | type   | Values   |          |
   +-----------+------------------------+--------+----------+----------+
   | hashAlg   | The hash algorithms to | array  | See      | Yes      |
   |           | use for DSA (and       |        | Section  |          |
   |           | noKdfNoKc)             |        | 2.7      |          |
   |           |                        |        |          |          |
   | macOption | The macOption(s) to    | object | See      | Yes      |
   |           | use with "kdfNoKc"     |        | Section  |          |
   |           | and/or "kdfKc"         |        | 2.8      |          |
   |           |                        |        |          |          |
   +-----------+------------------------+--------+----------+----------+

      Table 8: KAS FFC Parameter Set Details Capabilities JSON Values

2.7.  Supported Hash Algorithm Methods

   The following SHA methods may be advertised by the ACVP compliant
   crypto module:

   o  SHA2-224

   o  SHA2-256

   o  SHA2-384

   o  SHA2-512

2.8.  Supported KAS FFC MAC Options

   The following MAC options are available for registration under a
   "kdfNoKc" and "kdfKc" kasMode:

   o  AES-CCM

   o  CMAC

   o  HMAC-SHA2-224



Fussell                 Expires December 3, 2016                [Page 9]

Internet-Draft                Sym Alg JSON                     June 2016


   o  HMAC-SHA2-256

   o  HMAC-SHA2-384

   o  HMAC-SHA2-512

   +----------+-------------+--------+---------------------+-----------+
   | JSON     | Description | JSON   | Valid Values        | Optional  |
   | Value    |             | type   |                     |           |
   +----------+-------------+--------+---------------------+-----------+
   | keyLen   | The         | Domain | AES based MACs      | No        |
   |          | supported   |        | limited to 128,     |           |
   |          | keyLens for |        | 192, 256.  HashAlg  |           |
   |          | the         |        | based MACs mod 8.   |           |
   |          | selected    |        | All keySizes        |           |
   |          | MAC.        |        | minimum must        |           |
   |          |             |        | conform to          |           |
   |          |             |        | parameter set       |           |
   |          |             |        | requirements See    |           |
   |          |             |        | Section 2.6.2.      |           |
   |          |             |        |                     |           |
   | nonceLen | The nonce   | value  | Input as bits,      | Yes       |
   |          | len for use |        | 56-104, odd byte    | (required |
   |          | with AES-   |        | values only (7-13). | for AES-  |
   |          | CCM mac     |        | Additionally        | CCM)      |
   |          |             |        | minimum must        |           |
   |          |             |        | conform to          |           |
   |          |             |        | parameter set       |           |
   |          |             |        | requirements See    |           |
   |          |             |        | Section 2.6.2.      |           |
   |          |             |        |                     |           |
   | macLen   | The mac len | value  | Input as bits, mod  | Yes       |
   |          | for use     |        | 8, minimum must     | (required |
   |          | with mac    |        | conform to          | for AES-  |
   |          |             |        | parameter set       | CCM)      |
   |          |             |        | requirements See    |           |
   |          |             |        | Section 2.6.2,      |           |
   |          |             |        | maximum may not     |           |
   |          |             |        | exceed block size.. |           |
   |          |             |        |                     |           |
   +----------+-------------+--------+---------------------+-----------+

                    Table 9: KAS FFC Mac Option Details








Fussell                 Expires December 3, 2016               [Page 10]

Internet-Draft                Sym Alg JSON                     June 2016


2.9.  Supported KAS FFC KDF Options

   The following MAC options are available for registration under a
   "kdfNoKc" and "kdfKc" kasMode:

   o  concatenation

   o  asn1

   +-----------+------------------------+-------+-----------+----------+
   | JSON      | Description            | JSON  | Valid     | Optional |
   | Value     |                        | type  | Values    |          |
   +-----------+------------------------+-------+-----------+----------+
   | oiPattern | The OI pattern to use  | value | See       | No       |
   |           | for constructing       |       | Section   |          |
   |           | OtherInformation.      |       | 2.9.1.    |          |
   |           |                        |       |           |          |
   +-----------+------------------------+-------+-----------+----------+

                   Table 10: KAS FFC KDF Option Details

2.9.1.  Other Information Construction

   Some IUTs require a specific pattern for the OtherInfo portion of the
   KDFs for KAS.  An "oiPattern" is specified in the KDF registration to
   accommodate such requirements.  Regardless of the oiPattern
   specified, the OI bitlength must be 240 for FFC, and 376 for ECC.
   The OI will be padded with random bits (or the most significant bits
   utilized) when the specified OI pattern does not meet the bitlength
   requirement

   Pattern candidates:

   o  literal[123456789ABCDEF]

      *  uses the specified hex within "[]".  literal[123456789ABCDEF]
         substitutes "123456789ABCDEF" in place of the field

   o  uPartyInfo

      *  uPartyId { || dkmNonce }

         +  dkmNonce is provided by party u for static schemes

   o  vPartyInfo

      *  vPartyId




Fussell                 Expires December 3, 2016               [Page 11]

Internet-Draft                Sym Alg JSON                     June 2016


   o  counter

      *  32bit counter starting at "1" (0x00000001)

   Example (Note that party U is the server in this case "434156536964",
   party V is the IUT "a1b2c3d4e5", using an FFC non-static scheme):

   o  "concatenation" :
      "literal[123456789CAFECAFE]||uPartyInfo||vPartyInfo"

   Evaluated as:

   o  "123456789CAFECAFE434156536964a1b2c3d4e5b16c5f78ef56e8c14a561"

   o  "b16c5f78ef56e8c14a561" are random bits applied to meet length
      requirements

2.10.  Supported KAS FFC KC Options

   The following KC options are available for registration under a
   "kdfKc" kasMode:

   +----------+----------------+------+---------------------+----------+
   | JSON     | Description    | JSON | Valid Values        | Optional |
   | Value    |                | type |                     |          |
   +----------+----------------+------+---------------------+----------+
   | kcRole   | The role(s)    | arra | provider/recipient  | No       |
   |          | the IUT is to  | y    |                     |          |
   |          | act as for Key |      |                     |          |
   |          | Confirmation.  |      |                     |          |
   |          |                |      |                     |          |
   | kcType   | The type(s)    | arra | unilateral/bilatera | No       |
   |          | the IUT is to  | y    | l                   |          |
   |          | act as for Key |      |                     |          |
   |          | Confirmation.  |      |                     |          |
   |          |                |      |                     |          |
   | nonceTyp | The nonce      | arra | randomNonce,        | No       |
   | e        | type(s) the    | y    | timestamp,          |          |
   |          | IUT is to use  |      | sequence,           |          |
   |          | for KeyConfirm |      | timestampSequence   |          |
   |          | ation.         |      |                     |          |
   |          |                |      |                     |          |
   +----------+----------------+------+---------------------+----------+

             Table 11: KAS FFC KC Option Details Capabilities






Fussell                 Expires December 3, 2016               [Page 12]

Internet-Draft                Sym Alg JSON                     June 2016


3.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation session would require multiple test vector
   sets to be downloaded and processed by the ACVP client.  Each test
   vector set represents an individual KAS FFC function.  This section
   describes the JSON schema for a test vector set used with KAS FFC
   algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.The following table
   describes the JSON elements at the top level of the hierarchy.

   +------------+---------------------------------------------+--------+
   | JSON Value | Description                                 | JSON   |
   |            |                                             | type   |
   +------------+---------------------------------------------+--------+
   | acvVersion | Protocol version identifier                 | value  |
   |            |                                             |        |
   | vsId       | Unique numeric identifier for the vector    | value  |
   |            | set                                         |        |
   |            |                                             |        |
   | algorithm  | KAS-FFC                                     | value  |
   |            |                                             |        |
   | type       | Type of operation supported                 | value  |
   |            |                                             |        |
   | testGroups | Array of test group JSON objects, which are | array  |
   |            | defined in Section 3.1                      |        |
   +------------+---------------------------------------------+--------+

                     Table 12: Vector Set JSON Object

3.1.  Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the secure hash JSON elements of the Test
   Group JSON object.

   The test group for KAS FFC is as follows:

   +----------------+----------------------+----------------+----------+



Fussell                 Expires December 3, 2016               [Page 13]

Internet-Draft                Sym Alg JSON                     June 2016


   | JSON Value     | Description          | JSON type      | Optional |
   +----------------+----------------------+----------------+----------+
   | scheme         | The scheme for the   | value          | No       |
   |                | test vectors. See    |                |          |
   |                | Section 2.4.1 for    |                |          |
   |                | possible values      |                |          |
   |                |                      |                |          |
   | testType       | The type of          | AFT, VAL       | No       |
   |                | testCases expected   |                |          |
   |                | within the group.    |                |          |
   |                | AFT (Functional)     |                |          |
   |                | tests produce test   |                |          |
   |                | cases where the      |                |          |
   |                | prompt file delivers |                |          |
   |                | only the needed      |                |          |
   |                | public server        |                |          |
   |                | information in which |                |          |
   |                | the IUT is expected  |                |          |
   |                | to perform KAS.  VAL |                |          |
   |                | (Validity) tests     |                |          |
   |                | produce              |                |          |
   |                | inputs/outputs from  |                |          |
   |                | both server and IUT  |                |          |
   |                | perspectives of a    |                |          |
   |                | KAS negotiation.     |                |          |
   |                | The expectation of   |                |          |
   |                | the IUT on such      |                |          |
   |                | tests is to          |                |          |
   |                | determine if the KAS |                |          |
   |                | negotiation was      |                |          |
   |                | successful or not.   |                |          |
   |                |                      |                |          |
   | kasRole        | The KAS role         | initiator,     | No       |
   |                |                      | responder      |          |
   |                |                      |                |          |
   | kasMode        | The KAS mode         | noKdfNoKc,     | No       |
   |                |                      | kdfNoKc, kdfKc |          |
   |                |                      |                |          |
   | parmSet        | Parameter set value  | fb, fc         | No       |
   |                | to use               |                |          |
   |                |                      |                |          |
   | hashAlg        | hashAlg values being | See Section    | No       |
   |                | used                 | 2.7            |          |
   |                |                      |                |          |
   | macType        | The MAC being used.  | See Section    | Yes      |
   |                | Required for         | 2.8            |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |



Fussell                 Expires December 3, 2016               [Page 14]

Internet-Draft                Sym Alg JSON                     June 2016


   |                |                      |                |          |
   | keyLen         | The key length of    | See Section    | Yes      |
   |                | the MAC. Required    | 2.8            |          |
   |                | for "kdfNoKc" and    |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | nonceAesCcmLen | The nonce length of  | See Section    | Yes      |
   |                | the MAC (applies     | 2.8            |          |
   |                | only to AES-CCM).    |                |          |
   |                | Required for         |                |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes using  |                |          |
   |                | a AES-CCM MAC.       |                |          |
   |                |                      |                |          |
   | macLen         | The mac length.      | See Section    | Yes      |
   |                | Required for         | 2.8            |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | kdfType        | The KDF being used.  | concatenation, | Yes      |
   |                | Required for         | asn1           |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | idServerLen    | The length of the    | value          | Yes      |
   |                | server ID. Required  |                |          |
   |                | for "kdfNoKc" and    |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | idServer       | The server ID.       | value          | Yes      |
   |                | Required for         |                |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | idIutLen       | The length of the    | value          | Yes      |
   |                | server ID. Required  |                |          |
   |                | for "kdfNoKc" and    |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                | Provided in response |                |          |
   |                | by IUT for AFT       |                |          |
   |                | tests.               |                |          |
   |                |                      |                |          |
   | idIut          | The server ID.       | value          | Yes      |
   |                | Required for         |                |          |
   |                | "kdfNoKc" and        |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                | Provided in response |                |          |
   |                | by IUT for AFT       |                |          |



Fussell                 Expires December 3, 2016               [Page 15]

Internet-Draft                Sym Alg JSON                     June 2016


   |                | tests.               |                |          |
   |                |                      |                |          |
   | oiPattern      | The oiPattern used   | See Section    | Yes      |
   |                | in the KDF. Required | 2.9.1          |          |
   |                | for "kdfNoKc" and    |                |          |
   |                | "kdfKc" modes.       |                |          |
   |                |                      |                |          |
   | kcRole         | Key confirmation     | provider,      | Yes      |
   |                | roles supported.     | recipient      |          |
   |                | Required for "kdfKc" |                |          |
   |                | modes.               |                |          |
   |                |                      |                |          |
   | kcType         | Key confirmation     | unilateral     | Yes      |
   |                | types supported.     | and/or         |          |
   |                | Required for "kdfKc" | bilateral      |          |
   |                | modes.               |                |          |
   |                |                      |                |          |
   | p              | Domain parameter for | value          | No       |
   |                | DSA                  |                |          |
   |                |                      |                |          |
   | q              | Domain parameter for | value          | No       |
   |                | DSA                  |                |          |
   |                |                      |                |          |
   | g              | Domain parameter for | value          | No       |
   |                | DSA                  |                |          |
   |                |                      |                |          |
   | tests          | Array of individual  | array          | No       |
   |                | test vector JSON     |                |          |
   |                | objects, which are   |                |          |
   |                | defined in Section   |                |          |
   |                | 3.2                  |                |          |
   +----------------+----------------------+----------------+----------+

                    Table 13: Vector Group JSON Object

3.2.  Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each KAS FFC test vector.

   +-----------------------+------------------------+-------+----------+
   | JSON Value            | Description            | JSON  | Optional |
   |                       |                        | type  |          |
   +-----------------------+------------------------+-------+----------+
   | tcId                  | Numeric identifier for | value | No       |
   |                       | the test case, unique  |       |          |



Fussell                 Expires December 3, 2016               [Page 16]

Internet-Draft                Sym Alg JSON                     June 2016


   |                       | across the entire      |       |          |
   |                       | vector set.            |       |          |
   |                       |                        |       |          |
   | staticPublicServer    | The DSA static public  | value | Yes      |
   |                       | key                    |       |          |
   |                       |                        |       |          |
   | ephemeralPublicServer | The DSA ephemeral      | value | Yes      |
   |                       | public key             |       |          |
   |                       |                        |       |          |
   | nonceEphemeralServer  | nonceEphemeralServer   | value | Yes      |
   |                       | ONLY USED BY C(1,2)    |       |          |
   |                       | and C(0,2) schemes     |       |          |
   |                       | with KC. nonce to be   |       |          |
   |                       | used in the MacData    |       |          |
   |                       | field                  |       |          |
   |                       |                        |       |          |
   | nonceNoKc             | The 16 byte nonce      | value | Yes      |
   |                       | concatenated to the    |       |          |
   |                       | "Standard Test         |       |          |
   |                       | Message".  Used for No |       |          |
   |                       | Key Confirmation tests |       |          |
   |                       | only.                  |       |          |
   |                       |                        |       |          |
   | nonceDkm              | The nonce supplied by  | value | Yes      |
   |                       | the initiator to be    |       |          |
   |                       | used in the OI field   |       |          |
   |                       | in the PartyUInfo      |       |          |
   |                       | field.                 |       |          |
   |                       |                        |       |          |
   | staticPrivateIut      | The IUT DSA static     | value | Yes      |
   |                       | private key            |       |          |
   |                       |                        |       |          |
   | staticPublicIut       | The IUT DSA static     | value | Yes      |
   |                       | public key             |       |          |
   |                       |                        |       |          |
   | ephemeralPrivateIut   | The IUT DSA ephemeral  | value | Yes      |
   |                       | private key            |       |          |
   |                       |                        |       |          |
   | ephemeralPublicIut    | The IUT DSA ephemeral  | value | Yes      |
   |                       | public key             |       |          |
   |                       |                        |       |          |
   | oiLen                 | Length of the          | value | Yes      |
   |                       | OtherInfo field        |       |          |
   |                       |                        |       |          |
   | oi                    | OtherInfo field        | value | Yes      |
   |                       |                        |       |          |
   | dkm                   | Derived Keying         | value | Yes      |
   |                       | Material.              |       |          |



Fussell                 Expires December 3, 2016               [Page 17]

Internet-Draft                Sym Alg JSON                     June 2016


   |                       |                        |       |          |
   | tagIut                | The tag (or MAC)       | value | Yes      |
   |                       | GENERATED BY THE       |       |          |
   |                       | SERVER/IUT by using    |       |          |
   |                       | the DKM to MAC the     |       |          |
   |                       | Message with the       |       |          |
   |                       | specified method       |       |          |
   |                       |                        |       |          |
   | nonceEphemeralIut     | nonceEphemeralIut ONLY | value | Yes      |
   |                       | USED BY C(1,2) and     |       |          |
   |                       | C(0,2) schemes with    |       |          |
   |                       | KC. nonce to be used   |       |          |
   |                       | in the MacData field   |       |          |
   |                       |                        |       |          |
   | nonceDkmIut           | ONLY USED BY STATIC    | value | Yes      |
   |                       | SCHEME. The nonce      |       |          |
   |                       | supplied by the        |       |          |
   |                       | initiator to be used   |       |          |
   |                       | in the OI field in the |       |          |
   |                       | PartyUInfo field       |       |          |
   |                       |                        |       |          |
   | nonceLenDkm           | ONLY USED BY STATIC    | value | Yes      |
   |                       | SCHEME. The length of  |       |          |
   |                       | the nonce supplied by  |       |          |
   |                       | the initiator to be    |       |          |
   |                       | used in the OI field   |       |          |
   |                       | in the PartyUInfo      |       |          |
   |                       | field.                 |       |          |
   |                       |                        |       |          |
   | nonceEphemeralDkm     | ONLY USED BY C(1,2)    | value | Yes      |
   |                       | and C(0,2) schemes     |       |          |
   |                       | with KC. nonce to be   |       |          |
   |                       | used in the MacData    |       |          |
   |                       | field                  |       |          |
   |                       |                        |       |          |
   | nonceEphemralDkmLen   | length of              | value | Yes      |
   |                       | nonceEphemeralIut      |       |          |
   |                       | value.                 |       |          |
   |                       |                        |       |          |
   | nonceAesCcm           | Nonce used by the CCM  | value | Yes      |
   |                       | function, if CCM is    |       |          |
   |                       | used to generate the   |       |          |
   |                       | Tag.                   |       |          |
   |                       |                        |       |          |
   | macData               | The message to be      | value | Yes      |
   |                       | MAced.                 |       |          |
   |                       |                        |       |          |
   | z                     | A shared secret that   | value | Yes      |



Fussell                 Expires December 3, 2016               [Page 18]

Internet-Draft                Sym Alg JSON                     June 2016


   |                       | is used to derive      |       |          |
   |                       | secret keying material |       |          |
   |                       | using a key derivation |       |          |
   |                       | function.              |       |          |
   |                       |                        |       |          |
   | hashZServer           | The hashed shared      | value | Yes      |
   |                       | secret, only provided  |       |          |
   |                       | in noKdfNoKc modes of  |       |          |
   |                       | operation.             |       |          |
   |                       |                        |       |          |
   | hashZIut              | The hashed shared      | value | Yes      |
   |                       | secret, only provided  |       |          |
   |                       | in noKdfNoKc modes of  |       |          |
   |                       | operation.             |       |          |
   |                       |                        |       |          |
   | result                | Pass Fail indicating   | value | Yes      |
   |                       | if the IUT agrees with |       |          |
   |                       | the Tag generated by   |       |          |
   |                       | the server.            |       |          |
   +-----------------------+------------------------+-------+----------+

                      Table 14: Test Case JSON Object

4.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

   +-------------+--------------------------------------------+--------+
   | JSON Value  | Description                                | JSON   |
   |             |                                            | type   |
   +-------------+--------------------------------------------+--------+
   | acvVersion  | Protocol version identifier                | value  |
   |             |                                            |        |
   | vsId        | Unique numeric identifier for the vector   | value  |
   |             | set                                        |        |
   |             |                                            |        |
   | testResults | Array of JSON objects that represent each  | array  |
   |             | test vector result, Section 3.2            |        |
   +-------------+--------------------------------------------+--------+

                 Table 15: Vector Set Response JSON Object







Fussell                 Expires December 3, 2016               [Page 19]

Internet-Draft                Sym Alg JSON                     June 2016


5.  Acknowledgements

   TBD...

6.  IANA Considerations

   This memo includes no request to IANA.

7.  Security Considerations

   Security considerations are addressed by the ACVP specification.

8.  Normative References

   [ACVP]     authSurName, authInitials., "ACVP Specification", 2016.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.

Appendix A.  Example KAS FFC Capabilities JSON Object

   The following is a example JSON object advertising support for KAS
   FFC.


                {
                        "algorithm": "KAS-FFC",
                        "prereqVals": [{
                                        "algorithm": "DSA",
                                        "valValue": "123456"
                                },
                                {
                                        "algorithm": "DRBG",
                                        "valValue": "123456"
                                },
                                {
                                        "algorithm": "SHA",
                                        "valValue": "123456"
                                },
                                {
                                        "algorithm": "CCM",
                                        "valValue": "123456"
                                },
                                {
                                        "algorithm": "CMAC",
                                        "valValue": "123456"



Fussell                 Expires December 3, 2016               [Page 20]

Internet-Draft                Sym Alg JSON                     June 2016


                                },
                                {
                                        "algorithm": "HMAC",
                                        "valValue": "123456"
                                }
                        ],
                        "functions": ["keyPairGen", "dpGen"],
                        "scheme": {
                                "dhEphem": {
                                        "role": ["initiator", "responder"],
                                        "noKdfNoKc": {
                                                "parameterSet": {
                                                        "fb": {
                                                                "hashAlg": ["SHA2-224", "SHA2-256"]
                                                        }
                                                }
                                        },
                                        "kdfNoKc": {
                                                "kdfOption": {
                                                        "concatenation": "uPartyInfo||vPartyInfo",
                                                        "ASN1": "uPartyInfo||vPartyInfo"
                                                },
                                                "parameterSet": {
                                                        "fc": {
                                                                "hashAlg": ["SHA2-224", "SHA2-256"],
                                                                "macOption": {
                                                                        "AES-CCM": {
                                                                                "keyLen": [128],
                                                                                "nonceLen": 56,
                                                                                "macLen": 64
                                                                        }
                                                                }
                                                        }
                                                }
                                        }
                                }
                        }
                }


Appendix B.  Example Test Vectors JSON Object

   The following is a example JSON object for KAS FFC test vectors sent
   from the ACVP server to the crypto module.

[{
                "acvVersion": "0.4"
        },



Fussell                 Expires December 3, 2016               [Page 21]

Internet-Draft                Sym Alg JSON                     June 2016


        {
                "vsId": 1564,
                "algorithm": "KAS-FFC",
                "testGroups": [{
                                "scheme": "dhEphem",
                                "testType": "AFT",
                                "kasRole": "initiator",
                                "kasMode": "noKdfNoKc",
                                "parmSet": "fb",
                                "hashAlg": "SHA2-512",
                                "p": "a3a77cce3b0ea9891fe6ac34b2bdd04e22f9fd5a4976b5e2bd4c9ec43831c4d293779f3c4f826e6c2a8d6bd1ffca323b2360fcaa8bddc8c5268941578eede1f9447a39aaaa9af45bae4596b6df2a7048ce65bdd421ba055c640458abd4fdd07564df3a39ad6375a38dca884e5b67550bd60d789f5167935add6ae77af506e69d48eab2ebc1f17ff671c6d03d2f4f0e53e0ff1bdb488feca5d2b569f510242dd8bd64502c67ee8fe36224860a8b2934e864f75eff5fed4ecea69a1b2e6893df75ae19b266f4a55ccca2307038056aebfd212a4d5b540273d232c38d5cc6595216c3050cf4562989be8b341bd58c183e5e411939b4b34ad5752e87ffe622bd2075",
                                "q": "f094f4fa8fa36fdcdf4f0378112bfde03cfa532e666b9736b5ab76e9",
                                "g": "45308211a07f231181276b44b873eb67726ca6aa5ecd39b4274f780409e15bfc98ac4680be5220a23b963e3b494602a80ce6cb6eb3f056e2a911ff7529f07fc53fa8840174698aac6a9dd540e86171cf2896a7337c0a839bfd9f24779c83f75b376da3c3c4d25d6b454e09dadbe230ee42115ae7ea79ace00b3c73bfd0c9913b0251177de4aae0ed54c041ff071346b2603360e5175faa9bbbc8fc50c5c657bba28da146674fa8a4f936da9d86511959785cd8e34c4b1f390b2cc68f574fd85e96e894d1b225ad43b3489af729c560b513a671e7fde2bd138fbd20605c74347e76ac50e230c57fec6dda275df29f770d47b91631e135778a51f3032bb1ef292f",
                                "tests": [{
                                        "tcId": 3000,
                                        "ephemeralPublicServer": "2cc5dcb3cae0bd0052838991e371fca0bb827598c1ffa554f2699ccc29b5bb085bf77634ab3fec24fb81ab1e435c17229bb6872eb4fcf30acee2a3fe9891363f51112f94d2a48ae506bd4dba9e8db6ad59713d4b8a5afbdb717a27483680998bea79baa30e42294005bfacb3e67d113549fa48d058cff1dce03ea2d89be3b61358618c540db7b11b06d4d0e545d5a5ad8d93246946f5d9a9710ebd40a48a2c70e7b93928497fa02d08cb1c591dc3c204e88e933ac2e8c68b85e3757af1b44448d60ec63fc1323f3be369662b2937a419648dc9f3b4b19496e8a4feebaed8e0ccb02d56000e5b1832b2132384efab47950e40eb8482f2d7bd344e019e9c573384"
                                }]
                        },
                        {
                                "scheme": "dhEphem",
                                "testType": "AFT",
                                "kasRole": "responder",
                                "kasMode": "kdfNoKc",
                                "parmSet": "fc",
                                "hashAlg": "SHA2-226",
                                "macType": "AES-CCM",
                                "keyLen": 128,
                                "aesCcmNonceLen": 56,
                                "macLen": 64,
                                "kdfType": "asn1",
                                "idServerLen": 48,
                                "idServer": "434156536964",
                                "oiPattern": "uPartyInfo||vPartyInfo",
                                "p": "91d80f6b6958b04e87da7e3258db8dd60ba376cdfabdd635ce04a69e62bb34202f2a1f8fc4460a12cd2f265a2ab03cc0360597dfa6ce72b25b4545dd1769d47a94d82a079a0a7b8101cb628c9c6e25934f2d91caef70c036e7ca4f6567aa053ab5bbf0e6e3524ccc5204cf9884bf9a09145277106efaca89c76662c926a40337b4b2800a00e1db8592d259973e7078fae64636355846c4d3a020e451a6e36c119919d6f16d5033bf7b3159c34efc41ecde98b7431881f37ae9f26aabe19e26bf93476930939362c44465f1e7d5c46ad381da742703a685c8323a590f0e3ad462547139a880d1ea59aa712f8ea0cb3605cc8a1af8608acc30112488c396c806a5",
                                "q": "cf4ff0acc36d5d9573342664b38b9a363173cfec110ecebc2dc3ef74780ca313",
                                "g": "15a498872f9758485c0253357b957e67ffbf320d955fec5dcf8d17acf715bb2de1de7872efb4c5902fc71c5cfae4ae121cd635e5ec07529a691813e59040720fbeee9262ed2636996cc0cb3ee4d5de16006903ce9dc883a0d3d13da66ef2768ff5b8008e4dc2b188de69bd55d1187bdba5e91c2c4fe25e0b00e393b4ca590ed38e4557b78a7aa393802db7a6046eb8d6927689c3d7f9391e9803f71dc015fb78c057e4c8b52217591ef4a7919a6985e049ca5f58a2ac303f1b0a1f52cef2ab140cca08cdb9707370ab8bbcbaef91c2a250c4630e351fb63335660dcce383acb265ac615322490e2e34311ac6a2cc2cd62908828a1913943fe19f12d3a3b624e9",
                                "tests": [{
                                        "tcId": 4000,
                                        "ephemeralPublicServer": "4def03e88563f4992120c7940dff3b2c6da81c82a4b132c52916fd48811f0d6ce96fe7224e477df3a594566d0d227c561b201b36d28e19e21489961ffb773bd1849e737d2f35cd5f5ea0a24ee4577501a79c3daf4c7030a5248962e818288189addca99bbda6c210d7e695810048c48556c5f23c84892fc2a5f13d595a22a12ccf51359aeb8d3fb1ad5165fedb7ddff4281b9d257915bd90e1142933871ddb2bf8592a1c2cdef506980aac35ff8a0f0887a5384ab05084cd981fa954a60141b3ecc9fe264d69a26c120b7562af3bada0c969d2f28b83c4eb147769cd74bcfa4a02af098291974efd64a928b50ad7062a2555dae73ece0a8ef83027194aaf05c0",
                                        "nonceNoKc": "83fffe9a2cb8f97868c2e5d140ce427a"
                                }]
                        },
                        {
                                "scheme": "dhEphem",
                                "testType": "VAL",
                                "kasRole": "initiator",
                                "kasMode": "kdfNoKc",
                                "parmSet": "fc",



Fussell                 Expires December 3, 2016               [Page 22]

Internet-Draft                Sym Alg JSON                     June 2016


                                "hashAlg": "SHA2-226",
                                "macType": "AES-CCM",
                                "keyLen": 128,
                                "aesCcmNonceLen": 56,
                                "macLen": 64,
                                "kdfType": "asn1",
                                "idServerLen": 48,
                                "idServer": "434156536964",
                                "idIutLen": 40,
                                "idIut": "a1b2c3d4e5",
                                "oiPattern": "uPartyInfo||vPartyInfo",
                                "p": "d5cf9ba288ff8438650904a5fe2eeb8bf6b52b691a455b21bd3b37998f82544036ae61fe436039c66feab83ba21a5ba13e7b4c1692ac82c65309eed54e593efe9831cc82bfd11e9552d4eb7d8f2c233024bc10819c57093890ec19aa9ee915e524d81c285928a5b87acc7f496f93689ed59b15183689ec5e487fdc9fb994c4bf7e1dba57f8f12c17e404f68b5506d69f4aa98146f6ba3be1f3397e5d41c4235a18b38c75417bb9091a487db1fc89eb2f73b4ac6f6c12dc5634a342cd9d10605090bd544e1c0813aaaa3814166df84a302b8df38babe9c31e4a2c64317046bdb841fa8717e22dcf1496f9ad94c17f1ff9175567d02ab5e30601e2e5b0884e9a77",
                                "q": "ceb9916bbc14cdc9dda80481135bee68ee94f4ecadc2921261a316d1c9cf9283",
                                "g": "37a7b2a094ed6253784d51c71a4a7407f0727df15e480a02b0ff2f9befdb0e92c0d63e482c6909e5337373abe347ceaec25a9f2a23f1770c2447bfb5c35dbda80d3f00d8b6569a0165a3d52f1cff03e02b67be47b2f26ebd0fc13299fd0317719c3bcbbcbba0a982915b5d68fb4c5c483c3df12052b56ceacd16176c783d56422b1366cd5ce65922b734a1780acf35b4a658cfe8166469ace04b87a33e1e8d4603ae3f9607d1e708137d581aaf2cd86608ca06e52cddbe475f8bdb4597cd5b55f47380276c86d08d8ddbbef4ee3ca76cefe6ff9c74d4d5d1be3407e30720be34cf41f482be8bc6ed6e89ea7cc2d164da1dc1c9d0e2762eef983dc9e96f3bfd50",
                                "tests": [{
                                        "tcId": 5000,
                                        "ephemeralPublicServer": "4fc5ed02abf0791bb01ad33527bd16ee58f875bbc85de5b513ccce95d05d6c735e726a102f11a69152f1c430b027ef3f2049e07db96f448d9b016ebd9258cd33175c06c00d107c99ccfebc8e77b19c61ed7c9e1d8a3e912a893b30ec9ab1d59d2bd5133c9669090c7bcc48318a21cabffbe56477e9fda36aba9c5e4462854fa682f503de3e895579b0c51a2f2a6b1fc59bee015e8bd89041a2efafbe8ea491215a88302f6a4858ea3c0d846e52f6ea070b61dda82009bdf0ed13a077ea1777233e059fed4c45249c5bbba1fbaa6f574058ec58d56e6b3a486e0aa306ef2d63d70617f6b384fe238e82832dfeff6317aa887aab894efc9b60e6f5127581fe735c",
                                        "nonceNoKc": "1d33ef74a9f3c6e7ab1dfa77b40e4191",
                                        "ephemeralPrivateIut": "41f8582a2f3ac19cc925fb5cf72ec98f89630fec8e71853397870c3fda1eb08b",
                                        "ephemeralPublicIut": "a6f3b734391112b2ae81cb3021bc1275383c4a6c80b9a1265ae3f5a8256a0a621667f71e3e081b86bc427d5adddb901aacd4e3b7b48170c7d13cd9dccd7b04072d97a7c39fc44c079a48fa3d2495e90659786275f13b5ad2402509dd12637630de980369c5e55953091df4ef3e369880547737df1d7bd7a9d437488cb01a94b444c05ae33d6ae6126bd0c9c7be19adc752f210f68ee7657a9151ef3299b4e4e12f19ba9f3070cacfe1af329e69a2bd6416c51c7d33b183702dbd20df91ca09c5190321f59f55fca903546cc42c3edcb3c4eb30b3a4228fe2e1906484174715e0b08d9d93c4588c33739f416ca45a33faa861dc6e9fb7831cc95d2d2741533be3",
                                        "oiLen": 240,
                                        "oi": "a1b2c3d4e54341565369646cfd9fa9ec70ae7f9b0d17cc63ea2103fbaf6b",
                                        "nonceAesCcm": "6526d522a19f25",
                                        "tagIut": "9a0ade2f4b22599e"
                                }]
                        },
                        {
                                "scheme": "dhEphem",
                                "testType": "VAL",
                                "kasRole": "responder",
                                "kasMode": "noKdfNoKc",
                                "parmSet": "fb",
                                "hashAlg": "SHA2-512",
                                "p": "b0b4760d008b63403f2ce5ae597d0adfa56a11da5c29301b25565282c0fda5fc634d51fd738807800b506e4728c597c0fd9546830b97b3f5782a79af630f3ddc952c08afde776c78179c566f8ce104f886c42475d8bee4016a06e001e1a4272671041d25344eb0f29e4fe3b1325c07ce9a3db0a211d928d62ffcac3afe05fbf83a18b29f85ebe3fc8a6df2c34b7cd50e3c9d6c5cfd56accceb9a9625acc56a2ffc71d476300bf2fde78f1131bb9ac40d2de7fd61cbeb3d240733781ecab43be1d787f50eb3717892155624bff7136d80d847c9df3af4d303304b79eb9672c5cd87ef3872c394064e33155b581df01617bc35325b66e6e9e170475df3fd66265f",
                                "q": "947d217b8f4d658f0f9c6d427d28dcc2bb18b186f0754aac47c9cae5",
                                "g": "a7ae223bb4f3360505170ce0524015523d212b1746a24ecf78eca58e572227b92cfea96c6769b57ddd74e0dc7a2a3ad76f3fe29782727e253b82bba5e88a6bed315ed4163cd1549bdba262b004c0cce197be822b7f4d4cc1ed74aa7714d19aa29c5002fe8c9ae1020f643e92353e1d48f04047455671eb955738590fae4de0f35cf6880715104ee0604e26e1134922a59169da3f31acbb4e44e50667707e2a9b2e5a40b1292a0382f03cae98d67a609a2d71d55e3efeab7247fd8b4cbd770120a3bbf0813ea9c11232178b530e69281634d4710f5a09255d78568d977fd1c7f4bf2d873509c14b31b8796f22d2c3684204d29303a395d0d262ae541186a9c481",
                                "tests": [{
                                        "tcId": 6000,
                                        "ephemeralPublicServer": "4fc5ed02abf0791bb01ad33527bd16ee58f875bbc85de5b513ccce95d05d6c735e726a102f11a69152f1c430b027ef3f2049e07db96f448d9b016ebd9258cd33175c06c00d107c99ccfebc8e77b19c61ed7c9e1d8a3e912a893b30ec9ab1d59d2bd5133c9669090c7bcc48318a21cabffbe56477e9fda36aba9c5e4462854fa682f503de3e895579b0c51a2f2a6b1fc59bee015e8bd89041a2efafbe8ea491215a88302f6a4858ea3c0d846e52f6ea070b61dda82009bdf0ed13a077ea1777233e059fed4c45249c5bbba1fbaa6f574058ec58d56e6b3a486e0aa306ef2d63d70617f6b384fe238e82832dfeff6317aa887aab894efc9b60e6f5127581fe735c",
                                        "hashZIut": "6a8a50b45c32dc4e0eca0447822024e843dbbad378392ca4d2da83ad40500fe2dd06f5fab677725e5706dd203d28a47c57cd85dfd431636f515c230ab376c6e0"
                                }]
                        }
                ]
        }
]






Fussell                 Expires December 3, 2016               [Page 23]

Internet-Draft                Sym Alg JSON                     June 2016


Appendix C.  Example Test Results JSON Object

   The following is a example JSON object for KAS FFC test results sent
   from the crypto module to the ACVP server.

[{
                "acvVersion": "0.4"
        },
        {
                "vsId": 1564,
                "testResults": [{
                                "tcId": 3000,
                                "ephemeralPublicIut": "5067495e06d0c6dfd6eada5607f3dc7b9bf93eeeb7513119860f5d60ef332823b0ba58af2ecb7ab2cbccee87ccf232a02c27affb167e1a86811090262771c0fb5574c89ffb1288cd1d0096c0bb62add57fd3fa691ee1152b632778016a1a0c4ec2fce5ade1d3d1d2ae5c5a1a71e1a90dc648b384222e22357b8301536866d70b91a37ff3d88d444ed3e531b19939f3dfa33c4782ec195060cb35a13e0bad6f1f9c9be10720bb1055af93e16999c97d127fde52f16060080656810954f4cf745a57a3909327b2eaaa3ea5b9fa794f186658b186974861a00ee59b125c06398b835de09d2b340f7f0254e69339bdc4257b11543a300e1b8c615cd3a64838ce0d09"
                                "hashZIut": "39de343caa24b36f02ce0d3b08a7c5f553c7f5f0f65dcca10855a3fed89efd475156b51bfdfb1509e7898ca7bdf57a5485f68c82f4dffe8f1d7fb7b13a0de933"
                        },
                        {
                                "tcId": 4000,
                                "nonceAesCcm": "67dc43e8d722e9",
                                "ephemeralPublicIut": "55b25962987f35576d371abe075741d4b20b04e989d4ea6dcee252b3d90aee720445816127ad49d4d8144e6f5fb4e1d459abbc48bfd419f33489599f4ad56e0f49d9b914d66bd18e159917f390073edeb0a186a25ec07dfa24585555eb0fa73a36551e6f4becf8f18e5154638f9f46539679438d68ba06db780a02416add027b2d36688bf1988d376148d9db6cbe11b6bebe4cadbd0a0a60d73e95d7438d5b8985bd3147f0fa09a638d229a175d0a48cc764d97643b962a202ea0fa283d869e2685b67345cc70771276c584ab6525a803c4649282572637ce378777b1d52cca631d229b052c8f10dbe2f5d408a4a43459b6cdaf4e7f0f6abd12b290b7f253942",
                                "iutIdLen": 40,
                                "iutId": "a1b2c3d4e5",
                                "oiLen": 240,
                                "oi": "434156536964a1b2c3d4e52009a24c98c92d8a86461fbb212c8193db7a69",
                                "dkm": "72d5339d984529cf25ecca527c273282",
                                "tagIut": "fa3ab95a72aac9c0"
                        },
                        {
                                "tcId": 5000,
                                "result": "pass"
                        },
                        {
                                "tcId": 5000,
                                "result": "fail"
                        }
                ]
        }
]

Author's Address

   Barry Fussell (editor)
   Cisco Systems, Inc.
   170 West Tasman Dr.
   San Jose, CA  95134
   USA

   Email: bfussell@cisco.com




Fussell                 Expires December 3, 2016               [Page 24]
