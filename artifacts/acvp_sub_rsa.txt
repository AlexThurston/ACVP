



TBD                                                     A. Vassilev, Ed.
Internet-Draft            National Institute of Standards and Technology
Intended status: Informational                           August 19, 2016
Expires: February 20, 2017


            ACVP RSA Algorithm Validation JSON Specification
                       draft-ietf-acvp-subrsa-00

Abstract

   This document defines the JSON schema for testing RSA algorithm
   implementations for conformance to [FIPS186-4] with the ACVP
   specification.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on February 20, 2017.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Vassilev                Expires February 20, 2017               [Page 1]

Internet-Draft                RSA Alg JSON                   August 2016


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
     1.2.  Testing scope . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     2.1.  Supported RSA Algorithm modes . . . . . . . . . . . . . .   3
     2.2.  Supported RSA Capabilities  . . . . . . . . . . . . . . .   4
     2.3.  Supported RSA Modes Capabilities  . . . . . . . . . . . .   6
       2.3.1.  The keyGen Mode Capabilities  . . . . . . . . . . . .   6
         2.3.1.1.  keyGen With Provable Primes Capabilities  . . . .   6
         2.3.1.2.  keyGen With Probable Primes Capabilities  . . . .   7
         2.3.1.3.  keyGen Full Set Of Capabilities . . . . . . . . .   8
       2.3.2.  The sigGen Mode Capabilities  . . . . . . . . . . . .   9
       2.3.3.  The sigVer Mode Capabilities  . . . . . . . . . . . .  10
       2.3.4.  The legacySigVer Mode Capabilities  . . . . . . . . .  10
   3.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .  10
     3.1.  Test Groups JSON Schema . . . . . . . . . . . . . . . . .  11
     3.2.  Test Vectors JSON Schema  . . . . . . . . . . . . . . . .  12
   4.  Test Vector Responses . . . . . . . . . . . . . . . . . . . .  13
   5.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  15
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  15
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  15
   8.  Normative References  . . . . . . . . . . . . . . . . . . . .  15
   Appendix A.  Example RSA Capabilities JSON Objects  . . . . . . .  16
     A.1.  Example keyGen with Provable Primes Capabilities JSON
           Object  . . . . . . . . . . . . . . . . . . . . . . . . .  16
     A.2.  Example keyGen with Probable Primes Capabilities JSON
           Object  . . . . . . . . . . . . . . . . . . . . . . . . .  16
     A.3.  Example keyGen with Provable Conditional Primes woth
           Probable Factors Capabilities JSON Object . . . . . . . .  17
     A.4.  Example keyGen with Probable Conditional Primes with
           Probable Factors Capabilities JSON Object . . . . . . . .  18
   Appendix B.  Example Test Vectors JSON Objects  . . . . . . . . .  19
     B.1.  Example Test Vectors for keyGen with Provable Primes with
           Provable Prime Factors JSON Objects . . . . . . . . . . .  19
   Appendix C.  Example Test Results JSON Object . . . . . . . . . .  22
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  23

1.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto



Vassilev                Expires February 20, 2017               [Page 2]

Internet-Draft                RSA Alg JSON                   August 2016


   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing RSA
   akgorithm implementations for conformance to [FIPS186-4] using ACVP.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].

1.2.  Testing scope

   The ACVP testing for RSA allows conformance testing for the three
   modes of using the algorithm as specified in [FIPS186-4]: key
   generation, signature generation and signature verification.
   Correspondingly, ACVP allows testing of the five different methods
   for key generation in [FIPS186-4], Appendix B.3.

   ACVP also allows testing of legacy RSA implementations in the
   signature verification mode according to [FIPS186-2].

2.  Capabilities Registration

   ACVP requires cryptographic modules to register their capabilities.
   This allows the cryptographic module to advertise support for
   specific algorithms, notifying the ACVP server which algorithms need
   test vectors generated for the validation process.  This section
   describes the constructs for advertising support of the RSA algorithm
   in all allowed modes to the ACVP server - see [FIPS186-4] for
   details.

2.1.  Supported RSA Algorithm modes

   The following RSA algorithm modes may be advertised by the ACVP
   compliant crypto module:

                +----------------------+-----------------+
                | JSON algorithm value | JSON mode value |
                +----------------------+-----------------+
                | RSA                  | keyGen          |
                |                      | sigGen          |
                |                      | sigVer          |
                |                      | legacySigVer    |
                +----------------------+-----------------+

            Table 1: Supported RSA Algorithm Modes JSON Values



Vassilev                Expires February 20, 2017               [Page 3]

Internet-Draft                RSA Alg JSON                   August 2016


2.2.  Supported RSA Capabilities

   The algorithm capabilities are advertised as JSON objects within the
   'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification for details on the
   registration message.  Each RSA algorithm capability advertised is a
   self-contained JSON object.  The following JSON values are used for
   RSA algorithm capabilities:








































Vassilev                Expires February 20, 2017               [Page 4]

Internet-Draft                RSA Alg JSON                   August 2016


   +-----------+----------------------+-------+-------------+----------+
   | JSON      | Description          | JSON  | Valid       | Optional |
   | Value     |                      | type  | Values      |          |
   +-----------+----------------------+-------+-------------+----------+
   | algorithm | The RSA algorithm to | value | RSA         | No       |
   |           | be validated.        |       |             |          |
   |           |                      |       |             |          |
   | mode      | The mode to be       | value | see Table 1 | No       |
   |           | validated            |       |             |          |
   |           |                      |       |             |          |
   | drbgVal   | The prerequisite     | value | same or     | No       |
   |           | DRBG validation      |       | value       |          |
   |           | number or            |       |             |          |
   |           | implemented in same  |       |             |          |
   |           | implementation.      |       |             |          |
   |           |                      |       |             |          |
   | shaVal    | The prerequisite SHA | value | same or     | No       |
   |           | validation number or |       | value       |          |
   |           | implemented in same  |       |             |          |
   |           | implementation.      |       |             |          |
   |           |                      |       |             |          |
   | drbg2Val  | The prerequisite     | value | same or     | Yes      |
   |           | second DRBG          |       | value       |          |
   |           | validation number or |       |             |          |
   |           | implemented in same  |       |             |          |
   |           | implementation.      |       |             |          |
   |           |                      |       |             |          |
   | sha2Val   | The prerequisite     | value | same or     | Yes      |
   |           | second SHA           |       | value       |          |
   |           | validation number or |       |             |          |
   |           | implemented in same  |       |             |          |
   |           | implementation.      |       |             |          |
   |           |                      |       |             |          |
   | sha3Val   | The prerequisite     | value | same or     | Yes      |
   |           | third SHA validation |       | value       |          |
   |           | number or            |       |             |          |
   |           | implemented in same  |       |             |          |
   |           | implementation.      |       |             |          |
   |           |                      |       |             |          |
   | modeSpecs | Array of mode        | array | See Table 1 | No       |
   |           | capabilities         |       | and Section |          |
   |           | specificaitons.      |       | 2.3         |          |
   +-----------+----------------------+-------+-------------+----------+

              Table 2: RSA Algorithm Capabilities JSON Values






Vassilev                Expires February 20, 2017               [Page 5]

Internet-Draft                RSA Alg JSON                   August 2016


2.3.  Supported RSA Modes Capabilities

   The RSA mode capabilities are advertised as arrays of JSON objects
   within the 'modeSpecs' value of the ACVP registration message - see
   Table 2.  The 'modeSpecs' value is an array, where each array element
   is an array of individual JSON objects corresponding to a particular
   RSA mode defined in this section.  The 'modeSpecs' value is part of
   the 'capability_exchange' element of the ACVP JSON registration
   message.  See the ACVP specification for details on the registration
   message.

   Each RSA mode capabilities are advertised as an array of self-
   contained JSON objects.

2.3.1.  The keyGen Mode Capabilities

   The RSA keyGen mode capabilities are advertised as an array of JSON
   objects within the array of 'modeSpecs' value of the ACVP
   registration message. as part of the 'capability_exchange' element of
   the ACVP JSON registration message.  See the ACVP specification for
   details on the registration message.

   Each RSA keyGen mode capability is advertised as a self-contained
   JSON object.

   The following subsections define the capabilities that may be
   advertised by the ACVP compliant crypto modules.

2.3.1.1.  keyGen With Provable Primes Capabilities

   The following key generation with provable primes capabilities may be
   advertised by the ACVP compliant crypto module:



















Vassilev                Expires February 20, 2017               [Page 6]

Internet-Draft                RSA Alg JSON                   August 2016


   +---------------+---------------+-------+----------------+----------+
   | JSON value    | Description   | JSON  | Valid values   | Optional |
   |               |               | type  |                |          |
   +---------------+---------------+-------+----------------+----------+
   | modProvPrime  | supported RSA | array | any non-empty  | Yes      |
   |               | moduli for    |       | subset of      |          |
   |               | provable      |       | {2048, 3072,   |          |
   |               | prime         |       | 4096}          |          |
   |               | generation -  |       |                |          |
   |               | see           |       |                |          |
   |               | [FIPS186-4],  |       |                |          |
   |               | Appendix      |       |                |          |
   |               | B.3.2         |       |                |          |
   |               |               |       |                |          |
   | hashProvPrime | supported     | array | any non-empty  | Yes      |
   |               | hash          |       | subset of      |          |
   |               | algorithms    |       | {SHA-1,        |          |
   |               | for provable  |       | SHA-224,       |          |
   |               | prime         |       | SHA-256,       |          |
   |               | generation -  |       | SHA-384,       |          |
   |               | see           |       | SHA-512,       |          |
   |               | [FIPS186-4],  |       | SHA-512/224,   |          |
   |               | Appendix      |       | SHA-512/256}   |          |
   |               | B.3.2         |       |                |          |
   |               |               |       |                |          |
   | capProvPrime  | supported     | array | values         | Yes      |
   |               | capabilities  |       | comprised from |          |
   |               | for provable  |       | modProvPrime   |          |
   |               | prime         |       | and            |          |
   |               | generation    |       | hashProvPrime  |          |
   +---------------+---------------+-------+----------------+----------+

    Table 3: Supported RSA keyGen moduli and hash options for provable
                            primes JSON Values

2.3.1.2.  keyGen With Probable Primes Capabilities

   The following key generation with probable primes capabilities may be
   advertised by the ACVP compliant crypto modules:












Vassilev                Expires February 20, 2017               [Page 7]

Internet-Draft                RSA Alg JSON                   August 2016


   +--------------+--------------------+-------+------------+----------+
   | JSON value   | Description        | JSON  | Valid      | Optional |
   |              |                    | type  | values     |          |
   +--------------+--------------------+-------+------------+----------+
   | modProbPrime | supported RSA      | array | any non-   | Yes      |
   |              | moduli for         |       | empty      |          |
   |              | probable prime     |       | subset of  |          |
   |              | generation - see   |       | {2048,     |          |
   |              | [FIPS186-4],       |       | 3072,      |          |
   |              | Appendix B.3.3     |       | 4096}      |          |
   |              |                    |       |            |          |
   | primeTest    | Primality test     | value | tblC2,     | Yes      |
   |              | rounds of Miller-  |       | tblC3      |          |
   |              | Rabin from Table   |       |            |          |
   |              | C.2  or Table C.3  |       |            |          |
   |              | in [FIPS186-4],    |       |            |          |
   |              | Appendix C.3       |       |            |          |
   |              |                    |       |            |          |
   | numRounds    | Number of Miller-  | value | decimal    | Yes      |
   |              | Rabin rounds for   |       |            |          |
   |              | primality testing  |       |            |          |
   +--------------+--------------------+-------+------------+----------+

    Table 4: Supported RSA keyGen moduli and primality test options for
                        probable primes JSON Values

2.3.1.3.  keyGen Full Set Of Capabilities

   The complete list of RSA key generation capabilities may be
   advertised by the ACVP compliant crypto module:

   +---------------+------------------+-------+-------------+----------+
   | JSON Value    | Description      | JSON  | Valid       | Optional |
   |               |                  | type  | Values      |          |
   +---------------+------------------+-------+-------------+----------+
   | fixedPubExp   | supports fixed   | value | yes,no      | Yes      |
   |               | public key       |       |             |          |
   |               | exponent e       |       |             |          |
   |               |                  |       |             |          |
   | fixedPubExpVa | the value of the | value | hex         | Yes      |
   | l             | public key       |       |             |          |
   |               | exponent e in    |       |             |          |
   |               | hex              |       |             |          |
   |               |                  |       |             |          |
   | randPubExp    | supports random  | value | yes,no      | Yes      |
   |               | public key       |       |             |          |
   |               | exponent e       |       |             |          |
   |               |                  |       |             |          |



Vassilev                Expires February 20, 2017               [Page 8]

Internet-Draft                RSA Alg JSON                   August 2016


   | randPQ        | random P and Q   | value | {1,2,3,4,5} | Yes      |
   |               | primes generated |       |             |          |
   |               | as (see          |       |             |          |
   |               | [FIPS186-4] ): 1 |       |             |          |
   |               | - provable       |       |             |          |
   |               | primes (Appendix |       |             |          |
   |               | B.3.2); 2 -      |       |             |          |
   |               | probable primes  |       |             |          |
   |               | (Appendix        |       |             |          |
   |               | B.3.3); 3 -      |       |             |          |
   |               | provable primes  |       |             |          |
   |               | (Appendix        |       |             |          |
   |               | B.3.4); 4 - prov |       |             |          |
   |               | able/probable    |       |             |          |
   |               | primes (Appendix |       |             |          |
   |               | B.3.5); 5 -      |       |             |          |
   |               | probable primes  |       |             |          |
   |               | (Appendix B.3.6) |       |             |          |
   |               |                  |       |             |          |
   | capProvPrimes | capabilities for | array |             | Yes      |
   |               | all supported    |       |             |          |
   |               | moduli and hash  |       |             |          |
   |               | algorithms (see  |       |             |          |
   |               | Table 3)         |       |             |          |
   |               |                  |       |             |          |
   | modProbPrime  | see Table 4      | array | see Table 4 | Yes      |
   |               |                  |       |             |          |
   | primeTest     | see Table 4      | value | see Table 4 | Yes      |
   |               |                  |       |             |          |
   | numRounds     | see Table 4      | value | see Table 4 | Yes      |
   +---------------+------------------+-------+-------------+----------+

               Table 5: RSA keyGen Capabilities JSON Values

2.3.2.  The sigGen Mode Capabilities

   The RSA sigGen mode capabilities are advertised as an array of JSON
   objects within the array of 'modeSpecs' value of the ACVP
   registration message. as part of the 'capability_exchange' element of
   the ACVP JSON registration message.  See the ACVP specification for
   details on the registration message.

   Each RSA sigGen mode capability is advertised as a self-contained
   JSON object.







Vassilev                Expires February 20, 2017               [Page 9]

Internet-Draft                RSA Alg JSON                   August 2016


2.3.3.  The sigVer Mode Capabilities

   The RSA sigVer mode capabilities are advertised as an array of JSON
   objects within the array of 'modeSpecs' value of the ACVP
   registration message. as part of the 'capability_exchange' element of
   the ACVP JSON registration message.  See the ACVP specification for
   details on the registration message.

   Each RSA sigVer mode capability is advertised as a self-contained
   JSON object.

2.3.4.  The legacySigVer Mode Capabilities

   The RSA legacySigVer mode capabilities are advertised as an array of
   JSON objects within the array of 'modeSpecs' value of the ACVP
   registration message. as part of the 'capability_exchange' element of
   the ACVP JSON registration message.  See the ACVP specification for
   details on the registration message.

   Each RSA legacySigVer mode capability is advertised as a self-
   contained JSON object.

3.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation session would require multiple test vector
   sets to be downloaded and processed by the ACVP client.  Each test
   vector set represents an individual algorithm, such as Hash_DRBG,
   etc.  This section describes the JSON schema for a test vector set
   used with DRBG algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.  The following table
   describes the JSON elements at the top level of the hierarchy.















Vassilev                Expires February 20, 2017              [Page 10]

Internet-Draft                RSA Alg JSON                   August 2016


   +-------------+---------------------------------------------+-------+
   | JSON Value  | Description                                 | JSON  |
   |             |                                             | type  |
   +-------------+---------------------------------------------+-------+
   | version     | Protocol version identifier                 | value |
   |             |                                             |       |
   | vectorSetId | Unique numeric identifier for the vector    | value |
   |             | set                                         |       |
   |             |                                             |       |
   | algorithm   | The RSA algorithm used for the test         | value |
   |             | vectors.  See Section 2.1 for possible      |       |
   |             | values.                                     |       |
   |             |                                             |       |
   | mode        | The RSA algorithm mode used for the test    | value |
   |             | vectors.  See Section 2.1 for possible      |       |
   |             | values.                                     |       |
   |             |                                             |       |
   | testGroups  | Array of test group JSON objects, which are | array |
   |             | defined in Section 3.1                      |       |
   +-------------+---------------------------------------------+-------+

                      Table 6: Vector Set JSON Object

3.1.  Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the RSA JSON elements of the Test Group
   JSON object.


















Vassilev                Expires February 20, 2017              [Page 11]

Internet-Draft                RSA Alg JSON                   August 2016


   +-----------+---------------------------+----------------+----------+
   | JSON      | Description               | JSON type      | Optional |
   | Value     |                           |                |          |
   +-----------+---------------------------+----------------+----------+
   | randPQ    | RSA prime generation      | value          | No       |
   |           | method - see Table 5      |                |          |
   |           |                           |                |          |
   | primeTest | Miller-Rabin constraint   | value          | No       |
   |           | from Table C.2 or C.3     |                |          |
   |           |                           |                |          |
   | numRounds | Number of Miller-Rabin    | value          | Yes      |
   |           | rounds                    |                |          |
   |           |                           |                |          |
   | pubExp    | Fixed or random public    | hex value or   | Yes      |
   |           | exponent                  | "random"       |          |
   +-----------+---------------------------+----------------+----------+

                      Table 7: Test Group JSON Object

3.2.  Test Vectors JSON Schema

   Each test group contains an array of one or more test vectors.  Each
   test vector is a JSON object that represents a single test case to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each DRBG test vector.


























Vassilev                Expires February 20, 2017              [Page 12]

Internet-Draft                RSA Alg JSON                   August 2016


   +------------+-----------------------------------+-------+----------+
   | JSON Value | Description                       | JSON  | Optional |
   |            |                                   | type  |          |
   +------------+-----------------------------------+-------+----------+
   | testCaseId | Unique numeric identifier for the | value | No       |
   |            | test case                         |       |          |
   |            |                                   |       |          |
   | modRSA     | RSA modulus                       | value | No       |
   |            |                                   |       |          |
   | hashAlg    | the hash algorithm                | value | Yes      |
   |            |                                   |       |          |
   | e          | the public exponent               | hex   | Yes      |
   |            |                                   | value |          |
   |            |                                   |       |          |
   | pRand      | the random for P, testing         | hex   | Yes      |
   |            | probable primes according to      | value |          |
   |            | [FIPS186-4], Section B.3.3        |       |          |
   |            |                                   |       |          |
   | qRand      | the random for Q, if applicable,  | hex   | Yes      |
   |            | testing probable primes according | value |          |
   |            | to [FIPS186-4], Section B.3.3     |       |          |
   +------------+-----------------------------------+-------+----------+

                 Table 8: RSA KeyGen Test Case JSON Object

4.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the resonse vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

   +-------------+---------------------------------------------+-------+
   | JSON Value  | Description                                 | JSON  |
   |             |                                             | type  |
   +-------------+---------------------------------------------+-------+
   | version     | Protocol version identifier                 | value |
   |             |                                             |       |
   | vectorSetId | Unique numeric identifier for the vector    | value |
   |             | set                                         |       |
   |             |                                             |       |
   | testResults | Array of JSON objects that represent each   | array |
   |             | test vector result, which uses the same     |       |
   |             | JSON schema as defined in Section 3.2       |       |
   +-------------+---------------------------------------------+-------+

                 Table 9: Vector Set Response JSON Object




Vassilev                Expires February 20, 2017              [Page 13]

Internet-Draft                RSA Alg JSON                   August 2016


   Each test group contains an array of one or more test vectors.  Each
   test vector is a JSON object that represents a single test case to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each RSA keyGen test vector.

   +------------+-----------------------------------+-------+----------+
   | JSON Value | Description                       | JSON  | Optional |
   |            |                                   | type  |          |
   +------------+-----------------------------------+-------+----------+
   | testCaseId | Unique numeric identifier for the | value | No       |
   |            | test case                         |       |          |
   |            |                                   |       |          |
   | modRSA     | The RSA modulus                   | value | No       |
   |            |                                   |       |          |
   | e          | the public exponent               | hex   | No       |
   |            |                                   | value |          |
   |            |                                   |       |          |
   | xP1        | the prime factor p1 for Primes    | hex   | Yes      |
   |            | with Conditions - see             | value |          |
   |            | [FIPS186-4], Appendix B.3.1, if   |       |          |
   |            | applicable                        |       |          |
   |            |                                   |       |          |
   | xP2        | the prime factor p2 for Primes    | hex   | Yes      |
   |            | with Conditions - see             | value |          |
   |            | [FIPS186-4], Appendix B.3.1, if   |       |          |
   |            | applicable                        |       |          |
   |            |                                   |       |          |
   | xP         | the random number used in Step    | hex   | Yes      |
   |            | Step 3 of the algorithm in        | value |          |
   |            | [FIPS186-4], Appendix C.9         |       |          |
   |            | "Compute a Probable Prime Factor  |       |          |
   |            | Based on Auxiliary Primes" to     |       |          |
   |            | generate the prime P, if          |       |          |
   |            | applicable                        |       |          |
   |            |                                   |       |          |
   | p          | the private prime factor p        | hex   | No       |
   |            |                                   | value |          |
   |            |                                   |       |          |
   | xQ1        | the prime factor q1 for Primes    | hex   | Yes      |
   |            | with Conditions - see             | value |          |
   |            | [FIPS186-4], Appendix B.3.1, if   |       |          |
   |            | applicable                        |       |          |
   |            |                                   |       |          |
   | xQ2        | the prime factor q2 for Primes    | hex   | Yes      |
   |            | with Conditions - see             | value |          |
   |            | [FIPS186-4], Appendix B.3.1, if   |       |          |
   |            | applicable                        |       |          |
   |            |                                   |       |          |



Vassilev                Expires February 20, 2017              [Page 14]

Internet-Draft                RSA Alg JSON                   August 2016


   | xQ         | the random number used in Step    | hex   | Yes      |
   |            | Step 3 of the algorithm in        | value |          |
   |            | [FIPS186-4], Appendix C.9         |       |          |
   |            | "Compute a Probable Prime Factor  |       |          |
   |            | Based on Auxiliary Primes" to     |       |          |
   |            | generate the prime Q, if          |       |          |
   |            | applicable                        |       |          |
   |            |                                   |       |          |
   | q          | the private prime factor q        | hex   | No       |
   |            |                                   | value |          |
   |            |                                   |       |          |
   | n          | the modulus                       | hex   | No       |
   |            |                                   | value |          |
   |            |                                   |       |          |
   | d          | the private exponent d            | hex   | No       |
   |            |                                   | value |          |
   +------------+-----------------------------------+-------+----------+

            Table 10: RSA KeyGen Test Case Results JSON Object

5.  Acknowledgements

   TBD...

6.  IANA Considerations

   This memo includes no request to IANA.

7.  Security Considerations

   Security considerations are addressed by the ACVP specification.

8.  Normative References

   [ACVP]     authSurName, authInitials., "ACVP Specification", 2016.

   [FIPS186-2]
              NIST, "FIPS PUB 186-2 Digital Signature Standard", October
              2001, <http://csrc.nist.gov/publications/fips/archive/
              fips186-2/fips186-2-change1.pdf>.

   [FIPS186-4]
              NIST, "FIPS PUB 186-4 Digital Signature Standard", July
              2013, <http://nvlpubs.nist.gov/nistpubs/FIPS/
              NIST.FIPS.186-4.pdf>.






Vassilev                Expires February 20, 2017              [Page 15]

Internet-Draft                RSA Alg JSON                   August 2016


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

Appendix A.  Example RSA Capabilities JSON Objects

   This appendix contains example JSON object advertising support for
   the verious RSA modes:keyGen, sigGen, sigVer, legacySigVer,
   compRSASP1.

A.1.  Example keyGen with Provable Primes Capabilities JSON Object

   The following is an example JSON object advertising support for RSA
   keyGen with provable primes according to [FIPS186-4], Appendix B.3.2.
   See also Section 2.3.1.3.

   {
      "algorithm": "RSA",
      "mode": "keyGen",
      "drbgVal": "123456",
      "shaVal": "7890",
      "modeSpecs" :
      [
         "fixedPubExp" : yes,
         "fixedPubExpVal" : "100001",
         "randPQ" : 1,
         {
             "capsProvPrime" :
              [
                  {   "modProvPrime" : 2048,
                      "hashProvPrime" : [SHA-1, SHA-224, SHA-256, SHA-512]},
                  {   "modProvPrime" : 3072,
                      "hashProvPrime" : [SHA-1, SHA-224, SHA-256, SHA-512]},
                  {   "modProvPrime" : 4096,
                      "hashProvPrime" : [SHA-1, SHA-224, SHA-256, SHA-512]},
              ]
         }
      ]
   }

A.2.  Example keyGen with Probable Primes Capabilities JSON Object

   The following is an example JSON object advertising support for RSA
   keyGen with probable primes according to [FIPS186-4], Appendix B.3.3.
   See also Section 2.3.1.3.





Vassilev                Expires February 20, 2017              [Page 16]

Internet-Draft                RSA Alg JSON                   August 2016


      {
         "algorithm": "RSA",
         "mode": "keyGen",
         "drbgVal": "123456",
         "shaVal": "7890",
         "modeSpecs" :
         [
            "fixedPubExp" : yes,
            "fixedPubExpVal" : "100001",
            "randPQ" : 2,
            {
                {   "modProbPrime" : [2048,3072,4096],
                    "primTest" : "tblC2",
                    "numRounds" : 10
                }
            }
         ]
      }

A.3.  Example keyGen with Provable Conditional Primes woth Probable
      Factors Capabilities JSON Object

   The following is an example JSON object advertising support for RSA
   keyGen with primes with conditions according to [FIPS186-4],
   Appendix B.3.5.  See also Section 2.3.1.3.


























Vassilev                Expires February 20, 2017              [Page 17]

Internet-Draft                RSA Alg JSON                   August 2016


   {
      "algorithm": "RSA",
      "mode": "keyGen",
      "drbgVal": "123456",
      "shaVal": "7890",
      "modeSpecs" :
      [
         "fixedPubExp" : yes,
         "fixedPubExpVal" : "100001",
         "randPQ" : 4,
         {
             "capsProvPrime" :
              [
                  {   "modProvPrime" : 2048,
                      "hashProvPrime" : [SHA-1, SHA-224, SHA-256, SHA-512]},
                  {   "modProvPrime" : 3072,
                      "hashProvPrime" : [SHA-1, SHA-224, SHA-256, SHA-512]},
                  {   "modProvPrime" : 4096,
                      "hashProvPrime" : [SHA-1, SHA-224, SHA-256, SHA-512]},
              ]
              "modProbPrime" : [2048,3072,4096],
              "primTest" : "tblC3",
              "numRounds" : 25
         }
      ]
   }

A.4.  Example keyGen with Probable Conditional Primes with Probable
      Factors Capabilities JSON Object

   The following is an example JSON object advertising support for RSA
   keyGen with primes with conditions according to [FIPS186-4],
   Appendix B.3.6.  See also Section 2.3.1.3.


















Vassilev                Expires February 20, 2017              [Page 18]

Internet-Draft                RSA Alg JSON                   August 2016


      {
         "algorithm": "RSA",
         "mode": "keyGen",
         "drbgVal": "123456",
         "shaVal": "7890",
         "modeSpecs" :
         [
            "randPubExp" : yes,
            "randPQ" : 5,
            {
                 "modProbPrime" : [2048,3072,4096],
                 "primTest" : "tblC3",
                 "numRounds" : 25
            }
         ]
      }

Appendix B.  Example Test Vectors JSON Objects

   This appendix contains example JSON objects for test vectors sent
   from the ACVP server to the crypto module.

B.1.  Example Test Vectors for keyGen with Provable Primes with Provable
      Prime Factors JSON Objects

   {
     "version": "0.2",
      "vectorSetId": 1133,
      "algorithm": "RSA",
      "mode": "keyGen",
      "testGroups" : [
              {
                 "pubExp" : "random",
                 "randPQ" : 3,
                 "primeTest" : "tblC3",
                 "numRounds" : 25,
                 "tests" : [
                    {
                      "testCaseId" : 1111,
                      "modRSA" : 2048,
                      "hashAlg" : "SHA-256"
                    }
                    {
                      "testCaseId" : 1112,
                      "modRSA" : 2048,
                      "hashAlg" : "SHA-512"
                    }
                    {



Vassilev                Expires February 20, 2017              [Page 19]

Internet-Draft                RSA Alg JSON                   August 2016


                      "testCaseId" : 1113,
                      "modRSA" : 3072,
                      "hashAlg" : "SHA-256"
                    }
                    {
                      "testCaseId" : 1114,
                      "modRSA" : 3072,
                      "hashAlg" : "SHA-512"
                    }
                 ]
             }
             {
                 "pubExp" : "random",
                 "randPQ" : 1,
                 "primeTest" : "tblC3",
                 "numRounds" : 25,
                 "tests" : [
                    {
                      "testCaseId" : 1115,
                      "modRSA" : 2048,
                      "hashAlg" : "SHA-256"
                    }
                    {
                      "testCaseId" : 1116,
                      "modRSA" : 2048,
                      "hashAlg" : "SHA-512"
                    }
                    {
                      "testCaseId" : 1117,
                      "modRSA" : 3072,
                      "hashAlg" : "SHA-256"
                    }
                    {
                      "testCaseId" : 1118,
                      "modRSA" : 3072,
                      "hashAlg" : "SHA-512"
                    }
                 ]
             }
             {
                 "pubExp" : "random",
                 "randPQ" : 2,
                 "primeTest" : "tblC2",
                 "tests" : [
                    {
                      "testCaseId" : 1119,
                      "modRSA" : 2048,
                      "e" : "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000df28ab",



Vassilev                Expires February 20, 2017              [Page 20]

Internet-Draft                RSA Alg JSON                   August 2016


                      "pRand" : "e021757c777288dacfe67cb2e59dc02c70a8cebf56262336592c18dcf466e0a4ed405318ac406bd79eca29183901a557db556dd06f7c6bea175dcb8460b6b1bc05832b01eedf86463238b7cb6643deef66bc4f57bf8ff7ec7c4b8a8af14f478980aabedd42afa530ca47849f0151b7736aa4cd2ff37f322a9034de791ebe3f51",
                      "qRand" : "ed1571a9e0cd4a42541284a9f98b54a6af67d399d55ef888b9fe9ef76a61e892c0bfbb87544e7b24a60535a65de422830252b45d2033819ca32b1a9c4413fa721f4a24ebb5510ddc9fd6f4c09dfc29cb9594650620ff551a62d53edc2f8ebf10beb86f483d463774e5801f3bb01c4d452acb86ecfade1c7df601cab68b065275"
                    }
                    {
                      "testCaseId" : 1120,
                      "modRSA" : 2048,
                      "ea4cf",
                      "pRand : "e534f4a4eb86ff9ace08a0b446faf3e20c22a0166057507e4f5f07332d5c0878a50798857d5e9946e3f8ef8a1021481bb0c94631f9ad8427df620ec9ca585cab3082222279f41bc40e2ccdc160dbc410c52662699ae16b27b2c9d2bf14e99083920a448ba4e5d3d11e1ab7777613959c07fb213be26f2cb7ea8a759af082f6c5"
                    }
                    {
                      "testCaseId" : 1121,
                      "modRSA" : 3072,
                      "ec97",
                      "pRand" : "b9c53dd71792a98fd35eaa569079dfc1f0f6dad9a4a50ca589cccdd80b7810c00c4c0b0a74d3c6ead42c2fa3478c5bfde09ffcad4cb793564fc83977ef1de96a11b16e5eb58590720715c10ac620b862cee5081934c5ddd3e3765fb848781af882558cc4f79663d7fff0263401adc832bc29d396a0c9916ed96005b79bf0dbead4158a3139c855f8d9ae83433410ef5fbdbbe9082ccb3b266c374a08ecca3a2d51bca0495766109ef471c9e07e098a809c9fdbdcada5aaeb11dfa36ca59991b5",
                      "qRand" : "ed98c73529938fb891869c7ecc7de069af00abc5896e4ec1b32528feac69f29bfc93c707aec4921ac8191e7dde69272b97eebcd568641edf7dde60632ed075b93712870e4eccbeceefa06bade9d4fe2dc7c8ce6277371f3471f42d201831e9f95c8a6ac3d63dd47058e13b7d8e420d9790a17bc58470b5c130f84fdc39a7cfac3453f3706cc4118900710bed26deca871bfee3aa6c59263d314b969ef228b7d08ecec99acaba3466d25b99ecfa48388cc53b19ca74deefc6dfd3d1a80804f4c5"
                    }
                    {
                      "testCaseId" : 1122,
                      "modRSA" : 3072,
                      "ea7dd",
                      "pRand : "0c5742407c0bac4f474edda6f92e42bd36ade552d947eb8bc5ac97c23efac563de8262ecc1e542cd489fcd33f3dcadcf900c8b0acd28abb1d25318c4f7dae3fa4b281c3b89a77d06db36115ff10496005b45fab68aa45e5f40296570ff97081007d907aa74b56f59841f6069900e14f5f2cf508b9094f3ee37aa4c0a43e38922dc3fce63d6d1e392d1a70da4e5ba7083188ca78693bb7e953352aeb76f3f5905613a10a04c791560717316e2a2c13bb4522aeb86680355bec7dda0b3674e10e9"
                    }
                 ]
             }
             {
                 "pubExp" : "random",
                 "randPQ" : 2,
                 "primeTest" : "tblC3",
                 "tests" : [
                    {
                      "testCaseId" : 1123,
                      "modRSA" : 2048,
                      "ea7f1",
                      "pRand" : "ea4fe1b753e17f7a99a648c1d111d7599eda7ed85b14c974df5d3f1a39e9b3bc2ce3d4e9ab70a2d184c4ce56fbe18c97b09fd47bb39a470ef2bfa5217e1aa8493326dfd9cc9e73da683691cef7d6ded642bfb56c919f8f54ea08de9bffa2f155e8a3a6746302347fb2f581be2deb55b057c3ac371d867c710a03cb9c1d218223",
                      "qRand" : "c8435496e852f54eac36a1b8e29e5258ba383f3cd453293d98b9d565e72b03e44ead75ea341615062b504c3350b2404f53401f19b88b6a23bca4a19687300522489dbe3beab828e438b28b5a10e8c0da4b38162b458bb7f92804f1969fa3a1cd92f9b16b358047bcc1858e21ab787738cc311abd6bbdf138b352b26d206614cf"
                    }
                    {
                      "testCaseId" : 1124,
                      "modRSA" : 2048,
                      "ef01",
                      "pRand : "0456038077312d974418bbe2432387d97b55158496263213df19a9ff7f888cdcf3dbae9bba8cdd5d8b6799de99cfb37d1bad0173fc38540a0d0e098ebdf1718b92c9361880af2025382ffb20fc094eced508b097f455f357a2b35a562be410cf44f4c44d5bc4bf0b57b43af86cd7cf37aa9edffa6d23132b1eeece0f09691645"
                    }
                    {
                      "testCaseId" : 1125,
                      "modRSA" : 3072,
                      "efe8ed9",
                      "pRand" : "f26e1240a0a1b954430793b7b3e3bbf46b1cbc022e29444099c3edcbb66e9ecab3414c80275ca523ea269c085758582917e6cdb2b42f819011a9ddc1e1c25788c507e9dd8fb0bb3fb3d1103e6b0dff333394956aae41855584ec4119e4a3ab804764caa88db6d10c503402f3280aa573ef9066a2ca17a31aafe9bf0bcd412302505e6feb3fe7538bab064d415af979a32cc0b9e298d0b8bc7d1eb3f70e02004257c360bca9549a5bbedee3833ae23c8e65b430e8acb5035a7b410d55a2a5687b",
                      "qRand" : "a57a699bc759f6e71049eeef16011b2b1549cb8b27a822ac7e45178f3f80680390e1ee99f5f531f5e44a8b570aece9aa0682cff9202cff065a704972748c117e9be5439f93198406bd33c7dded7956e692b531ee7c92133a1e6884a2a48459f55551f406e840461ef18e4c613906186f1ce95a9ba63f4f7673dd552678fba5b0672ac921de31eb7213c14387dd2a7b47c0dbdc088cd8b16f3b552c3fa95631f79cad18a98dc86e22728aa533db8e767396d6eceddb525dceb0baa1cecd57734b"



Vassilev                Expires February 20, 2017              [Page 21]

Internet-Draft                RSA Alg JSON                   August 2016


                    }
                    {
                      "testCaseId" : 1126,
                      "modRSA" : 3072,
                      "e
                      "pRand : "aad0d971253463ae131e900189b1e978ca55c58dfa3797995f69e2ef147246402e78d3ad703f298943d6e02709289ab846deb65731cffa735239d787abfa6e26f0e295325efe9eab616422cdcbe391ce531bf5508b9d45cf5dc5bd2389c31cdf658cf1ac3ec714978da665d1867ac6846e629f3552172a8e2b879a2c4f326298d9c379cf97c1ddadfc0d8c4c112a0f6e48195131b756603b8052e2b25d010851749ea37cdbaa9490ea686546ee1688445673304d4df5024d834c9d9da965c7cb"
                    }
                 ]
             }
     ]
   }

Appendix C.  Example Test Results JSON Object

   The following is a example JSON object for RSA keyGen test results
   sent from the crypto module to the ACVP server.



































Vassilev                Expires February 20, 2017              [Page 22]

Internet-Draft                RSA Alg JSON                   August 2016


                {
                    "version": "0.2",
                    "vectorSetId": 1133,
                    "testResults": [
                        {
                            "testCaseId": 1815,
                            "modRSA" : 2048,
                           "e" : "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
                           "xP1" : "17696f1a94a71f15c8de3ea976",
                           "xP2  : "1c12a4901516140c7d88feca0e",
                           "xP" : "d6a293f429b30bd007fbc23286d18e2dba03cd349eb1ee89b66233f7f351b4c4d708a8e2d930e0650ba8943afad46215d63894abd345a222ce72f7c5348ff8fd2056437cc34434bc09a7aea879f718995e69a58324c2d9710469492ee4c1a24578b5ec2cae9510bd492098e5cbe2b7a099c089255ad19b5da06fae9aca8eb886",
                           "p" : "d6a293f429b30bd007fbc23286d18e2dba03cd349eb1ee89b66233f7f351b4c4d708a8e2d930e0650ba8943afad46215d63894abd345a222ce72f7c5348ff8fd2056437cc34434bc09a7aea879f718995e69a58324c2d9710469492ee4c1a24578b5ec2caeb18b10c28a091c0c6556cb239ff65d2fd8b9c8f0492ae0ccfa379b",
                           "xQ1" : "13c2de6106792e56b9ef5c5946",
                           "xQ2 = "18f3ca8d5ae5e2c3892bd3dea8",
                           "xQ" : "ef3b8e61b5bc4d99ebc95efe34c42ba26ee69727c18336247890bdcb1062b7c98fb87a6e18fc5a0ebbc61ca791a2aec3091315a07dd8a68f096d799a9cd51b694f978367f6074720f5c610ed568c4cd4182522aac9baab7a57525f2b2398cd5c57df90937a637e9741d2221aa80b6d9b4225a88bcdb3adaf0a4657c5cc34376a",
                           "q" : "ef3b8e61b5bc4d99ebc95efe34c42ba26ee69727c18336247890bdcb1062b7c98fb87a6e18fc5a0ebbc61ca791a2aec3091315a07dd8a68f096d799a9cd51b694f978367f6074720f5c610ed568c4cd4182522aac9baab7a57525f2b2398cd5c57df90937a72a00c735bce431eb8621850e2a91b8b6833e23c14cccd38f83b67",
                           "n" : "c893b6f9263e160049efe6fe4375dcfb568ab0c468ee4e8ed07be9975a0e867259f97873179301b6188d915f0012a64340bb7df22f2b7652e00a8b1e4fcaa7d6d712e31e404b941ad280fc154e6838d418b42a55113fb9fe47cc8860cad2e06685a10e645b3e8b5a8fd7547b8cf78ebb6eb7e476ed277d346e516fa634a7918e186deda0ba9b5f19db2e0a001c9f519083b9a9e0bf9585aa44d972f5c69823ecb372785b0b42b3aa131bb52e55a1306eda9747a4c4db377709d7b6321f287deff9f7fe7d99e3a531c3ac21fa86bf38d0bc6fe4bceec07759480b82e5306a36e748c05a1476b03447215f5f98d265541e632f22bf728af14275b9695ee9a5185d",
                           "d" : "216df3d4310a59000c52a67fb5e8fa29e3c1c820bc27b7c27814a6ee8f026bbdb9a994132e9880490417983a80031bb5e01f3fa85d31e90dd001c1da62a1c6a3ce8325da600c98af23157f58e266b42359735c6382dff4550bf76c1021cdd011164582660f351739c2a3e369ecd3ed1f3d1ea613d2313f88bd0d929bb37142ecb86d4c8c79dcab9d513c26cd3ad6eea00f228b960fe5657f58fbc033207b493a621d8e2c59839433b74780b74c31afee548c9a39689f7d20dda936230cf5e6ec41ac5e997ac406e3760a65bb73b4a33b36502f6d2ab5d312520d4f173157f68b940724e362420186fc94415ef13699df27c76b3673e1ab43e18f3d9d7b4870e5"
                        },
                        {
                            "testCaseId": 1816,
                            "modRSA" : 2048,
                           "e" : "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001",
                           "xP1" : "1d694d26b9986630e676ddd418",
                           "xP2  : "123b99115d0e2c6e43a9bbe5b4",
                           "xP" : "faac77246574bcb7c16330dc0f7c15da4c5fe0652f779a6eac74863fbcfc04c6609db531e307e0bc607814c785770f2c96c5dfcfb591477760eb64dc3b7b9001107387c314c2c9b26c8b3f21efd520792e8416d3b1889dc58454ac7bf391980a911435027f0e3e42ea83f711d6fe106a1a82cd96acc364011f96a7466aa7e28c",
                           "p" : "faac77246574bcb7c16330dc0f7c15da4c5fe0652f779a6eac74863fbcfc04c6609db531e307e0bc607814c785770f2c96c5dfcfb591477760eb64dc3b7b9001107387c314c2c9b26c8b3f21efd520792e8416d3b1889dc58454ac7bf391980a911435027f15a779a8a54eab84d1773a1942a6185827f636d85bef4ddd6a8dad",
                           "xQ1" : "1b570d6a0788ae2f03ef9f2212",
                           "xQ2 = "1aa939539068a64c2d4053e6b4",
                           "xQ" : "d336bc4d1f4864f67e5ecc05bba43b33fdbc9d5024108335f4676af975b74068993a24b020c46e5eb954ef896ae97a4d3197a27cecd9c68f76294be313ce29220ef6a9fea0046d26142bb072293ccf61b8bc08c6963a82bebcdf8ee5a5472dcaf88fd2a067b06936d70b9729c1454458d8545798ecdac0a90eb2bc69f5c95448",
                           "q" : "d336bc4d1f4864f67e5ecc05bba43b33fdbc9d5024108335f4676af975b74068993a24b020c46e5eb954ef896ae97a4d3197a27cecd9c68f76294be313ce29220ef6a9fea0046d26142bb072293ccf61b8bc08c6963a82bebcdf8ee5a5472dcaf88fd2a067b3227e77903a28e6f52ab54f44c60410301afb74dccfb784fdd507",
                           "n" : "ced1bef64d4cf46b28635784d33d3479998ec8db10d0f8c356932c0e02b19f117ce5cf9ddc58518481f308eb8faeb19a5e2444302f4a84a5c2f87f0e581882beda044f9f15114ce602da7731c7442259d0e0748eaae292b0096c807b631cb7ed3ab49364dbfc543dd7b28df9bf1c5356a072144856f4558625e3745bc82fa2b677af5e2e3ad5082b68baf0e0d274756ce3dc946262c7cbd82710c18238a1c931f79fcab49d12172d40b4bfee06e4141ed836bbd043c4b21682dca17702cd3277c523fdad292be2077c30f08640ada7ea2ea0dcf5171968e2be1076bea27fce4f7a1a256c5fad1eb722efa305a1dbb675b76f336c7e79a8d9a3244160edc3d0bb",
                           "d" : "0001363968380bbb62e559afa99793443b722ae4026496d4de50238c9e88658209183240852c455834ee8dfdff635822b244daf18b56bb990b5f991525805ea46579e18c95e209b7e9a11aa6982412c220c4988c1649ea09f1fe1c24a4947016a3cd3441a8d5a124dd37e653eea2b007ccfa23b0fabb87b2f896403eee4abdfcb612489ff77b19a8c012fd62709c1a621c2bca74578f3f5045fd0352351b53ca723a0a71deca071ea4fc955f040c9db8b23ee586f0be8147f4cf8cdc5c37310e04f0f3a5be3b705b906ae8cc189f22ca714c79c4a24394bdd7cfe37a759118e973cd74e3b7ca7d8c01928284a4c52c5a726f03eca70b7a26e954178d2bfc250d"
                        }
                    ]
                }

Author's Address

   Apostol Vassilev (editor)
   National Institute of Standards and Technology
   100 Bureau Dr.
   Gaithersburg, MD  20899
   USA

   Email: apostol.vassilev@nist.gov





Vassilev                Expires February 20, 2017              [Page 23]
