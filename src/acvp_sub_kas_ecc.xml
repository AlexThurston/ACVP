<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subkasecc-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="Sym Alg JSON">ACVP KAS ECC JSON Specification</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Barry Fussell" initials="B.F." role="editor"
            surname="Fussell">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>bfussell@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="June" year="2016" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>TBD</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>acvp</keyword>
    <keyword>crypto</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document defines the JSON schema for using KAS ECC algorithms with the ACVP specification.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically
              verify the cryptographic implementation of a software or hardware crypto module.
              The ACVP specification defines how a crypto module communicates with an ACVP
              server, including crypto capabilities negotiation, session management, authentication,
	      vector processing and more.  The ACVP specification does not define algorithm specific
	      JSON constructs for performing the crypto validation.  A series of ACVP sub-specifications
	      define the constructs for testing individual crypto algorithms.  Each sub-specification
	      addresses a specific class of crypto algorithms.  This sub-specification defines the JSON
	      constructs for testing KAS ECC algorithms using ACVP.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted in
	<xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

<section anchor="caps_reg" title="Capabilities Registration">
    <t>ACVP requires crypto modules to register their capabilities.  This allows the crypto
	module to advertise support for specific algorithms, notifying the ACVP server which
	algorithms need test vectors generated for the validation process.  This section
    describes the constructs for advertising support of KAS ECC algorithms to the ACVP server.</t>

    <t>The algorithm capabilities are advertised as JSON objects within the 'algorithms'
	value of the ACVP registration message.  The 'algorithms' value is an array, where each
	array element is an individual JSON object defined in this section.  The 'algorithms'
	value is part of the 'capability_exchange' element of the ACVP JSON registration message.
	See the ACVP specification for details on the registration message.

	Each KDF algorithm capability advertised is a self-contained JSON object.</t>

	<section anchor="prereq_algs" title="Required Prerequisite Algorithms for KAS ECC Validations">
	    <t>Some algorithm implementations rely on other cryptographic primitives.
	    For example, IKEv2 uses an underlying SHA algorithm. Each of these underlying algorithm primitives 
	    must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</t>

	    <texttable anchor="rereqs_table" title="Required Prerequisite Algorithms JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>algorithm</c>
          <c>a prerequisite algorithm</c>
          <c>value</c>
          <c>CCM, CMAC, DRBG, ECDSA, HMAC, SHA</c>
          <c>No</c>
          <c/><c/><c/><c/><c/>

          <c>valValue</c>
          <c>algorithm validation number</c>
          <c>value</c>
          <c>actual number or "same"</c>
          <c>No</c>
          <c/><c/><c/><c/><c/>

          <c>prereqAlgVal</c>
          <c>prerequistie algorithm validation</c>
          <c>object with algorithm and valValue properties</c>
          <c>see above</c>
          <c>Yes</c>
          <c/><c/><c/><c/><c/>

	  </texttable>
	  </section>


	<section anchor="cap_ex" title="KAS ECC Algorithm Capabilities JSON Values">
	<t>Each algorithm capability advertised is a self-contained JSON object using the following values.</t>
        <texttable anchor="caps_table" title="KAS ECC Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>

          <c>algorithm</c>
	  <c>The algorithm under test</c>
          <c>value</c>
          <c>KAS ECC</c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>prereqVals</c>
          <c>Prerequistie algorithm validations</c>
          <c>array of prereqAlgVal objects</c>
          <c>See <xref target="prereq_algs" /></c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

	  <c>scheme</c>
	  <c>Array of supported key agreement schemes each having their own capabilities</c>
	  <c>value</c>
	  <c>See <xref target="supported_schemes"/></c>
	  <c>No</c>
	  <c/><c/><c/><c/><c/>

	  <c>functions</c>
	  <c>Type of function supported</c>
	  <c>array</c>
	  <c>See <xref target="supported_functions" /></c>
	  <c>No</c>
	  <c/><c/><c/><c/><c/>

        </texttable>


	<t>Note: Some optional values are required depending on the algorithm.  Failure to provide these values will
	result in the ACVP server returning an error to the ACVP client during registration.</t>
	</section>


	<section anchor="comp_cap_ex" title="KAS ECC Component Test Capabilities JSON Values">
	<t>Each algorithm capability advertised is a self-contained JSON object using the following values.</t>
        <texttable anchor="comp_caps_table" title="KAS ECC Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>

          <c>primitive</c>
	  <c>Sec 5.7.1.2 ECCDH Component Primitive</c>
	  <c>value</c>
	  <c>Yes or No</c>	
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>ecdsa</c>
	  <c>Array of ECDSA curves values supported</c>
	  <c>array</c>
	  <c>See <xref target="supported_curves"/></c>	
          <c>Yes</c>

        </texttable>
	</section>

	<section anchor="scheme_cap_ex" title="KAS ECC Scheme Capabilities JSON Values">
	<t>All other schemem capability advertised is a self-contained JSON object using the following values.</t>
        <texttable anchor="scheme_caps_table" title="KAS ECC Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>

          <c>withKDF</c>
	  <c>Key confirmation is not supported</c>
	  <c>value</c>
	  <c>Yes or No</c>	
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>role</c>
	  <c>Roles supported for key agreement</c>
	  <c>array</c>
	  <c>initiator and/or responder</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>kdf</c>
	  <c>Select the KDF being tested</c>
	  <c>array</c>
	  <c>concatenation and/or ASN1</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>keyConf</c>
	  <c>Select the if Key Confirmation is supported</c>
	  <c>value</c>
	  <c>Yes or No</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>nonce</c>
	  <c>Select the nonce types supported</c>
	  <c>array</c>
	  <c>random, timestamp, increasing, combination</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>keyConfRole</c>
	  <c>Select the key confirmation roles supported</c>
	  <c>array</c>
	  <c>provider and/or recipient</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>keyConfType</c>
	  <c>Select the key confirmation type supported</c>
	  <c>array</c>
	  <c>unilateral and/or bilateral</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>


          <c>parmSetEB</c>
	  <c>Define the EB parameter set</c>
	  <c>value</c>
	  <c>See <xref target="parameter_set"/></c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>parmSetEC</c>
	  <c>Define the EC parameter set</c>
	  <c>value</c>
	  <c>See <xref target="parameter_set"/></c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>parmSetED</c>
	  <c>Define the ED parameter set</c>
	  <c>value</c>
	  <c>See <xref target="parameter_set"/></c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>parmSetEE</c>
	  <c>Define the EE parameter set</c>
	  <c>value</c>
	  <c>See <xref target="parameter_set"/></c>	
          <c>Yes</c>

        </texttable>
	</section>

	<section anchor="parameter_set" title="KAS ECC Parameter Set JSON Values">
	<t>Each parameter set advertised is a self-contained JSON object using the following values.</t>
        <texttable anchor="parameter_set_table" title="KAS ECC Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>

          <c>psCurve</c>
	  <c>ECDSA curve for this set</c>
	  <c>value</c>
	  <c>P-224, K-233, B-233</c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>sha</c>
	  <c>SHA values supported</c>
	  <c>array</c>
	  <c>See <xref target="supported_sha"/></c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>


          <c>ccmKeySize</c>
	  <c>CCM key sizes supported</c>
	  <c>array</c>
	  <c>128, 192, 256</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>ccmNonceLen</c>
	  <c>Largest nonce length supported</c>
	  <c>value</c>
	  <c>7-11</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>ccmMacLen</c>
	  <c>CCM MAC length in bytes</c>
	  <c>value</c>
	  <c>8-16, even values only</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>cmacAESKeyLen</c>
	  <c>AES key lengths in bits supported</c>
	  <c>array</c>
	  <c>128, 192, 256</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>cmacMacLen</c>
	  <c>CMAC MAC length in bytes, note: 8 lte MacLen lte Blocksize(16)</c>
	  <c>array</c>
	  <c>8-16</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>hmacSHA</c>
	  <c>SHA size supported for HMAC</c>
	  <c>value</c>
	  <c>224, 256, 384, 512</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>hmacKeySize</c>
	  <c>HMAC key size in bytes, gte 14</c>
	  <c>value</c>
	  <c>14 or greater</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>hmacMacLen</c>
	  <c>HMAC Mac langth in bytes, gte 8</c>
	  <c>value</c>
	  <c>8 or greater</c>	
          <c>Yes</c>

        </texttable>
	</section>



	<section anchor="supported_functions" title="Supported KAS ECC Functions">
	    <t>The following function types may be advertised by the ACVP compliant crypto module:</t>
	    <t><list style="symbols">
		<t>dpGen</t>
		<t>dpVal</t>
		<t>keyPairGen</t>
		<t>fullVal</t>
		<t>partVal</t>
		<t>keyRegen</t>
	    </list></t>
	</section>

	<section anchor="supported_schemes" title="Supported KAS ECC Schemes">
	    <t>The following schemes may be advertised by the ACVP compliant crypto module:</t>
	    <t><list style="symbols">
		<t>Full Unified</t>
		<t>Full MQV</t>
		<t>Ephemiral Unified</t>
		<t>One Pass Unified</t>
		<t>One Pass MQV</t>
		<t>One Pass DH</t>
		<t>Static Unified</t>
		<t>Sec 5.7.1.2 ECCDH Component Test</t>
	    </list></t>
	</section>

	<section anchor="supported_curves" title="Supported ECDSA2 Curves">
	    <t>The following ECDSA2 curves may be advertised by the ACVP compliant crypto module:</t>
	    <t><list style="symbols">
		<t>P-244</t>
		<t>P-256</t>
		<t>P-384</t>
		<t>P-521</t>
		<t>K-233</t>
		<t>K-283</t>
		<t>K-409</t>
		<t>K-571</t>
		<t>B-233</t>
		<t>B-283</t>
		<t>B-409</t>
		<t>B-571</t>
	    </list></t>
	</section>

	<section anchor="supported_sha" title="Supported SHA Methods">
	    <t>The following SHA methods may be advertised by the ACVP compliant crypto module:</t>
	    <t><list style="symbols">
		<t>SHA-1</t>
		<t>SHA-224</t>
		<t>SHA-256</t>
		<t>SHA-384</t>
		<t>SHA-512</t>
	    </list></t>
	</section>

    </section>

    <section anchor="test_vectors" title="Test Vectors">
	<t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to
	    the ACVP server for validation.  A typical ACVP validation session would require multiple test vector
	    sets to be downloaded and processed by the ACVP client.  Each test vector set represents an individual
	    KAS ECC function.  This section describes the JSON schema for a test vector set used with KAS ECC algorithms.</t>

	<t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire
	vector set as well as individual test vectors to be processed by the ACVP client.The following table describes the JSON elements at the top level of the hierarchy.
	</t>
	<texttable anchor="vs_top_table" title="Vector Set JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>

	  <c>acvVersion</c>
	  <c>Protocol version identifier</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>vsId</c>
	  <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
	  <c/><c/><c/>

          <c>algorithm</c>
	  <c>KAS ECC</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>type</c>
	  <c>Type of operation supported</c>
	  <c>value</c>
	  <c/><c/><c/>

	  <c>testGroups</c>
	  <c>Array of test group JSON objects, which are defined in <xref target="tgjs" /></c>
          <c>array</c>
	</texttable>

	<section title="Test Groups JSON Schema" anchor="tgjs">
	    <t>The testGroups element at the top level in the test vector JSON object is an array of test
		groups.  Test vectors are grouped into similar test cases to reduce the amount of data transmitted
	        in the vector set.  For instance, all test vectors that use the same key size would be grouped
	        together.  The Test Group JSON object contains meta data that applies to all test vectors within
	        the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</t>

	<t> The test group for KAS ECC is as follows:</t>
	<texttable anchor="vs_tg_table5" title="Vector Group JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
	  <ttcol align="left">Optional</ttcol>


	  <c>scheme</c>
	  <c>The scheme for the test vectors. See <xref target="supported_schemes" /> for possible values</c>
          <c>value</c>
          <c>No</c>
	  <c/><c/><c/><c/>

          <c>curve</c>
	  <c>EC curve used</c>
	  <c>See <xref target="supported_curves"/></c>
          <c>No</c>
	  <c/><c/><c/><c/>

          <c>parmSet</c>
	  <c>Parameter set value to use</c>
	  <c>EB, EC, ED, EE</c>	
          <c>No</c>
	  <c/><c/><c/><c/>

          <c>sha</c>
	  <c>SHA values being used</c>
	  <c>See <xref target="supported_sha"/></c>	
          <c>No</c>
	  <c/><c/><c/><c/>

          <c>ccm</c>
	  <c>CCM key size being used</c>
	  <c>128, 192, 256</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/>

          <c>hmac</c>
	  <c>HMAC being used</c>
	  <c>HMAC-SHA224, HMAC-SHA256, HMAC-SHA384, HMAC-SHA512</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/>

          <c>cmac</c>
	  <c>CMAC being used</c>
	  <c>CMAC-AES128, CMAC-AES192, CMAC-AES256</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/>

          <c>keyConf</c>
	  <c>Key confirmation supported</c>
	  <c>yes, no</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/>

          <c>kcRole</c>
	  <c>Key confirmation roles supported</c>
	  <c>provider and/or recepient</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/>

          <c>kcType</c>
	  <c>Key confirmation types supported</c>
	  <c>unilaterl and/or bilateral</c>	
          <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>tests</c>
	  <c>Array of individual test vector JSON objects, which are defined in <xref target="tvjs" /></c>
	  <c>array</c>
          <c>No</c>
	</texttable>

          </section>

	<section title="Test Vectors JSON Schema" anchor="tvjs">
	    <t>Each test group contains an array of one or more test vectors.  Each test vector is a JSON object
		that represents a single test case to be processed by the ACVP client.  The following table describes the JSON elements for each KAS ECC test vector.</t>
	    <texttable anchor="vs_tc_table5" title="Test Case JSON Object">
		<ttcol align="left">JSON Value</ttcol>
		<ttcol align="left">Description</ttcol>
		<ttcol align="left">JSON type</ttcol>
		<ttcol align="left">Optional</ttcol>

		<c>tcId</c>
		<c>Unique numeric identifier for the test case</c>
		<c>value</c>
		<c>No</c>
		<c/><c/><c/><c/>

		<c>qsX</c>
		<c>The ECDSA static public key x coordinate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>qsY</c>
		<c>The ECDSA static public key y coordinate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>qeX</c>
		<c>The ECDSA ephemeral public key x coordinate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>qeY</c>
		<c>The ECDSA ephemeral public key y coordinate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>nonceEphem</c>
		<c>nonceEphemCAVS ONLY USED BY C(1,2) and C(0,2) schemes with KC. nonce to be used in the MacData field</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>nonce</c>
		<c>The 16 byte nonce concatenated to the "Standard Test Message"</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>nonceDKM</c>
		<c>The nonce supplied by the initiator to be used in the OI field in the PartyUInfo field.</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>ds</c>
		<c>The ECDSA static private key</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>


		<c>de</c>
		<c>The ECDSA ephemeral private key</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>dsIUT</c>
		<c>The IUT ECDSA static private key</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>qsIUTX</c>
		<c>The IUT ECDSA static public key x coordinate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>qsIUTY</c>
		<c>The IUT ECDSA static public key y coordinate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>nonceEphemIUT</c>
		<c>nonceEphemIUT ONLY USED BY C(1,2) and C(0,2) schemes with KC. nonce to be used in the MacData field</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>deIUT</c>
		<c>The IUT ECDSA ephemeral private key</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>qeIUTX</c>
		<c>The IUT ECDSA ephemeral public key x coordinate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>qeIUTY</c>
		<c>The IUT ECDSA ephemeral public key y coordinate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>nonceDKMIUT</c>
		<c>The nonce supplied by the initiator to be used in the OI field in the PartyUInfo field.</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>ccmNonce</c>
		<c>Nonce used by the CCM function, if CCM is used to generate the Tag.</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>oiLen</c>
		<c>Length of the OtherInfo field</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>otherInfo</c>
		<c>OtherInfo field</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>tag</c>
		<c>The tag (or MAC) GENERATED BY THE CAVS by using the DKM to MAC the Message with the specified method </c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>iutTag</c>
		<c>The tag (or MAC) GENERATED BY THE IUT by using the DKM to MAC the Message with the specified method</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>dkm</c>
		<c>Derived Keying Material.</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>z</c>
		<c>A shared secret that is used to derive secret keying material using a key derivation function.</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>macData</c>
		<c>The message to be MAced.</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>result</c>
		<c>Pass Fail indicating if the IUT agrees with the Tag generated by the CAVS.</c>
		<c>value</c>
		<c>Yes</c>

	    </texttable>
	</section>
    </section>

    <section anchor="vector_responses" title="Test Vector Responses">
	<t>After the ACVP client downloads and processes a vector set, it must send the resonse vectors
	back to the ACVP server.  The following table describes the JSON object that represents a vector set response.</t>

	<texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>

	  <c>acvVersion</c>
	  <c>Protocol version identifier</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>vsId</c>
	  <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>testResults</c>
	  <c>Array of JSON objects that represent each test vector result, <xref target="tvjs" /></c>
          <c>array</c>
	</texttable>

    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TBD...</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Security considerations are addressed by the ACVP specification.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <reference anchor="ACVP">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>ACVP Specification</title>

          <author initials="authInitials" surname="authSurName">
            <organization>NIST</organization>
          </author>

          <date year="2016" />
        </front>
      </reference>
    </references>

    <section anchor="app-reg-ex" title="Example KAS ECC Capabilities JSON Object">
      <t>The following is a example JSON object advertising support for KAS ECC.</t>
      <figure>
        <artwork><![CDATA[


            {
                "algorithm": "KAS ECC",
                "prereqVals" : [{"algorithm" : "ECDSA", "valValue" : "123456"},
                                {"algorithm" : "DRBG", "valValue" : "123456"},
                                {"algorithm" : "SHA", "valValue" : "123456"},
                                {"algorithm" : "CCM", "valValue" : "123456"},
                                {"algorithm" : "CMAC", "valValue" : "123456"},
                                {"algorithm" : "HMAC", "valValue" : "123456"}],
                "functions": ["keyPairGen", "dpGen"],
		"scheme" : [{"Sec 5.7.1.2 ECCDH Component Test" : 
			         { "primitive" : "yes",
			           "ecdsa" : ["P-256"]
			         }
                             },
		             { "Full Unified" : 
			        { "withKDF" : "yes",
			          "role" : ["initiator", "responder"],
				  "kdf" : ["concatenation", "ASN1"],
				  "keyConf" : "yes",
				  "kcRole" : ["provider", "recepient"],
				  "kcType" : ["unilaterl", "bilateral"],
				  "parmSetEB" :
				      { "spCurve" : "P-224",
				        "sha" : [224],
					"ccmKeySize" : [128],
					"ccmNonceLen" : 13,
					"ccmMacLen" : 16,
					"cmacAESKeyLen" : [128],
					"cmacMacLen" : 128
				     }
				}
                             }
			   ] 
            }
            ]]></artwork>
    </figure>
    </section>
    <section anchor="app-vs-ex" title="Example Test Vectors JSON Object">
      <t>The following is a example JSON object for KAS ECC test vectors sent from the ACVP server to the crypto module.</t>
      <figure>
        <artwork><![CDATA[
                {
                  "acvVersion": "0.2",
                  "vsId": 1564,
                  "algorithm": "KAS ECC",
                  "testGroups": [
                    {
                      "scheme": "Sec 5.7.1.2 ECCDH Component Test",
		      "curve" : "P-256", 
		      "sha" : "SHA-256",
                      "tests": [
                        {
                          "tcId": 2170,
			  "qsX" : "3b0c9d86b66a410a3f924979f62a29a160bbd2e8b87b44422057a8a5e5dd49f6",
			  "qsY" : "7e38ac86c83b787206728525d0c194838f8ca8c6a8e1b21d38acdc17456d0a4f"
                        }
                      ]
                    },
                    { "scheme": "Full Unified",
		      "parmSet" : "EB",
		      "keyConf" : "yes",
		      "kcRole" : "provider",
		      "kcType" : "bilateral",
		      "sha" : "SHA-224",
		      "ccm" : "AES-128",
                      "tests": [
                        {
                          "tcId": 2171,
			  "ds" : "ebfe2cb9f6c202ba1bfe1262b9b18afd568f1897e54759a67d7356b1",
			  "qsX" : "4a7bee27e32c37327ec96f70a9e18796ab87ceed16861112aeea1311",
			  "qsY" : "0fb6c082051ea0fef3b06e9989dd8c5fd236ccc8c9366a375f426ec8",
			  "de" : "64f72afd10a2f3adca0728d3acf437aeac8b294a08808ea60626f487",
			  "qeX" : "9cf9f8d751b9032e79cb89236cf16eb707fc415411d40645a4796b84",
			  "qeY" : "c7e0ba911b6dec5dce3a748db2f380c1e55bfc0d9b2a193017387361",
			  "dsIUT" : "6f7c73e7b22fbb992156a970ce5edd8cca6c7a9375cb6490558bec70",
			  "qsIUTX" : "79a215a5c1d5e68dbc259527e5f856b748c3498375f7c2dbb1315f2f",
			  "qsIUTY" : "0009b15a8a40a9d9d5d8508b8772e91447d642aabdc745aeab20faf1",
			  "deIUT" : "0caf1bbd8d554769c0f74f33bd19f23609d18ed3badc7530910bfb79",
			  "qeIUTX" : "1dbb80e2820f13a6e036a9dbfc846dd2f127c79618e3eb4a06c31a6d",
			  "qeIUTY" : "f61db3ec77cb54c00bdf7690aa0ff1b82234c2a7ed5622bc3177b9c3",
			  "ccmNonce" : "1517f0379da60bcb70c6216936",
			  "otherInfo" : "a1b2c3d4e5434156536964554d912b575975a4bfeb9dd47e039956d4afce4d65d0274c90200873fc7484db733fcf35",
			  "iutTag" : "332d1f595f67e11a9a8fb52000363ca6"
			}
                  ]
                }
            ]
         }
            ]]></artwork>
      </figure>
    </section>
    <section anchor="app-results-ex" title="Example Test Results JSON Object">
      <t>The following is a example JSON object for KAS ECC test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
                {
                    "acvVersion": "0.2",
                    "vsId": 1564,
                    "testResults": [
                        {
                            "tcId": 2170,
			    "qsIUTX" : "60006447cf8f19977515784553cc5531f3fe9db1e7f334b752a141fb1b52d0fb",
			    "qsIUTY" : "40ec0979e6d8c08796115d9550e819f0bb47613af6d1dc2a5d8938ff370ed973",
			    "z" : "41bb3d087e78de21a617a64e7d67cbb0ead8c29547cc38b379ea19592e018e3f"
                        },
                       {
                            "tcId": 2171,
			    "z" : "90f66c669c2d6f0c8e150c8d25c581ecf720cf6e30fb39560e04d676045d35218c781e2f503f2a21b72c05781567654a4ba7cb7f9a54eeda",
			    "macData" : "4b435f325f55a1b2c3d4e54341565369641dbb80e2820f13a6e036a9dbfc846dd2f127c79618e3eb4a06c31a6df61db3ec77cb54c00bdf7690aa0ff1b82234c2a7ed5622bc3177b9c39cf9f8d751b9032e79cb89236cf16eb707fc415411d40645a4796b84c7e0ba911b6dec5dce3a748db2f380c1e55bfc0d9b2a193017387361",
			    "dkm" : "8c1908ce4139f2447e8cc8a99f108c11",
			    "result" : "false"
                      }
                    ]
                }
            ]]></artwork>
        </figure>
    </section>
  </back>
</rfc>
