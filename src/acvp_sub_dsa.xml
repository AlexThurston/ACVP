<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subdsa-0.4" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="Sym Alg JSON">ACVP DSA2 Algorithm JSON Specification</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Barry Fussell" initials="B.F." role="editor"
            surname="Fussell">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>bfussell@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="June" year="2016" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>TBD</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>acvp</keyword>
    <keyword>crypto</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document defines the JSON schema for using DSA2 algorithms with the ACVP specification.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically
              verify the cryptographic implementation of a software or hardware crypto module.
              The ACVP specification defines how a crypto module communicates with an ACVP
              server, including crypto capabilities negotiation, session management, authentication,
	      vector processing and more.  The ACVP specification does not define algorithm specific
	      JSON constructs for performing the crypto validation.  A series of ACVP sub-specifications
	      define the constructs for testing individual crypto algorithms.  Each sub-specification
	      addresses a specific class of crypto algorithms.  This sub-specification defines the JSON
	      constructs for testing DSA2 algorithms using ACVP.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted in
	<xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

<section anchor="caps_reg" title="Capabilities Registration">
    <t>ACVP requires crypto modules to register their capabilities.  This allows the crypto
	module to advertise support for specific algorithms, notifying the ACVP server which
	algorithms need test vectors generated for the validation process.  This section
    describes the constructs for advertising support of DSA2 algorithms to the ACVP server.</t>

    <t>The algorithm capabilities are advertised as JSON objects within the 'algorithms'
	value of the ACVP registration message.  The 'algorithms' value is an array, where each
	array element is an individual JSON object defined in this section.  The 'algorithms'
	value is part of the 'capability_exchange' element of the ACVP JSON registration message.
	See the ACVP specification for details on the registration message.</t>

	<section anchor="prereq_algs" title="Required Prerequisite Algorithms for DSA Validations">
	    <t>Each DSA implementation relies on other cryptographic primitives.
	    For example, DSA uses an underlying SHA algorithm. Each of these underlying algorithm primitives 
	    must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</t>

          <texttable anchor="rereqs_table" title="Required DSA2 Prerequisite Algorithms JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>algorithm</c>
          <c>a prerequisite algorithm</c>
          <c>value</c>
          <c>DRBG, SHA, SHA_OPT2</c>
          <c>No</c>
          <c/><c/><c/><c/><c/>

          <c>valValue</c>
          <c>algorithm validation number</c>
          <c>value</c>
          <c>actual number or "same"</c>
          <c>No</c>
          <c/><c/><c/><c/><c/>

          <c>prereqAlgVal</c>
          <c>prerequistie algorithm validation</c>
          <c>object with algorithm and valValue properties</c>
          <c>see above</c>
          <c>No</c>

	  </texttable>
	  </section>

    <section anchor="dsa_caps_reg" title="DSA2 Algorithm Capabilities Registration">
    <t>Each algorithm capability advertised is a self-contained JSON object using the following values.</t>
        <texttable anchor="caps_table" title="DSA2 Algorithm Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>

          <c>algorithm</c>
	  <c>The algorithm under test</c>
          <c>value</c>
          <c>DSA2</c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>prereqVals</c>
          <c>prerequistie algorithm validations</c>
          <c>array of prereqAlgVal objects</c>
          <c>See <xref target="prereq_algs" /></c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

	  <c>methods</c>
	  <c>Method and associated parameters represented as an array of the following JSON values</c>
	  <c>array</c>
	  <c>See the following values</c>
	  <c>No</c>
	  <c/><c/><c/><c/><c/>

	  <c>type</c>
	  <c>Type of method or algorithm supported, represented as an array of the following JSON values</c>
	  <c>value</c>
	  <c>See <xref target="supported_types" /></c>
	  <c>No</c>
	  <c/><c/><c/><c/><c/>

	  <c>genPQ</c>
	  <c>Generate P and Q method, one or both</c>
	  <c>array</c>
	  <c>Probable, Provable</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/><c/>

	  <c>genG</c>
	  <c>Generate G method, one or both</c>
	  <c>array</c>
	  <c>Unverifiable, Canonical</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/><c/>

	  <c>lnInfo</c>
	  <c>Array of the following values for this type of method</c>
	  <c>array</c>
	  <c>See the following two fields as values of the array</c>
	  <c>No</c>
	  <c/><c/><c/><c/><c/>

	  <c>ln</c>
	  <c>Length in bits of prime modulus p and the prime divisor</c>
	  <c>value</c>
	  <c>1024-224, 2048-224, 2048-256, 3072-256</c>
	  <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>sha</c>
	  <c>Array of SHA values used for an LN</c>
	  <c>array</c>
	  <c>See <xref target="supported_sha"/></c>	
          <c>Yes</c>
        </texttable>

	<t>Note: Some optional values are required depending on the algorithm.  Failure to provide these values will
	result in the ACVP server returning an error to the ACVP client during registration.</t>
  </section>

	<section anchor="supported_types" title="Supported DSA2 Functions">
	    <t>The following DSA2 method types may be advertised by the ACVP compliant crypto module:</t>
	    <t><list style="symbols">
		<t>pqgGen</t>
		<t>pqgVer</t>
		<t>keyPair</t>
		<t>sigGen</t>
		<t>sigVer</t>
	    </list></t>
	</section>

	<section anchor="supported_sha" title="Supported SHA Methods">
	    <t>The following SHA methods may be advertised by the ACVP compliant crypto module:</t>
	    <t><list style="symbols">
		<t>SHA-1</t>
		<t>SHA-224</t>
		<t>SHA-256</t>
		<t>SHA-384</t>
		<t>SHA-512</t>
		<t>SHA-512-244</t>
		<t>SHA-512-256</t>
	    </list></t>
	</section>
    </section>

    <section anchor="test_vectors" title="Test Vectors">
	<t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to
	    the ACVP server for validation.  A typical ACVP validation session would require multiple test vector
	    sets to be downloaded and processed by the ACVP client.  Each test vector set represents an individual
	    DSA2 function.  This section describes the JSON schema for a test vector set used with DSA2 algorithms.</t>

	<t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire
	vector set as well as individual test vectors to be processed by the ACVP client.The following table describes the JSON elements at the top level of the hierarchy.
	</t>
	<texttable anchor="vs_top_table" title="Vector Set JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>

	  <c>acvVersion</c>
	  <c>Protocol version identifier</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>vsId</c>
	  <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
	  <c/><c/><c/>

          <c>algorithm</c>
	  <c>DSA2</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>testGroups</c>
	  <c>Array of test group JSON objects, which are defined in <xref target="tgjs" /></c>
          <c>array</c>
	</texttable>

	<section title="Test Groups JSON Schema" anchor="tgjs">
	    <t>The testGroups element at the top level in the test vector JSON object is an array of test
		groups.  Test vectors are grouped into similar test cases to reduce the amount of data transmitted
	        in the vector set.  For instance, all test vectors that use the same key size would be grouped
	        together.  The Test Group JSON object contains meta data that applies to all test vectors within
	        the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</t>

	<t> The test group for DSA2 is as follows:</t>
	<texttable anchor="vs_tg_table5" title="Vector Group JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
	  <ttcol align="left">Optional</ttcol>


	  <c>type</c>
	  <c>The method type used for the test vectors.  See <xref target="supported_types" /> for possible values</c>
          <c>value</c>
          <c>No</c>
	  <c/><c/><c/><c/>

	  <c>ln</c>
	  <c>Length in bits of prime modulus p and the prime divisor as second item of array</c>
	  <c>array</c>
          <c>No</c>
	  <c/><c/><c/><c/>

          <c>sha</c>
	  <c>SHA version used</c>
	  <c>array</c>
          <c>Yes</c>
	  <c/><c/><c/><c/>

          <c>modulo</c>
	  <c>modulo for this test case</c>
	  <c>value</c>
          <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>genPQ</c>
	  <c>Probable, Provable</c>
          <c>value</c>
          <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>genG</c>
	  <c>Unverifiable, Canonical</c>
	  <c>array</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>tests</c>
	  <c>Array of individual test vector JSON objects, which are defined in <xref target="tvjs" /></c>
	  <c>array</c>
          <c>No</c>
	</texttable>

          </section>

	<section title="Test Case JSON Schema" anchor="tvjs">
	    <t>Each test group contains an array of one or more test cases.  Each test case is a JSON object
		that represents a single test vector to be processed by the ACVP client.  The following table describes the JSON elements for each DSA2 test vector.</t>
	    <texttable anchor="vs_tc_table5" title="Test Case JSON Object">
		<ttcol align="left">JSON Value</ttcol>
		<ttcol align="left">Description</ttcol>
		<ttcol align="left">JSON type</ttcol>
		<ttcol align="left">Optional</ttcol>

		<c>tcId</c>
		<c>Numeric identifier for the test case, unique across the entire vector set.</c>
		<c>value</c>
		<c>No</c>
		<c/><c/><c/><c/>

		<c>p</c>
		<c>The prime modulus</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>q</c>
		<c>The prime divisor of P-1</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>g</c>
		<c>The generator</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>r</c>
		<c>The signature component R</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>s</c>
		<c>The signature component S</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>y</c>
		<c>The public key component Y</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>number</c>
		<c>Number of domain parameter sets to be generated</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>seed</c>
		<c>Seed used to generate P and Q</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>counter</c>
		<c>The counter output from the generation of p</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>n</c>
		<c>The number of sets of X and Y values to generate</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>message</c>
		<c>The message used to generate signature or verify signature</c>
		<c>value</c>
		<c>Yes</c>

	    </texttable>
	</section>
    </section>

    <section anchor="vector_responses" title="Test Vector Responses">
	<t>After the ACVP client downloads and processes a vector set, it must send the response vectors
	back to the ACVP server.  The following table describes the JSON object that represents a vector set response.</t>

	<texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>

	  <c>acvVersion</c>
	  <c>Protocol version identifier</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>vsId</c>
	  <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>testResults</c>
	  <c>Array of JSON objects that represent each test vector result, as defined by the tables below</c>
          <c>array</c>
	</texttable>

	<t>The following table describes the JSON object that represents a vector set response for DSA2.</t>	<texttable anchor="vr_top_table5" title="Vector Set Response JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
	  <ttcol align="left">Optional</ttcol>

	  <c>p</c>
	  <c>The prime modulus</c>
	  <c>value</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>q</c>
	  <c>The prime divisor of P-1</c>
	  <c>value</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>g</c>
	  <c>The generator</c>
	  <c>value</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>x</c>
	  <c>The private key component X</c>
	  <c>value</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>y</c>
	  <c>The public key component Y</c>
	  <c>value</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>seed</c>
	  <c>Seed used to generate P and Q</c>
	  <c>value</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>counter</c>
	  <c>The counter output from the generation of p</c>
	  <c>value</c>
	  <c>Yes</c>
	  <c/><c/><c/><c/>

	  <c>sigResult</c>
	  <c>The pass or fail result of the verify</c>
	  <c>value</c>
	  <c>Yes</c>
	</texttable>
    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TBD...</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Security considerations are addressed by the ACVP specification.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <reference anchor="ACVP">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>ACVP Specification</title>

          <author initials="authInitials" surname="authSurName">
            <organization>NIST</organization>
          </author>

          <date year="2016" />
        </front>
      </reference>
    </references>

    <section anchor="app-reg-ex" title="Example DSA2 JSON Object">
      <t>The following sections contain example JSON for the various DSA modes: keyPair, sigGen, sigVer, pqgGen and pqgVer. Note that all binary HEX representations are in big-endian format.</t>

    <section anchor="app-reg-ex0" title="Example DSA2 Capabilities JSON Object">
      <t>The following is a example JSON object advertising support for all DSA modes.</t>
      <figure>
        <artwork><![CDATA[


            {
                "algorithm": "DSA2",
                "prereqVals" : [{"algorithm" : "SHA", "valValue" : "123456"},
			        {"algorithm" : "DRBG", "valValue" : "123456"}],
                "methods": [
			      { "type" : "pqgGen",
			        "genPQ" : ["provable", "probable"],
			        "genG" : ["unverifiable", "canonical"],
			        "lnInfo" : [
			                { "ln" : "2048-224", 
				          "sha" : ["SHA-1", "SHA-224", "SHA-256"]},
				        { "ln" : "2048-256", 
				          "sha" : ["SHA-1", "SHA-224", "SHA-256"]}
				       ]
                              },
			      { "type" : "pqgVer",
			        "genPQ" : ["provable", "probable"],
			        "genG" : ["unverifiable", "canonical"],
			        "lnInfo" : [
			                { "ln" : "2048-224", 
				          "sha" : ["SHA-1", "SHA-224", "SHA-256"]},
				        { "ln" : "2048-256", 
				          "sha" : ["SHA-1", "SHA-224", "SHA-256"]}
				       ]
                              },
			      { "type" : "sigGen",
			        "lnInfo" : [
			                { "ln" : "2048-224", 
				          "sha" : ["SHA-1", "SHA-224", "SHA-256"]},
				        { "ln" : "2048-256", 
				          "sha" : ["SHA-1", "SHA-224", "SHA-256"]}
				       ]
                              },
			      { "type" : "sigVer",
			        "lnInfo" : [
			                { "ln" : "2048-224", 
				          "sha" : ["SHA-1", "SHA-224", "SHA-256"]},
				        { "ln" : "2048-256", 
				          "sha" : ["SHA-1", "SHA-224", "SHA-256"]}
				       ]
                              }
			      { "type" : "keyPair",
		                "ln" : ["2048-224", "2048-256", "3072-256"]
                              }
			   ] 
            }
            ]]></artwork>
    </figure>
    </section>
    <section anchor="app-vs-ex1" title="Example Test DSA2 Generate JSON Object">
      <t>The following is a example JSON object for DSA2 generate test vectors sent from the ACVP server to the crypto module and the response.</t>
      <figure>
        <artwork><![CDATA[
              [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                  "algorithm": "DSA2",
                  "testGroups": [
                    {
                      "type": "pqgGen",
		      "genPQ" : "probable",
		      "ln" : "2048-224", 
		      "sha" : "SHA-224",
                      "tests": [
                        {
                          "tcId": 2170,
			  "num" : 5,
                        },
                      ]
                    }
                  ]
                }
             ]
            ]]></artwork>
      </figure>

      <t>The following is a example JSON object for DSA2 test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
              [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                    "testResults": [
                        {
                            "tcId": 2170,
                            "p" : "858d21ba756acdeb70f3d629de6607c49b5f31e36f55a9832b296b9b447ce1b34ce969592a4807ad8152bfa2fbc2a944f8c864764892646ee3bdb7234812bd66ddde3defd6e25bc31e6317c96744e5bb1134330ea87773002504cdb1f73b23c2f2e9c5b80aa9cf40910ececdf9047d905794dccefcae2d9d2c524c5a50dd089ae72a3a8f07f113fb3925195b091e9f876c96654b243180c39676b2380904bd19f2213b2336cfa4c1e01b8846cd2861bc9b79968ea871cf30d673af77f49eea890d94c2803d878a2b682e95e41e781cfd861987785b36c181a84befbfa8cab3998f751e266b08dbcce9652009d249788db0fae76f453ea79cfa405c499d37b5d3",
                            "q" : "ac992559af42b8899330a59f68c875066e19592faee08bb20ce413c5",
                            "seed" : "63f2a8a2b17e910695fd86980b027e7c328debc98a4a9fb209de7029",
                            "counter" : 263
                        }
                    ]
                }
             ]
            ]]></artwork>
        </figure>
    </section>
    <section anchor="app-vs-ex2" title="Example Test DSA2 Verify JSON Object">
      <t>The following is a example JSON object for DSA2 verify test vectors sent from the ACVP server to the crypto module and the response.</t>
      <figure>
        <artwork><![CDATA[
              [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                  "algorithm": "DSA2",
                  "testGroups": [
                    {
                      "type": "pqgVer",
		      "genPQ" : "probable",
		      "ln" : "2048-224", 
		      "sha" : "SHA-224",
                      "tests": [
                        {
                          "tcId": 2171,
			  "p" : "c92bd1ea2bbc438a85cf5d40e2a526b5db6d77082c7f086f264c9c70f6561ee438d2c381817be12e0cde6556a97e4624b43f6f6a3688c2791ccb84bb75f19eeb85656534b02738a952ea6aaeeb0625831f6640b869146a0bb5c0664503126f1e80f3033da0e7573ca0c91bbcda2618e2978c3ba3d9e73c125b4548a10a8b3d6ef1ad5ecba64298fd5f19f7062d882c044ffbf64c81f91542f7aff72dea711d0bf6b37402266050670e2f605c74aefb220ac6dbdb05842cf71d0967a292dd36656a2e58a52f1f84f54bab94f83b8d462f3d1bb79582e00389ee088767ab2a95f987daa86966d342d58cf71f8b419e85403a19025d595f1e60245b87264a93047d",
			  "q" : "ba15474ce0d94df493534038946932162cb58f8a56832e7b2bc92c07",
			  "seed" : "09f16b3b6fbd738c9155fe15c2ad77933cc83e6d861b290a036cdf6a",
			  "counter" : 839,
                        },
                      ]
                    }
                  ]
                }
             ]
            ]]></artwork>
      </figure>

      <t>The following is a example JSON object for DSA2 test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
              [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                    "testResults": [
                        {
                            "tcId": 2171,
			    "sigResult" : "fail"
                        }
                    ]
                }
             ]
            ]]></artwork>
        </figure>
    </section>
    <section anchor="app-vs-ex3" title="Example Test DSA2 Generation JSON Object">
      <t>The following is a example JSON object for DSA2 generation test vectors sent from the ACVP server to the crypto module and the response.</t>
      <figure>
        <artwork><![CDATA[
             [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                  "algorithm": "DSA2",
                  "testGroups": [
                    {
                      "type": "sigGen",
		      "ln" : "2048-224", 
		      "sha" : "SHA-224",
                      "tests": [
                        {
                          "tcId": 2172,
	                  "msg" : "9e4ece82e3c8e00ade2d7d24f2957032baa644a8cb76ba9d21a2163c70dbe0e1c2fd74039e7f778ca044a17999a0e2853ad19f1e6b326d8ac8f3e8548f147636bfa3e97639a4986ad921fed02b2c2fa5c7503ebd700953d1608c4a1312f309ee5101a7571f5c559508cf4473307fbd78884cdf3975acf25d17e5d264cc763793"
                        }]
                   }]
              }]
            ]]></artwork>
        </figure>

      <t>The following is a example JSON object for DSA2 generation test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
              [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                    "testResults": [
                        {
                            "tcId": 2172,
                            "p":  "858d21ba756acdeb70f3d629de6607c49b5f31e36f55a9832b296b9b447ce1b34ce969592a4807ad8152bfa2fbc2a944f8c864764892646ee3bdb7234812bd66ddde3defd6e25bc31e6317c96744e5bb1134330ea87773002504cdb1f73b23c2f2e9c5b80aa9cf40910ececdf9047d905794dccefcae2d9d2c524c5a50dd089ae72a3a8f07f113fb3925195b091e9f876c96654b243180c39676b2380904bd19f2213b2336cfa4c1e01b8846cd2861bc9b79968ea871cf30d673af77f49eea890d94c2803d878a2b682e95e41e781cfd861987785b36c181a84befbfa8cab3998f751e266b08dbcce9652009d249788db0fae76f453ea79cfa405c499d37b5d3",
                            "q" : "ac992559af42b8899330a59f68c875066e19592faee08bb20ce413c5",
                            "g" : "7fcfabe3dd90a7f877d3389c7af03e584dc3519432c9b393bb21c65646b22d4c8be20f450b782f728aa2454795f3cb63f488040e3c9775b214837161283de0530e6e02c3a022bf6ff5b3c249ad1d94cd7cfc49ef8ce5124ce726005fafd31095a608df2b2cba186786f22b180a234e1cface566b95c047d3192d91511ba5f6a09b68f21df844d5a8e5ac816ae04c2fae247e987bcd460ad88a83e56f4e3ec97e3ca1cd19c76260f461ea5338eaeb092156dcc1d226cb104f4543880c1d0e7210b29488b943d67b6a9e427f0c290439c216368da8104b3de5ad6cb6e65b3c0d97998214fba7690006d7910203ffb8d2fcc0cb94bf738bbb85a501508441bb1052",
                            "y" : "70a89e1b6b6db695ab0d2225ce650f8f53dc4afc0e34329f5e7f5a1bbbae82eba0f741402c2a180469601a41fa34b2077b64c823255141858b079d2604fab2676692b1e05b9dd6feb17c09961d6ff8d0eb816d38a948bbb428642b6f3020a29e9fdc3b7eda624c883a8e61d78749f2c395bebae694af6d60a25b3d933c83efb5102b618ff042f4560c535adc03f2a78e573d625180cc977e89cf7098fbfce8d78d9574a6c3efcf771e70881a0b298a9373a2b76728a63f342340e133a15ccc4479a4cd2b31dd23a2c6879b300615d0ee647584b89e7f47245aea6bc7a66372a6bab2a99a1c0c7067676d6e780012bbb318844536a0756d13b576f7829b189e8b",
                            "r" : "0dfe65ce3a33aac243341eec0ae80d1c7b570911b950963ef9d80ebc",
                            "s" : "4c03c9685639b55b446130df087077cba28abf3aeedb01b604f54fdc"
                        }
                    ]
                }
             ]
          ]]></artwork>
      </figure>
    </section>
    <section anchor="app-vs-ex4" title="Example Test DSA2 Generation JSON Object">
      <t>The following is a example JSON object for DSA2 generation test vectors sent from the ACVP server to the crypto module and the response.</t>
      <figure>
        <artwork><![CDATA[
             [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                  "algorithm": "DSA2",
                  "testGroups": [
                    {
                      "type": "sigVer",
	              "genPQ" : "provable",
		      "modulo" : 2048,
                      "n" : "b601f0e72aaddc16bf706cb547c2fbcb5f771aa88c063964b2d60f873ca00eb2ca5fe8703280c64fc9a55527df4747501ebe9ee67c12b1024b9b5b02ec2a5e5eda31784b035b095a1be3f9129ef38547b104333e6954709e9cd1e571ef5aafd5ab70c5efa777f56214633c0d5f6d026bda33b1d5d28f23c23f42a73f484304f6434bbe76fe972edb58118e4dd1c043ca80ccbc6c438381678847aef6dd30a81d7b3e7248448229f6fb7ccf37d2fd154c3ae39e953571bb867bafda8185a99f6de0d964092cde022f5f1b797fa00699eef7347b887d186d583b9c7bc209cb22448bfb810d0bc1099e8082bf96771c8fbde6929a825f7ce98eb3ba13f78a9f0c17"
                      "tests": [
                        {
                          "tcId": 2173,
                          "sha" : "SHA-1",
                          "e" : "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001",
                          "msg" : "40d40db43aedf3af7ebbfb83836beee2fe6cced5aa23bd0a44e11b6fda12ef0046b788dcf616649feeaf50ec0f73d1499931c330ef5140629ac4c37f913b8dd4b7974874a6a1eb8aabfcdded11585df5a3e7218e6c153d8ac174473c82f5b9429c5e96a2d2f85119be88eaaf12815a8f24783116aad87e2ac1d7efcd35a939f1",
                          "s" : "618461dabf3f7a997bdb30f0002787f3484c32c748b54b1b7d14169c84d69aea210bb451b394662f38ba303f6558231719a996d581d7f349320946252d8e64f16e86e962e28bc3fda47a182e4c4d6f987959dbdb97728c8a1c4243e2064888c5f975c380e91e8bde87db399b8aefdddb52b962f10218c27f3bd6d0b27f173b6aecb22901b0fe88dc145e56f4cc660c10f2a239e980d12c4af2392af78478a2f3d2a0c03f1f47aad89eda2bda734a5063b6804fb7607c7cc063a4e6301436574b36ac6fb24bf66717ab8bf67908d843db6ffab6c4a3c36d3e06cca012623df6e812ed38036fddf35f06bc3fc3b666f90ed19fafe309579c8fea884ccbb763b19d"
                        }]
                   }]
              }]
            ]]></artwork>
        </figure>

      <t>The following is a example JSON object for DSA2 generation test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
              [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                    "testResults": [
                        {
                            "tcId": 2173,
                            "sigResult" : "pass"
                        }
                    ]
                }
             ]
          ]]></artwork>
      </figure>
    </section>
    <section anchor="app-vs-ex5" title="Example Test DSA2 Generation JSON Object">
      <t>The following is a example JSON object for DSA2 generation test vectors sent from the ACVP server to the crypto module and the response.</t>
      <figure>
        <artwork><![CDATA[
             [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                  "algorithm": "DSA2",
                  "testGroups": [
                    {
                      "type": "keyPair",
		      "ln" : "2048-224", 
		      "sha" : "SHA-224",
                      "tests": [
                        {
                          "tcId": 2171,
	                  "num" : 10
                        }]
                   }]
              }]
            ]]></artwork>
        </figure>

      <t>The following is a example JSON object for DSA2 generation test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
              [
                { "acvVersion": "0.4" },
                { "vsId": 1564,
                    "testResults": [
                        {
                            "tcId": 2171,
                            "p" : "858d21ba756acdeb70f3d629de6607c49b5f31e36f55a9832b296b9b447ce1b34ce969592a4807ad8152bfa2fbc2a944f8c864764892646ee3bdb7234812bd66ddde3defd6e25bc31e6317c96744e5bb1134330ea87773002504cdb1f73b23c2f2e9c5b80aa9cf40910ececdf9047d905794dccefcae2d9d2c524c5a50dd089ae72a3a8f07f113fb3925195b091e9f876c96654b243180c39676b2380904bd19f2213b2336cfa4c1e01b8846cd2861bc9b79968ea871cf30d673af77f49eea890d94c2803d878a2b682e95e41e781cfd861987785b36c181a84befbfa8cab3998f751e266b08dbcce9652009d249788db0fae76f453ea79cfa405c499d37b5d3",
                            "q" : "ac992559af42b8899330a59f68c875066e19592faee08bb20ce413c5",
                            "g" : "7fcfabe3dd90a7f877d3389c7af03e584dc3519432c9b393bb21c65646b22d4c8be20f450b782f728aa2454795f3cb63f488040e3c9775b214837161283de0530e6e02c3a022bf6ff5b3c249ad1d94cd7cfc49ef8ce5124ce726005fafd31095a608df2b2cba186786f22b180a234e1cface566b95c047d3192d91511ba5f6a09b68f21df844d5a8e5ac816ae04c2fae247e987bcd460ad88a83e56f4e3ec97e3ca1cd19c76260f461ea5338eaeb092156dcc1d226cb104f4543880c1d0e7210b29488b943d67b6a9e427f0c290439c216368da8104b3de5ad6cb6e65b3c0d97998214fba7690006d7910203ffb8d2fcc0cb94bf738bbb85a501508441bb1052",
                            "x" : "6bc06142d13d991a272148f57fc9b2fd68ff306bca708865d38c6ed8",
                            "y" : "70a89e1b6b6db695ab0d2225ce650f8f53dc4afc0e34329f5e7f5a1bbbae82eba0f741402c2a180469601a41fa34b2077b64c823255141858b079d2604fab2676692b1e05b9dd6feb17c09961d6ff8d0eb816d38a948bbb428642b6f3020a29e9fdc3b7eda624c883a8e61d78749f2c395bebae694af6d60a25b3d933c83efb5102b618ff042f4560c535adc03f2a78e573d625180cc977e89cf7098fbfce8d78d9574a6c3efcf771e70881a0b298a9373a2b76728a63f342340e133a15ccc4479a4cd2b31dd23a2c6879b300615d0ee647584b89e7f47245aea6bc7a66372a6bab2a99a1c0c7067676d6e780012bbb318844536a0756d13b576f7829b189e8b"
                        }
                    ]
                }
             ]
          ]]></artwork>
      </figure>
    </section>
   </section>
  </back>
</rfc>
