<?xml version="1.0" encoding="UTF-8"?>
<ietf-standard xmlns="https://www.metanorma.org/ns/ietf">
<bibdata type="standard">
<title language="en" format="text/plain" type="main">ACVP Password-based Key Derivation Function JSON Specification</title>
<title language="en" format="text/plain" type="abbrev">ACVP PBKDF</title>
<docidentifier>draft-gold-acvp-pbkdf-01</docidentifier>
<docnumber>draft-gold-acvp-pbkdf-01</docnumber>
<contributor>
<role type="editor"/>
<person>
<name>
<completename>Christopher Celi</completename>
</name>
<email>christopher.celi@nist.gov</email>
</person>
</contributor>
<contributor>
<role type="publisher"/>
<organization>
<name>Internet Engineering Task Force</name>
<abbreviation>IETF</abbreviation>
</organization>
</contributor>
<version>
<revision-date>2019-06-05</revision-date>
</version>
<language>en</language>
<script>Latn</script>
<status>
<stage>published</stage>
</status>
<copyright>
<from>2020</from>
<owner>
<organization>
<name>Internet Engineering Task Force</name>
<abbreviation>IETF</abbreviation>
</organization>
</owner>
</copyright>
<series type="stream">
<title>independent</title>
</series>
<series type="intended">
<title>informational</title>
</series>
<ext>
<doctype>internet-draft</doctype>
<area>General</area>
<ipr>trust200902</ipr>
<pi>
<toc>yes</toc>
</pi>
</ext>
</bibdata>
<preface><acknowledgements id="acknowledgements" obligation="informative">
<title>Acknowledgements</title>
<p id="_6a9b8c61-d0c2-42c4-9c40-52f3ec45a40d">There are no acknowledgements.</p>
</acknowledgements></preface><sections><clause id="abstract" inline-header="false" obligation="normative">
<title>Abstract</title>
<p id="_bc0671b1-88dd-45a7-8f4d-0ec7af3e14b2">This document defines the JSON schema for testing Password-based KDF implementations with the ACVP specification.</p>
</clause>
<clause id="introduction" inline-header="false" obligation="normative">
<title>Introduction</title>
<p id="_893f4cdf-6087-4930-882c-9d5f3d771f47">The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing Password-based KDF implementations using ACVP.</p>
</clause>
<terms id="conventions" obligation="normative"><title>Terms and definitions</title><p id="_35200157-7980-4e27-89d2-3e2e17006dda">No terms and definitions are listed in this document.</p>


</terms>
<clause id="supported" inline-header="false" obligation="normative"><title>Supported KDFs</title><p id="_d8be66f1-71c6-4f9b-aa1a-23bdb125254a">The following key derivation functions <bcp14>MAY</bcp14> be advertised by the ACVP compliant cryptographic module:</p>
<ul id="_46ef382b-c6e6-45bf-85ad-14bcbf94e335">
<li>
<p id="_9c07df89-fac3-4127-9dde-be0c24aaa66e">ACVP-KDF-PBKDF</p>
</li>
</ul></clause>
<clause id="testtypes" inline-header="false" obligation="normative"><title>Test Types and Test Coverage</title><p id="_4f8c8d38-6d2e-410a-b5df-721b9d96cc2c">This section describes the design of the tests used to validate Password-based KDF implementations.</p>
<clause id="_test_types" inline-header="false" obligation="normative"><title>Test Types</title><p id="_f2186d40-b29d-49a7-bcca-0e82f5937898">There is only one test type: functional tests. Each has a specific value to be used in the testType field. The testType field definitions are:</p>
<ul id="_25ba41af-46c3-4956-8df5-4ea0fb840e06">
<li>
<p id="_e7fe8830-1656-44ef-b839-63ec593f59d1">"AFT" - Algorithm Functional Test. These tests can be processed by the client using a normal <tt>derive_key</tt> operation. AFTs cause the implementation under test to exercise normal operations on a single block, multiple blocks, or partial blocks. In all cases, random data is used. The functional tests are designed to verify that the logical components of the key derivation process are operating correctly.</p>
</li>
</ul></clause>
<clause id="_test_coverage" inline-header="false" obligation="normative">
<title>Test Coverage</title>
<p id="_22eb15e2-e7c6-459b-bec5-5614132a8408">The tests described in this document have the intention of ensuring an implementation is conformant to XXX.</p>
</clause></clause>
<clause id="capabilities" inline-header="false" obligation="normative"><title>Capabilities Registration</title><p id="_edc8a819-bec7-4c6b-a898-c292f1c37738">ACVP requires crypto modules to register their capabilities. This allows the crypto module to advertise support for specific algorithms, notifying the ACVP server which algorithms need test vectors generated for the validation process.  This section describes the constructs for advertising support of PBKDF algorithms to the ACVP server.</p>
<p id="_8979cfc5-f5b5-49ba-a656-20ae2e0096c6">The algorithm capabilities <bcp14>MUST</bcp14> be advertised as JSON objects within the 'algorithms' value of the ACVP registration message. The 'algorithms' value is an array, where each array element is an individual JSON object defined in this section. The 'algorithms' value is part of the 'capability_exchange' element of the ACVP JSON registration message. See the ACVP specification <xref target="ACVP"/> for more details on the registration message.</p>
<clause id="prerequisites" inline-header="false" obligation="normative"><title>Prerequisites</title><p id="_85eab4f6-0a21-4932-9358-e7733b15a4f1">Each algorithm implementation <bcp14>MAY</bcp14> rely on other cryptographic primitives.	For example, RSA Signature algorithms depend on an underlying hash function. Each of these underlying algorithm primitives must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</p>
<p id="_24430b7c-4650-4404-aa78-114f9e892492">Prerequisites, if applicable, <bcp14>MUST</bcp14> be submitted in the registration as the <tt>prereqVals</tt> JSON property array inside each element of the <tt>algorithms</tt> array. Each element in the <tt>prereqVals</tt> array <bcp14>MUST</bcp14> contain the following properties</p>
<table id="_3a85ac8d-d52c-4349-8206-4cb5bb34fafe">
<name>Prerequisite Properties</name>
<thead>
<tr>
<th align="left">JSON Property</th>
<th align="left">Description</th>
<th align="left">JSON Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">algorithm</td>
<td align="left">a prerequisite algorithm</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">valValue</td>
<td align="left">algorithm validation number</td>
<td align="left">string</td>
</tr>
</tbody>
</table>
<p id="_5e04e32a-f268-4062-ba2d-ae7b1af943c1">A "valValue" of "same" <bcp14>SHALL</bcp14> be used to indicate that the prerequisite is being met by a different algorithm in the capability exchange in the same registration.</p>
<p id="_7aac8c4f-fa0e-4989-ba80-468b4c7632c9">An example description of prerequisites within a single algorithm capability exchange looks like this</p>
<sourcecode lang="json" id="_b210c292-838c-479a-85c1-38d928ab76eb">"prereqVals":
[
  {
    "algorithm": "Alg1",
    "valValue": "Val-1234"
  },
  {
    "algorithm": "Alg2",
    "valValue": "same"
  }
]</sourcecode>
</clause>
<clause id="properties" inline-header="false" obligation="normative">
<title>Property Registration</title>
<p id="_89226071-be2a-489c-ab83-2bd33cf06643">The Password-based KDF mode capabilities are advertised as JSON objects within the 'capabilities_exchange' property.</p>
</clause>
<clause id="_registration_example" inline-header="false" obligation="normative"><title>Registration Example</title><p id="_8bfea908-5d59-4844-b62e-6e911664197d">A registration <bcp14>SHALL</bcp14> use these properties</p>
<table id="_85f990f4-be11-4b39-b190-ebed5ca72fa4">
<name>PBKDF Algorithm Capabilities JSON Values</name>
<thead>
<tr>
<th align="left">JSON Property</th>
<th align="left">Description</th>
<th align="left">JSON Type</th>
<th align="left">Valid Values</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">algorithm</td>
<td align="left">Name of the algorithm to be validated</td>
<td align="left">string</td>
<td align="left">"PBKDF"</td>
</tr>
<tr>
<td align="left">revision</td>
<td align="left">ACVP Test version</td>
<td align="left">string</td>
<td align="left">"1.0"</td>
</tr>
<tr>
<td align="left">prereqVals</td>
<td align="left">Prerequisites of the algorithm</td>
<td align="left">object</td>
<td align="left">See <xref target="prerequisites"/></td>
</tr>
<tr>
<td align="left">capabilities</td>
<td align="left">Array of capabilities</td>
<td align="left">array</td>
<td align="left">Each object in the array contains the below properties</td>
</tr>
<tr>
<td align="left">iterationCount</td>
<td align="left">Number of hash interations</td>
<td align="left">domain</td>
<td align="left">Min: 1, Max: 10000000</td>
</tr>
<tr>
<td align="left">keyLen</td>
<td align="left">The length of the output key in bits</td>
<td align="left">domain</td>
<td align="left">Min: 112, Max: 4096</td>
</tr>
<tr>
<td align="left">passwordLen</td>
<td align="left">The length of the password in bytes (characters)</td>
<td align="left">domain</td>
<td align="left">Min: 8, Max: 128</td>
</tr>
<tr>
<td align="left">saltLen</td>
<td align="left">The length of the salt in bits</td>
<td align="left">domain</td>
<td align="left">Min: 128, Max: 4096</td>
</tr>
<tr>
<td align="left">hmacAlg</td>
<td align="left">The supported hash algorithms used for HMAC</td>
<td align="left">array</td>
<td align="left">See <xref target="valid-sha"/></td>
</tr>
</tbody>
</table>
<p id="_852aff4a-f2e8-4228-ac32-3c4ccd667663">An example registration within an algorithm capability exchange looks like this</p>
<sourcecode lang="json" id="_859f0de1-bcfa-4bf6-b81b-03ae893bee15">{
  "revision":"1.0",
  "algorithm":"PBKDF",
  "prereqVals":[
    {
      "algorithm":"SHA",
      "valValue":"same"
    }
  ],
  "iterationCount":[
    {
      "min":10,
      "max":1000,
      "increment":1
    }
  ],
  "keyLen":[
    {
      "min":8,
      "max":4096,
      "increment":8
    }
  ],
  "passwordLen":[
    {
      "min":8,
      "max":128,
      "increment":1
    }
  ],
  "saltLen":[
    {
      "min":128,
      "max":4096,
      "increment":8
    }
  ],
  "hmacAlg":[
    "SHA-1",
    "SHA2-224",
    "SHA2-256",
    "SHA2-384",
    "SHA2-512",
    "SHA3-224",
    "SHA3-256",
    "SHA3-384",
    "SHA3-512"
  ]
}</sourcecode>

<clause id="valid-sha" inline-header="false" obligation="normative"><title>Valid Hash Functions</title><p id="_6b2f2a14-e4e3-41a2-b75f-e45c465758bd">The following hash functions <bcp14>MAY</bcp14> be advertised by an ACVP compliant client under the 'hmacAlg' property</p>
<ul id="_040c5508-687e-4bf8-80ae-487bae4ac75d">
<li>
<p id="_536dea67-2552-4023-8c29-a29c78731e8c">SHA-1</p>
</li>
<li>
<p id="_5ceb0662-5b9b-4790-9ae7-b8a40e04d62d">SHA2-224</p>
</li>
<li>
<p id="_825b1482-8b4e-490b-89fc-9113800b2d79">SHA2-256</p>
</li>
<li>
<p id="_628bb63a-95c7-414b-9c6c-f56f534d1ff0">SHA2-384</p>
</li>
<li>
<p id="_70b1cd99-d86e-44f1-81bd-eb26a683b28b">SHA2-512</p>
</li>
<li>
<p id="_05e8efd3-05dc-4636-b5ca-ee49eb1e81b7">SHA2-512/224</p>
</li>
<li>
<p id="_0d76f1dd-91d4-4666-a240-efdc5be50966">SHA2-512/256</p>
</li>
<li>
<p id="_7aa99581-0db7-4427-b870-ff94274b9d47">SHA3-224</p>
</li>
<li>
<p id="_0340e530-0600-415e-968c-5bacbcbb1909">SHA3-256</p>
</li>
<li>
<p id="_89e37465-17f2-4ac5-9848-fe28739734b0">SHA3-384</p>
</li>
<li>
<p id="_535ff958-f48a-4816-91ed-b7139acd7d16">SHA3-512</p>
</li>
</ul></clause></clause></clause>
<clause id="test-vectors" inline-header="false" obligation="normative"><title>Test Vectors</title><p id="_2717db11-b256-45bc-a297-56287287c6c8">The ACVP server provides test vectors to the ACVP client, which are then processed and returned to the ACVP server for validation. A typical ACVP validation test session would require multiple test vector sets to be downloaded and processed by the ACVP client. Each test vector set represents an individual algorithm defined during the capability exchange. This section describes the JSON schema for a test vector set used with Password-based KDF algorithms.</p>
<p id="_eddfb1f3-9162-4991-b302-87b66d25e3da">The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire vector set as well as individual test vectors to be processed by the ACVP client. The following table describes the JSON elements at the top level of the hierarchy.</p>
<table id="_6012391c-dbc1-4b8e-a424-5df742822696">
<name>Top Level Test Vector JSON Elements</name>
<thead>
<tr>
<th align="left">JSON Values</th>
<th align="left">Description</th>
<th align="left">JSON Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">acvVersion</td>
<td align="left">Protocol version identifier</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">vsId</td>
<td align="left">Unique numeric vector set identifier</td>
<td align="left">integer</td>
</tr>
<tr>
<td align="left">algorithm</td>
<td align="left">Algorithm defined in the capability exchange</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">mode</td>
<td align="left">Mode defined in the capability exchange</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">revision</td>
<td align="left">Protocol test revision selected</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">testGroups</td>
<td align="left">Array of test groups containing test data, see <xref target="tgjs"/></td>
<td align="left">array</td>
</tr>
</tbody>
</table>
<p id="_2f76636e-9a48-4012-ae76-01bf745493b3">An example of this would look like this</p>
<sourcecode lang="json" id="_cbf07a65-ac88-467e-b1bb-129f325e471e">{
  "acvVersion": "version",
  "vsId": 1,
  "algorithm": "Alg1",
  "mode": "Mode1",
  "revision": "Revision1.0",
  "testGroups": [ ... ]
}</sourcecode>

<clause id="tgjs" inline-header="false" obligation="normative"><title>Test Groups</title><p id="_e652cb2b-888c-4fd5-a974-295b288f2818">The testGroups element at the top level in the test vector JSON object is an array of test	groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped	together. The Test Group JSON object contains meta data that applies to all test vectors within	the group. The following table describes the Password-based KDF JSON elements of the Test Group JSON object</p>
<table id="_852646aa-9b03-40eb-8f8d-e199899ca9fb">
<name>Test Group JSON Object</name>
<thead>
<tr>
<th align="left">JSON Values</th>
<th align="left">Description</th>
<th align="left">JSON Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">tgId</td>
<td align="left">Test group identifier</td>
<td align="left">integer</td>
</tr>
<tr>
<td align="left">hmacAlg</td>
<td align="left">The hash algorithm used in HMAC</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">testType</td>
<td align="left">Describes the operation the client should perform on the tests data</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">tests</td>
<td align="left">Array of individual test cases</td>
<td align="left">array</td>
</tr>
</tbody>
</table>
<p id="_1e3ea532-9daf-4407-a151-9375ad02fbf9">The 'tgId', 'testType' and 'tests' objects <bcp14>MUST</bcp14> appear in every test group element communicated from the server to the client as a part of a prompt. Other properties are dependent on which 'testType' the group is addressing.</p></clause>
<clause id="_test_cases" inline-header="false" obligation="normative"><title>Test Cases</title><p id="_aaef1c09-92af-4111-8ced-fcfc384e68eb">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each Password-based KDF test vector.</p>
<table id="_f29670c9-8cb4-48c5-8d38-6900b2364d6a">
<name>Test Case JSON Object</name>
<thead>
<tr>
<th align="left">JSON Values</th>
<th align="left">Description</th>
<th align="left">JSON Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">tcId</td>
<td align="left">Test case idenfitier</td>
<td align="left">integer</td>
</tr>
<tr>
<td align="left">keyLen</td>
<td align="left">Length of the output key</td>
<td align="left">integer</td>
</tr>
<tr>
<td align="left">salt</td>
<td align="left">Salt value</td>
<td align="left">hex</td>
</tr>
<tr>
<td align="left">password</td>
<td align="left">Password value</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">iterationCount</td>
<td align="left">Number of iterations</td>
<td align="left">integer</td>
</tr>
</tbody>
</table>
<p id="_cd962b41-8a9a-4e39-9093-7b9fb7c5f1be">Here is an abbreviated yet fully constructed example of the prompt</p>
<sourcecode lang="json" id="_23f8e8ef-7267-4211-ada7-6704ff99ef6d">{
  "vsId": 1,
  "algorithm": "kdf-components",
  "mode": "PBKDF",
  "revision": "1.0",
  "testGroups": [
    {
      "tgId": 1,
      "testType": "AFT",
      "hmacAlg": "SHA2-224",
      "tests": [
        {
          "tcId": 1,
          "keyLen": 143,
          "salt": "BC902BA1EB3BD8519B68022F0FC15600D5D27A",
          "password": "FSLuCqOV",
          "iterationCount": 955
        },
        {
          "tcId": 2,
          "keyLen": 188,
          "salt": "8120C1DED77061BC5ED637DD51174F12",
          "password": "HCmKuigqgFlqpJv",
          "iterationCount": 269
        }
      ]
    }
  ]
}</sourcecode>
</clause></clause>
<clause id="responses" inline-header="false" obligation="normative"><title>Responses</title><p id="_da88b2b9-9a73-4cd8-8740-e962e81cab07">After the ACVP client downloads and processes a vector set, it must send the response vectors back to the ACVP server. The following table describes the JSON object that represents a vector set response.</p>
<table id="_edd354c3-8109-4403-84c1-d61ed520bac0">
<name>Vector Set Response JSON Object</name>
<thead>
<tr>
<th align="left">JSON Property</th>
<th align="left">Description</th>
<th align="left">JSON Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">acvVersion</td>
<td align="left">The version of the protocol</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">vsId</td>
<td align="left">The vector set identifier</td>
<td align="left">integer</td>
</tr>
<tr>
<td align="left">testGroups</td>
<td align="left">The test group data</td>
<td align="left">array</td>
</tr>
</tbody>
</table>
<p id="_defbe965-fc11-41e6-b95c-6b0378c39f6c">An example of this is the following</p>
<sourcecode lang="json" id="_06355c8a-688c-45f4-bad2-ecc590f7948b">{
	"acvVersion": "version",
	"vsId": 1,
	"testGroups": [ ... ]
}</sourcecode>

<p id="_899f6da9-8915-4ab5-9c1d-2c32f3ff36b3">The testGroups section is used to organize the ACVP client response in a similar manner to how it receives vectors. Several algorithms <bcp14>SHALL</bcp14> require the client to send back group level properties in their response. This structure helps accommodate that.</p>
<table id="_7c570d16-835f-45a8-bd16-a0c2bf164e68">
<name>Vector Set Group Response JSON Object</name>
<thead>
<tr>
<th align="left">JSON Property</th>
<th align="left">Description</th>
<th align="left">JSON Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">tgId</td>
<td align="left">The test group identifier</td>
<td align="left">integer</td>
</tr>
<tr>
<td align="left">tests</td>
<td align="left">The test case data</td>
<td align="left">array</td>
</tr>
</tbody>
</table>
<p id="_6673fb6e-9dd6-48ed-b674-c8593ac9f3bf">An example of this is the following</p>
<sourcecode lang="json" id="_db47a68b-2a27-49cf-ab01-3a140ecb8232">{
	"tgId": 1,
	"tests": [ ... ]
}</sourcecode>

<p id="_97746482-b8a5-4c4e-b1af-c60be7c3bc74">The following table describes the JSON object that represents a test case response for a Password-based KDF.</p>
<table id="_eb847d5b-0423-452f-b08f-2a78bea3ddda">
<name>Test Case Results JSON Object</name>
<thead>
<tr>
<th align="left">JSON Property</th>
<th align="left">Description</th>
<th align="left">JSON Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">tcId</td>
<td align="left">The test case identifier</td>
<td align="left">integer</td>
</tr>
<tr>
<td align="left">derivedKey</td>
<td align="left">The outputted key</td>
<td align="left">hex</td>
</tr>
</tbody>
</table>
<p id="_fcc11982-f3ee-45f1-98e4-e102e3afdd41">Here is an abbreviated example of the response</p>
<sourcecode lang="json" id="_14a1d124-96d9-4912-a2c9-70442d82fa82">{
  "vsId": 1,
  "algorithm": "kdf-components",
  "mode": "pbkdf",
  "revision": "1.0",
  "testGroups": [
    {
      "tgId": 1,
      "tests": [
        {
          "tcId": 1,
          "derivedKey": "986B212420E3B977068244E6BD..."
        },
        {
          "tcId": 2,
          "derivedKey": "B8F3EEC6B5FA270FB05644DE40..."
        }
      ]
    }
  ]
}</sourcecode>
</clause>
<clause id="security" inline-header="false" obligation="normative">
<title>Security Considerations</title>
<p id="_ed03ca58-29bf-4ff1-ab2d-2a0f0931ede4">There are no additional security considerations outside of those outlined in the ACVP document.</p>
</clause>
<clause id="iana" inline-header="false" obligation="normative">
<title>IANA Considerations</title>
<p id="_250586e9-5a4c-439e-a9b9-e1a728457e67">This document does not require any action by IANA.</p>
</clause>

</sections><bibliography><references id="_normative_references" normative="true" obligation="informative"><title>Normative References</title> <bibitem id="RFC2119" type="standard">  <fetched>2020-06-23</fetched>  <title format="text/plain" language="en" script="Latn">Key words for use in RFCs to Indicate Requirement Levels</title>  <uri type="xml">https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc2119</uri>  <docidentifier type="IETF">RFC 2119</docidentifier>  <docidentifier type="rfc-anchor">RFC2119</docidentifier>  <docidentifier type="DOI">10.17487/RFC2119</docidentifier>  <date type="published">    <on>1997-03</on>  </date>  <contributor>    <role type="author"/>    <person>      <name>        <completename language="en">S. Bradner</completename>      </name>      <affiliation>        <organization>          <name>Internet Engineering Task Force</name>          <abbreviation>IETF</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="publisher"/>    <organization>      <name>Internet Engineering Task Force</name>      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/plain" language="en" script="Latn">In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</abstract>  <series type="main">    <title format="text/plain" language="en" script="Latn">BCP</title>    <number>14</number>  </series>  <series type="main">    <title format="text/plain" language="en" script="Latn">RFC</title>    <number>2119</number>  </series>  <place>Fremont, CA</place></bibitem> <bibitem id="RFC7991" type="standard">  <fetched>2020-06-23</fetched>  <title format="text/plain" language="en" script="Latn">The "xml2rfc" Version 3 Vocabulary</title>  <uri type="xml">https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7991.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc7991</uri>  <docidentifier type="IETF">RFC 7991</docidentifier>  <docidentifier type="rfc-anchor">RFC7991</docidentifier>  <docidentifier type="DOI">10.17487/RFC7991</docidentifier>  <date type="published">    <on>2016-12</on>  </date>  <contributor>    <role type="author"/>    <person>      <name>        <completename language="en">P. Hoffman</completename>      </name>      <affiliation>        <organization>          <name>Internet Engineering Task Force</name>          <abbreviation>IETF</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="publisher"/>    <organization>      <name>Internet Engineering Task Force</name>      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/plain" language="en" script="Latn">This document defines the "xml2rfc" version 3 vocabulary: an XML-based language used for writing RFCs and Internet-Drafts.  It is heavily derived from the version 2 vocabulary that is also under discussion.  This document obsoletes the v2 grammar described in RFC 7749.</abstract>  <series type="main">    <title format="text/plain" language="en" script="Latn">RFC</title>    <number>7991</number>  </series>  <place>Fremont, CA</place></bibitem> <bibitem id="RFC8174" type="standard">  <fetched>2020-06-23</fetched>  <title format="text/plain" language="en" script="Latn">Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>  <uri type="xml">https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc8174</uri>  <docidentifier type="IETF">RFC 8174</docidentifier>  <docidentifier type="rfc-anchor">RFC8174</docidentifier>  <docidentifier type="DOI">10.17487/RFC8174</docidentifier>  <date type="published">    <on>2017-05</on>  </date>  <contributor>    <role type="author"/>    <person>      <name>        <completename language="en">B. Leiba</completename>      </name>      <affiliation>        <organization>          <name>Internet Engineering Task Force</name>          <abbreviation>IETF</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="publisher"/>    <organization>      <name>Internet Engineering Task Force</name>      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/plain" language="en" script="Latn">RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</abstract>  <series type="main">    <title format="text/plain" language="en" script="Latn">BCP</title>    <number>14</number>  </series>  <series type="main">    <title format="text/plain" language="en" script="Latn">RFC</title>    <number>8174</number>  </series>  <place>Fremont, CA</place></bibitem>
<bibitem id="ACVP">
  <fetched>2020-08-10</fetched>
  <title type="main" format="text/plain" language="en" script="Latn">Automatic Cryptographic Validation Protocol</title>
  <docidentifier type="ACVP">ACVP</docidentifier>
  <date type="published">
    <on>2019</on>
  </date>
  <contributor>
    <person>
      <name>
        <initial>B.</initial>
        <surname>Fussell</surname>
      </name>
      <affiliation>
        <organization>
          <name>Cisco</name>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <person>
      <name>
        <initial>A.</initial>
        <surname>Vassilev</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <person>
      <name>
        <initial>H.</initial>
        <surname>Booth</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="publisher"/>
    <organization>
      <name>National Institute of Standards and Technology</name>
      <abbreviation>NIST</abbreviation>
    </organization>
  </contributor>
</bibitem></references></bibliography>
</ietf-standard>
