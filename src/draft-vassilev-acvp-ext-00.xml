<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-vassilev-acvp-ext-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="ACVP Alg Test Ext">ACVP Algorithm Test Extensions Specification</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Apostol Vassilev" initials="A.V." role="editor" surname="Vassilev">
      <organization>National Institute of Standards and Technology</organization>

      <address>
        <postal>
          <street>100 Bureau Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>Gaithersburg</city>

          <region>MD</region>

          <code>20899</code>

          <country>USA</country>
        </postal>

        <email>apostol.vassilev@nist.gov</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="July" year="2018"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>TBD</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>acvp</keyword>
    <keyword>cryptography</keyword>
    <keyword>validation testing</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document defines how to extend the capabilties of ACVP with testing for new cryptographic algorithms.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically
              verify the cryptographic implementation of a software or hardware crypto module.
              The ACVP specification defines how a crypto module communicates with an ACVP
              server, including crypto capabilities negotiation, session management, authentication,
	      vector processing and more.  The ACVP specification does not define algorithm specific
	      JSON constructs for performing the crypto validation.  A series of ACVP sub-specifications
	      define the constructs for testing individual crypto algorithms.  Each sub-specification
	      addresses a specific class of crypto algorithms. This sub-specification outlines the procedure
	      for adding support for testing a new algorithm. </t>
    </section>

    <section anchor="taxonomy" title="Taxonomy of supported algorithms">
      <t>The high-level taxonomy of supported algorithm classes is shown below.</t>
      <t>
        <list style="numbers">
          <t>Symmetric block ciphers
            <list style="symbols">
              <t>AES</t>
              <t>TDES</t>
              <t>SkipJack</t>
            </list>
          </t>
          <t>Block Cipher Modes
            <list style="symbols">
              <t>CCM</t>
              <t>CMAC</t>
              <t>GCM/GMAC/XPN</t>
              <t>KeyWrap</t>
              <t>XTS</t>
            </list>
          </t>
          <t>Digital Signatures
            <list style="symbols">
              <t>RSA</t>
              <t>DSA</t>
              <t>ECDSA</t>
            </list>
          </t>
          <t>Hash
            <list style="symbols">
              <t>SHA-1</t>
              <t>SHA-2</t>
              <t>SHA-3</t>
            </list>
          </t>
          <t>XOF
            <list style="symbols">
              <t>SHAKE</t>
              <t>CSHAKE</t>
            </list>
          </t>
          <t>MAC
            <list style="symbols">
              <t>HMAC</t>
              <t>CMAC</t>
              <t>GMAC</t>
              <t>KMAC</t>
            </list>
          </t>
          <t>DRBG
            <list style="symbols">
              <t>CTR</t>
              <t>Hash</t>
              <t>HMAC</t>
            </list>
          </t>
          <t>KAS
            <list style="symbols">
              <t>DH</t>
              <t>Other Schemes</t>
            </list>
          </t>
          <t>Key Derivation
            <list style="symbols">
              <t>CTR</t>
              <t>Pipeline</t>
              <t>Feedback</t>
              <t>TLS</t>
              <t>SSH</t>
              <t>HASH</t>
              <t>HMAC</t>
              <t>TwoStep</t>
            </list>
          </t>
        </list>
      </t>
    </section>
    <section title="Adding a new algorithm to an existing class">
      <t>To add testing for a new algorithm first confirm that the class the new algorithm belongs to exists within the taxonomy in 
        <xref target="taxonomy"/>
. </t>
      <section title="Adding a new algorithm with existing test types">
        <t>If it belongs to an already-suppoted class, check if it is similar to some of the
        already supported algorithms from that class. Typically, the algorithms in a given class share similar testing methodology. </t>

        <t>For example, the testing of symmetric block ciphers is comprised of two test types: Algorithm Functional Tests and Monte Carlo Tests - 
        see          <xref target="sub-symmetric"/>
. </t>
        <t>Assuming that the existing test types provide sufficient test coverage for the new algorithm type, one needs to add the 
        new block cipher algorithm to the symmertic block cipher specification          <xref target="sub-symmetric"/>
, 
        including the schemas for the corresponding test data exchanges between the validation server and the client. 
        See in particular Section "Adding new algorithms" in the corresponding algorithm specification.</t>
        <t>Once this is completed and the corresponding server test generation and validation for that algorithm is implemented, 
        testing can commence. Clients implementing that algorithm may register it for testing as described in Section "Capabilities Registration" in 
          <xref target="sub-symmetric"/>
, process the test vectors generated by the validation server and return the results for validation. 
        </t>
      </section>
      <section title="Adding a new test type to a new or existing algorithm">
        <t>If the available test types for an algorithm, existing or new, in a given class do not provode good test coverage of the algorithm, 
        one could develop a new test type and incorporate it into the corresponding test specification for the existing class. See for example Section "Adding new algorithms" in 
          <xref target="sub-symmetric"/>
 for how to add a new test type. </t>
      </section>
    </section>
    <section title="Adding a new algorithm to a new class">
      <t>TBD.</t>
    </section>
    <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted in
        <xref target="RFC2119">RFC 2119</xref>.
      </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TBD...</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Security considerations are addressed by the ACVP specification.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <reference anchor="sub-symmetric" target="https://github.com/usnistgov/ACVP/blob/master/artifacts/acvp_sub_symmetric.txt">
        <!-- the following is the minimum to make xml2rfc happy -->
        <front>
          <title>ACVP Symmetric Algorithm JSON Specification</title>
          <author initials="J." surname="Foley">
            <organization>Cisco</organization>
          </author>
          <date year="2018"/>
        </front>
      </reference>
    </references>
  </back>
</rfc>
